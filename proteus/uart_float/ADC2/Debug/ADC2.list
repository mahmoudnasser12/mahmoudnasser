
ADC2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003224  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003334  08003334  00013334  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033bc  080033bc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080033bc  080033bc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080033bc  080033bc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033bc  080033bc  000133bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033c0  080033c0  000133c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080033c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000070  08003434  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08003434  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007307  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001629  00000000  00000000  000273a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000748  00000000  00000000  000289d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006b0  00000000  00000000  00029118  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017282  00000000  00000000  000297c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006bb6  00000000  00000000  00040a4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000850e6  00000000  00000000  00047600  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cc6e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000208c  00000000  00000000  000cc764  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	0800331c 	.word	0x0800331c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	0800331c 	.word	0x0800331c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2uiz>:
 80008fc:	004a      	lsls	r2, r1, #1
 80008fe:	d211      	bcs.n	8000924 <__aeabi_d2uiz+0x28>
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000904:	d211      	bcs.n	800092a <__aeabi_d2uiz+0x2e>
 8000906:	d50d      	bpl.n	8000924 <__aeabi_d2uiz+0x28>
 8000908:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d40e      	bmi.n	8000930 <__aeabi_d2uiz+0x34>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	fa23 f002 	lsr.w	r0, r3, r2
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d102      	bne.n	8000936 <__aeabi_d2uiz+0x3a>
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	4770      	bx	lr
 8000936:	f04f 0000 	mov.w	r0, #0
 800093a:	4770      	bx	lr
 800093c:	0000      	movs	r0, r0
	...

08000940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000940:	b590      	push	{r4, r7, lr}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000946:	f000 fa79 	bl	8000e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800094a:	f000 f863 	bl	8000a14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800094e:	f000 f919 	bl	8000b84 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000952:	f000 f8af 	bl	8000ab4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000956:	f000 f8eb 	bl	8000b30 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 800095a:	4827      	ldr	r0, [pc, #156]	; (80009f8 <main+0xb8>)
 800095c:	f000 fbca 	bl	80010f4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 20);
 8000960:	2114      	movs	r1, #20
 8000962:	4825      	ldr	r0, [pc, #148]	; (80009f8 <main+0xb8>)
 8000964:	f000 fc74 	bl	8001250 <HAL_ADC_PollForConversion>
	  lux = HAL_ADC_GetValue(&hadc1);
 8000968:	4823      	ldr	r0, [pc, #140]	; (80009f8 <main+0xb8>)
 800096a:	f000 fd77 	bl	800145c <HAL_ADC_GetValue>
 800096e:	4603      	mov	r3, r0
 8000970:	b29a      	uxth	r2, r3
 8000972:	4b22      	ldr	r3, [pc, #136]	; (80009fc <main+0xbc>)
 8000974:	801a      	strh	r2, [r3, #0]
	  adc_value = lux;
 8000976:	4b21      	ldr	r3, [pc, #132]	; (80009fc <main+0xbc>)
 8000978:	881a      	ldrh	r2, [r3, #0]
 800097a:	4b21      	ldr	r3, [pc, #132]	; (8000a00 <main+0xc0>)
 800097c:	801a      	strh	r2, [r3, #0]
float x = 3.3/4095;
 800097e:	4b21      	ldr	r3, [pc, #132]	; (8000a04 <main+0xc4>)
 8000980:	607b      	str	r3, [r7, #4]

	  uint16_t ziko = lux *(3.3/4095)*4.55;
 8000982:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <main+0xbc>)
 8000984:	881b      	ldrh	r3, [r3, #0]
 8000986:	4618      	mov	r0, r3
 8000988:	f7ff fd3c 	bl	8000404 <__aeabi_i2d>
 800098c:	a316      	add	r3, pc, #88	; (adr r3, 80009e8 <main+0xa8>)
 800098e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000992:	f7ff fda1 	bl	80004d8 <__aeabi_dmul>
 8000996:	4603      	mov	r3, r0
 8000998:	460c      	mov	r4, r1
 800099a:	4618      	mov	r0, r3
 800099c:	4621      	mov	r1, r4
 800099e:	a314      	add	r3, pc, #80	; (adr r3, 80009f0 <main+0xb0>)
 80009a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009a4:	f7ff fd98 	bl	80004d8 <__aeabi_dmul>
 80009a8:	4603      	mov	r3, r0
 80009aa:	460c      	mov	r4, r1
 80009ac:	4618      	mov	r0, r3
 80009ae:	4621      	mov	r1, r4
 80009b0:	f7ff ffa4 	bl	80008fc <__aeabi_d2uiz>
 80009b4:	4603      	mov	r3, r0
 80009b6:	807b      	strh	r3, [r7, #2]
	  sprintf(msg, " voltage is %hu \r\n",ziko);
 80009b8:	887b      	ldrh	r3, [r7, #2]
 80009ba:	461a      	mov	r2, r3
 80009bc:	4912      	ldr	r1, [pc, #72]	; (8000a08 <main+0xc8>)
 80009be:	4813      	ldr	r0, [pc, #76]	; (8000a0c <main+0xcc>)
 80009c0:	f002 f89a 	bl	8002af8 <siprintf>

	  HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 80009c4:	4811      	ldr	r0, [pc, #68]	; (8000a0c <main+0xcc>)
 80009c6:	f7ff fbc3 	bl	8000150 <strlen>
 80009ca:	4603      	mov	r3, r0
 80009cc:	b29a      	uxth	r2, r3
 80009ce:	f04f 33ff 	mov.w	r3, #4294967295
 80009d2:	490e      	ldr	r1, [pc, #56]	; (8000a0c <main+0xcc>)
 80009d4:	480e      	ldr	r0, [pc, #56]	; (8000a10 <main+0xd0>)
 80009d6:	f001 fef2 	bl	80027be <HAL_UART_Transmit>
	  HAL_Delay(500);
 80009da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009de:	f000 fa8f 	bl	8000f00 <HAL_Delay>
  {
 80009e2:	e7ba      	b.n	800095a <main+0x1a>
 80009e4:	f3af 8000 	nop.w
 80009e8:	e734d9b4 	.word	0xe734d9b4
 80009ec:	3f4a680c 	.word	0x3f4a680c
 80009f0:	33333333 	.word	0x33333333
 80009f4:	40123333 	.word	0x40123333
 80009f8:	200000b4 	.word	0x200000b4
 80009fc:	2000008c 	.word	0x2000008c
 8000a00:	200000b0 	.word	0x200000b0
 8000a04:	3a534067 	.word	0x3a534067
 8000a08:	08003334 	.word	0x08003334
 8000a0c:	2000009c 	.word	0x2000009c
 8000a10:	200000e4 	.word	0x200000e4

08000a14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b094      	sub	sp, #80	; 0x50
 8000a18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a1e:	2228      	movs	r2, #40	; 0x28
 8000a20:	2100      	movs	r1, #0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f002 f860 	bl	8002ae8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a44:	2302      	movs	r3, #2
 8000a46:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a4c:	2310      	movs	r3, #16
 8000a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a50:	2300      	movs	r3, #0
 8000a52:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a54:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f001 f8d5 	bl	8001c08 <HAL_RCC_OscConfig>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000a64:	f000 f8a4 	bl	8000bb0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a68:	230f      	movs	r3, #15
 8000a6a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a74:	2300      	movs	r3, #0
 8000a76:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	2100      	movs	r1, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f001 fb40 	bl	8002108 <HAL_RCC_ClockConfig>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000a8e:	f000 f88f 	bl	8000bb0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a92:	2302      	movs	r3, #2
 8000a94:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f001 fccf 	bl	8002440 <HAL_RCCEx_PeriphCLKConfig>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000aa8:	f000 f882 	bl	8000bb0 <Error_Handler>
  }
}
 8000aac:	bf00      	nop
 8000aae:	3750      	adds	r7, #80	; 0x50
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ac4:	4b18      	ldr	r3, [pc, #96]	; (8000b28 <MX_ADC1_Init+0x74>)
 8000ac6:	4a19      	ldr	r2, [pc, #100]	; (8000b2c <MX_ADC1_Init+0x78>)
 8000ac8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000aca:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <MX_ADC1_Init+0x74>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ad0:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <MX_ADC1_Init+0x74>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ad6:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <MX_ADC1_Init+0x74>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000adc:	4b12      	ldr	r3, [pc, #72]	; (8000b28 <MX_ADC1_Init+0x74>)
 8000ade:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000ae2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ae4:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <MX_ADC1_Init+0x74>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000aea:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <MX_ADC1_Init+0x74>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000af0:	480d      	ldr	r0, [pc, #52]	; (8000b28 <MX_ADC1_Init+0x74>)
 8000af2:	f000 fa27 	bl	8000f44 <HAL_ADC_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000afc:	f000 f858 	bl	8000bb0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b04:	2301      	movs	r3, #1
 8000b06:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4805      	ldr	r0, [pc, #20]	; (8000b28 <MX_ADC1_Init+0x74>)
 8000b12:	f000 fcaf 	bl	8001474 <HAL_ADC_ConfigChannel>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000b1c:	f000 f848 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b20:	bf00      	nop
 8000b22:	3710      	adds	r7, #16
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	200000b4 	.word	0x200000b4
 8000b2c:	40012400 	.word	0x40012400

08000b30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <MX_USART2_UART_Init+0x4c>)
 8000b36:	4a12      	ldr	r2, [pc, #72]	; (8000b80 <MX_USART2_UART_Init+0x50>)
 8000b38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <MX_USART2_UART_Init+0x4c>)
 8000b3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	; (8000b7c <MX_USART2_UART_Init+0x4c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	; (8000b7c <MX_USART2_UART_Init+0x4c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <MX_USART2_UART_Init+0x4c>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b54:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <MX_USART2_UART_Init+0x4c>)
 8000b56:	220c      	movs	r2, #12
 8000b58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5a:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <MX_USART2_UART_Init+0x4c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b60:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <MX_USART2_UART_Init+0x4c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b66:	4805      	ldr	r0, [pc, #20]	; (8000b7c <MX_USART2_UART_Init+0x4c>)
 8000b68:	f001 fddc 	bl	8002724 <HAL_UART_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b72:	f000 f81d 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	200000e4 	.word	0x200000e4
 8000b80:	40004400 	.word	0x40004400

08000b84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <MX_GPIO_Init+0x28>)
 8000b8c:	699b      	ldr	r3, [r3, #24]
 8000b8e:	4a07      	ldr	r2, [pc, #28]	; (8000bac <MX_GPIO_Init+0x28>)
 8000b90:	f043 0304 	orr.w	r3, r3, #4
 8000b94:	6193      	str	r3, [r2, #24]
 8000b96:	4b05      	ldr	r3, [pc, #20]	; (8000bac <MX_GPIO_Init+0x28>)
 8000b98:	699b      	ldr	r3, [r3, #24]
 8000b9a:	f003 0304 	and.w	r3, r3, #4
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]

}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr
 8000bac:	40021000 	.word	0x40021000

08000bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb6:	e7fe      	b.n	8000bb6 <Error_Handler+0x6>

08000bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <HAL_MspInit+0x5c>)
 8000bc0:	699b      	ldr	r3, [r3, #24]
 8000bc2:	4a14      	ldr	r2, [pc, #80]	; (8000c14 <HAL_MspInit+0x5c>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6193      	str	r3, [r2, #24]
 8000bca:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <HAL_MspInit+0x5c>)
 8000bcc:	699b      	ldr	r3, [r3, #24]
 8000bce:	f003 0301 	and.w	r3, r3, #1
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <HAL_MspInit+0x5c>)
 8000bd8:	69db      	ldr	r3, [r3, #28]
 8000bda:	4a0e      	ldr	r2, [pc, #56]	; (8000c14 <HAL_MspInit+0x5c>)
 8000bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be0:	61d3      	str	r3, [r2, #28]
 8000be2:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <HAL_MspInit+0x5c>)
 8000be4:	69db      	ldr	r3, [r3, #28]
 8000be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bea:	607b      	str	r3, [r7, #4]
 8000bec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000bee:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <HAL_MspInit+0x60>)
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	60fb      	str	r3, [r7, #12]
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <HAL_MspInit+0x60>)
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	3714      	adds	r7, #20
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr
 8000c14:	40021000 	.word	0x40021000
 8000c18:	40010000 	.word	0x40010000

08000c1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b088      	sub	sp, #32
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 0310 	add.w	r3, r7, #16
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	4a14      	ldr	r2, [pc, #80]	; (8000c88 <HAL_ADC_MspInit+0x6c>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d121      	bne.n	8000c80 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c3c:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <HAL_ADC_MspInit+0x70>)
 8000c3e:	699b      	ldr	r3, [r3, #24]
 8000c40:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <HAL_ADC_MspInit+0x70>)
 8000c42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c46:	6193      	str	r3, [r2, #24]
 8000c48:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <HAL_ADC_MspInit+0x70>)
 8000c4a:	699b      	ldr	r3, [r3, #24]
 8000c4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c54:	4b0d      	ldr	r3, [pc, #52]	; (8000c8c <HAL_ADC_MspInit+0x70>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	4a0c      	ldr	r2, [pc, #48]	; (8000c8c <HAL_ADC_MspInit+0x70>)
 8000c5a:	f043 0304 	orr.w	r3, r3, #4
 8000c5e:	6193      	str	r3, [r2, #24]
 8000c60:	4b0a      	ldr	r3, [pc, #40]	; (8000c8c <HAL_ADC_MspInit+0x70>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	f003 0304 	and.w	r3, r3, #4
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c70:	2303      	movs	r3, #3
 8000c72:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c74:	f107 0310 	add.w	r3, r7, #16
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4805      	ldr	r0, [pc, #20]	; (8000c90 <HAL_ADC_MspInit+0x74>)
 8000c7c:	f000 fe72 	bl	8001964 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c80:	bf00      	nop
 8000c82:	3720      	adds	r7, #32
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40012400 	.word	0x40012400
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	40010800 	.word	0x40010800

08000c94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b088      	sub	sp, #32
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 0310 	add.w	r3, r7, #16
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a1b      	ldr	r2, [pc, #108]	; (8000d1c <HAL_UART_MspInit+0x88>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d12f      	bne.n	8000d14 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cb4:	4b1a      	ldr	r3, [pc, #104]	; (8000d20 <HAL_UART_MspInit+0x8c>)
 8000cb6:	69db      	ldr	r3, [r3, #28]
 8000cb8:	4a19      	ldr	r2, [pc, #100]	; (8000d20 <HAL_UART_MspInit+0x8c>)
 8000cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cbe:	61d3      	str	r3, [r2, #28]
 8000cc0:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <HAL_UART_MspInit+0x8c>)
 8000cc2:	69db      	ldr	r3, [r3, #28]
 8000cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ccc:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <HAL_UART_MspInit+0x8c>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	4a13      	ldr	r2, [pc, #76]	; (8000d20 <HAL_UART_MspInit+0x8c>)
 8000cd2:	f043 0304 	orr.w	r3, r3, #4
 8000cd6:	6193      	str	r3, [r2, #24]
 8000cd8:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <HAL_UART_MspInit+0x8c>)
 8000cda:	699b      	ldr	r3, [r3, #24]
 8000cdc:	f003 0304 	and.w	r3, r3, #4
 8000ce0:	60bb      	str	r3, [r7, #8]
 8000ce2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ce4:	2304      	movs	r3, #4
 8000ce6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cec:	2303      	movs	r3, #3
 8000cee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf0:	f107 0310 	add.w	r3, r7, #16
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	480b      	ldr	r0, [pc, #44]	; (8000d24 <HAL_UART_MspInit+0x90>)
 8000cf8:	f000 fe34 	bl	8001964 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cfc:	2308      	movs	r3, #8
 8000cfe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d08:	f107 0310 	add.w	r3, r7, #16
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4805      	ldr	r0, [pc, #20]	; (8000d24 <HAL_UART_MspInit+0x90>)
 8000d10:	f000 fe28 	bl	8001964 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d14:	bf00      	nop
 8000d16:	3720      	adds	r7, #32
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40004400 	.word	0x40004400
 8000d20:	40021000 	.word	0x40021000
 8000d24:	40010800 	.word	0x40010800

08000d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <NMI_Handler+0x4>

08000d2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d32:	e7fe      	b.n	8000d32 <HardFault_Handler+0x4>

08000d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <MemManage_Handler+0x4>

08000d3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <BusFault_Handler+0x4>

08000d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d44:	e7fe      	b.n	8000d44 <UsageFault_Handler+0x4>

08000d46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d46:	b480      	push	{r7}
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bc80      	pop	{r7}
 8000d50:	4770      	bx	lr

08000d52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bc80      	pop	{r7}
 8000d5c:	4770      	bx	lr

08000d5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bc80      	pop	{r7}
 8000d68:	4770      	bx	lr

08000d6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d6e:	f000 f8ab 	bl	8000ec8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d80:	4a14      	ldr	r2, [pc, #80]	; (8000dd4 <_sbrk+0x5c>)
 8000d82:	4b15      	ldr	r3, [pc, #84]	; (8000dd8 <_sbrk+0x60>)
 8000d84:	1ad3      	subs	r3, r2, r3
 8000d86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d8c:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <_sbrk+0x64>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d102      	bne.n	8000d9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d94:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <_sbrk+0x64>)
 8000d96:	4a12      	ldr	r2, [pc, #72]	; (8000de0 <_sbrk+0x68>)
 8000d98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d9a:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <_sbrk+0x64>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4413      	add	r3, r2
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d207      	bcs.n	8000db8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da8:	f001 fe74 	bl	8002a94 <__errno>
 8000dac:	4602      	mov	r2, r0
 8000dae:	230c      	movs	r3, #12
 8000db0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000db2:	f04f 33ff 	mov.w	r3, #4294967295
 8000db6:	e009      	b.n	8000dcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <_sbrk+0x64>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dbe:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <_sbrk+0x64>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	4a05      	ldr	r2, [pc, #20]	; (8000ddc <_sbrk+0x64>)
 8000dc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dca:	68fb      	ldr	r3, [r7, #12]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3718      	adds	r7, #24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20002800 	.word	0x20002800
 8000dd8:	00000400 	.word	0x00000400
 8000ddc:	20000090 	.word	0x20000090
 8000de0:	20000130 	.word	0x20000130

08000de4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr

08000df0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000df0:	480c      	ldr	r0, [pc, #48]	; (8000e24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000df2:	490d      	ldr	r1, [pc, #52]	; (8000e28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000df4:	4a0d      	ldr	r2, [pc, #52]	; (8000e2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df8:	e002      	b.n	8000e00 <LoopCopyDataInit>

08000dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfe:	3304      	adds	r3, #4

08000e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e04:	d3f9      	bcc.n	8000dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e06:	4a0a      	ldr	r2, [pc, #40]	; (8000e30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e08:	4c0a      	ldr	r4, [pc, #40]	; (8000e34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e0c:	e001      	b.n	8000e12 <LoopFillZerobss>

08000e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e10:	3204      	adds	r2, #4

08000e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e14:	d3fb      	bcc.n	8000e0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e16:	f7ff ffe5 	bl	8000de4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e1a:	f001 fe41 	bl	8002aa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e1e:	f7ff fd8f 	bl	8000940 <main>
  bx lr
 8000e22:	4770      	bx	lr
  ldr r0, =_sdata
 8000e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e28:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000e2c:	080033c4 	.word	0x080033c4
  ldr r2, =_sbss
 8000e30:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000e34:	20000130 	.word	0x20000130

08000e38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e38:	e7fe      	b.n	8000e38 <ADC1_2_IRQHandler>
	...

08000e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <HAL_Init+0x28>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a07      	ldr	r2, [pc, #28]	; (8000e64 <HAL_Init+0x28>)
 8000e46:	f043 0310 	orr.w	r3, r3, #16
 8000e4a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e4c:	2003      	movs	r0, #3
 8000e4e:	f000 fd55 	bl	80018fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e52:	2000      	movs	r0, #0
 8000e54:	f000 f808 	bl	8000e68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e58:	f7ff feae 	bl	8000bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40022000 	.word	0x40022000

08000e68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e70:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <HAL_InitTick+0x54>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <HAL_InitTick+0x58>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e86:	4618      	mov	r0, r3
 8000e88:	f000 fd5f 	bl	800194a <HAL_SYSTICK_Config>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
 8000e94:	e00e      	b.n	8000eb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2b0f      	cmp	r3, #15
 8000e9a:	d80a      	bhi.n	8000eb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	6879      	ldr	r1, [r7, #4]
 8000ea0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea4:	f000 fd35 	bl	8001912 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea8:	4a06      	ldr	r2, [pc, #24]	; (8000ec4 <HAL_InitTick+0x5c>)
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	e000      	b.n	8000eb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	20000000 	.word	0x20000000
 8000ec0:	20000008 	.word	0x20000008
 8000ec4:	20000004 	.word	0x20000004

08000ec8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ecc:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <HAL_IncTick+0x1c>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <HAL_IncTick+0x20>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	4a03      	ldr	r2, [pc, #12]	; (8000ee8 <HAL_IncTick+0x20>)
 8000eda:	6013      	str	r3, [r2, #0]
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	20000128 	.word	0x20000128

08000eec <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef0:	4b02      	ldr	r3, [pc, #8]	; (8000efc <HAL_GetTick+0x10>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bc80      	pop	{r7}
 8000efa:	4770      	bx	lr
 8000efc:	20000128 	.word	0x20000128

08000f00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f08:	f7ff fff0 	bl	8000eec <HAL_GetTick>
 8000f0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f18:	d005      	beq.n	8000f26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f1a:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <HAL_Delay+0x40>)
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	4413      	add	r3, r2
 8000f24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f26:	bf00      	nop
 8000f28:	f7ff ffe0 	bl	8000eec <HAL_GetTick>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d8f7      	bhi.n	8000f28 <HAL_Delay+0x28>
  {
  }
}
 8000f38:	bf00      	nop
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000008 	.word	0x20000008

08000f44 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000f50:	2300      	movs	r3, #0
 8000f52:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000f54:	2300      	movs	r3, #0
 8000f56:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d101      	bne.n	8000f66 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e0be      	b.n	80010e4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d109      	bne.n	8000f88 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2200      	movs	r2, #0
 8000f78:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff fe4a 	bl	8000c1c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f000 fbc5 	bl	8001718 <ADC_ConversionStop_Disable>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f96:	f003 0310 	and.w	r3, r3, #16
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f040 8099 	bne.w	80010d2 <HAL_ADC_Init+0x18e>
 8000fa0:	7dfb      	ldrb	r3, [r7, #23]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	f040 8095 	bne.w	80010d2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fb0:	f023 0302 	bic.w	r3, r3, #2
 8000fb4:	f043 0202 	orr.w	r2, r3, #2
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000fc4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	7b1b      	ldrb	r3, [r3, #12]
 8000fca:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000fcc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	4313      	orrs	r3, r2
 8000fd2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fdc:	d003      	beq.n	8000fe6 <HAL_ADC_Init+0xa2>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d102      	bne.n	8000fec <HAL_ADC_Init+0xa8>
 8000fe6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fea:	e000      	b.n	8000fee <HAL_ADC_Init+0xaa>
 8000fec:	2300      	movs	r3, #0
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	7d1b      	ldrb	r3, [r3, #20]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d119      	bne.n	8001030 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	7b1b      	ldrb	r3, [r3, #12]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d109      	bne.n	8001018 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	3b01      	subs	r3, #1
 800100a:	035a      	lsls	r2, r3, #13
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	4313      	orrs	r3, r2
 8001010:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	e00b      	b.n	8001030 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101c:	f043 0220 	orr.w	r2, r3, #32
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001028:	f043 0201 	orr.w	r2, r3, #1
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	430a      	orrs	r2, r1
 8001042:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	689a      	ldr	r2, [r3, #8]
 800104a:	4b28      	ldr	r3, [pc, #160]	; (80010ec <HAL_ADC_Init+0x1a8>)
 800104c:	4013      	ands	r3, r2
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	6812      	ldr	r2, [r2, #0]
 8001052:	68b9      	ldr	r1, [r7, #8]
 8001054:	430b      	orrs	r3, r1
 8001056:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001060:	d003      	beq.n	800106a <HAL_ADC_Init+0x126>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d104      	bne.n	8001074 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	691b      	ldr	r3, [r3, #16]
 800106e:	3b01      	subs	r3, #1
 8001070:	051b      	lsls	r3, r3, #20
 8001072:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	430a      	orrs	r2, r1
 8001086:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	689a      	ldr	r2, [r3, #8]
 800108e:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <HAL_ADC_Init+0x1ac>)
 8001090:	4013      	ands	r3, r2
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	429a      	cmp	r2, r3
 8001096:	d10b      	bne.n	80010b0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010a2:	f023 0303 	bic.w	r3, r3, #3
 80010a6:	f043 0201 	orr.w	r2, r3, #1
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80010ae:	e018      	b.n	80010e2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b4:	f023 0312 	bic.w	r3, r3, #18
 80010b8:	f043 0210 	orr.w	r2, r3, #16
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010c4:	f043 0201 	orr.w	r2, r3, #1
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80010d0:	e007      	b.n	80010e2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010d6:	f043 0210 	orr.w	r2, r3, #16
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80010e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	ffe1f7fd 	.word	0xffe1f7fd
 80010f0:	ff1f0efe 	.word	0xff1f0efe

080010f4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010fc:	2300      	movs	r3, #0
 80010fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001106:	2b01      	cmp	r3, #1
 8001108:	d101      	bne.n	800110e <HAL_ADC_Start+0x1a>
 800110a:	2302      	movs	r3, #2
 800110c:	e098      	b.n	8001240 <HAL_ADC_Start+0x14c>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2201      	movs	r2, #1
 8001112:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f000 faa4 	bl	8001664 <ADC_Enable>
 800111c:	4603      	mov	r3, r0
 800111e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001120:	7bfb      	ldrb	r3, [r7, #15]
 8001122:	2b00      	cmp	r3, #0
 8001124:	f040 8087 	bne.w	8001236 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800112c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001130:	f023 0301 	bic.w	r3, r3, #1
 8001134:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a41      	ldr	r2, [pc, #260]	; (8001248 <HAL_ADC_Start+0x154>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d105      	bne.n	8001152 <HAL_ADC_Start+0x5e>
 8001146:	4b41      	ldr	r3, [pc, #260]	; (800124c <HAL_ADC_Start+0x158>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d115      	bne.n	800117e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001156:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001168:	2b00      	cmp	r3, #0
 800116a:	d026      	beq.n	80011ba <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001170:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001174:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800117c:	e01d      	b.n	80011ba <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001182:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4a2f      	ldr	r2, [pc, #188]	; (800124c <HAL_ADC_Start+0x158>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d004      	beq.n	800119e <HAL_ADC_Start+0xaa>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a2b      	ldr	r2, [pc, #172]	; (8001248 <HAL_ADC_Start+0x154>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d10d      	bne.n	80011ba <HAL_ADC_Start+0xc6>
 800119e:	4b2b      	ldr	r3, [pc, #172]	; (800124c <HAL_ADC_Start+0x158>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d007      	beq.n	80011ba <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d006      	beq.n	80011d4 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ca:	f023 0206 	bic.w	r2, r3, #6
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80011d2:	e002      	b.n	80011da <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2200      	movs	r2, #0
 80011d8:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2200      	movs	r2, #0
 80011de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f06f 0202 	mvn.w	r2, #2
 80011ea:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80011f6:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80011fa:	d113      	bne.n	8001224 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001200:	4a11      	ldr	r2, [pc, #68]	; (8001248 <HAL_ADC_Start+0x154>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d105      	bne.n	8001212 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001206:	4b11      	ldr	r3, [pc, #68]	; (800124c <HAL_ADC_Start+0x158>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800120e:	2b00      	cmp	r3, #0
 8001210:	d108      	bne.n	8001224 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	e00c      	b.n	800123e <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	689a      	ldr	r2, [r3, #8]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	e003      	b.n	800123e <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800123e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40012800 	.word	0x40012800
 800124c:	40012400 	.word	0x40012400

08001250 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001250:	b590      	push	{r4, r7, lr}
 8001252:	b087      	sub	sp, #28
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001266:	f7ff fe41 	bl	8000eec <HAL_GetTick>
 800126a:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001276:	2b00      	cmp	r3, #0
 8001278:	d00b      	beq.n	8001292 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127e:	f043 0220 	orr.w	r2, r3, #32
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e0d3      	b.n	800143a <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800129c:	2b00      	cmp	r3, #0
 800129e:	d131      	bne.n	8001304 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012a6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d12a      	bne.n	8001304 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80012ae:	e021      	b.n	80012f4 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b6:	d01d      	beq.n	80012f4 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d007      	beq.n	80012ce <HAL_ADC_PollForConversion+0x7e>
 80012be:	f7ff fe15 	bl	8000eec <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	683a      	ldr	r2, [r7, #0]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d212      	bcs.n	80012f4 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d10b      	bne.n	80012f4 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e0:	f043 0204 	orr.w	r2, r3, #4
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 80012f0:	2303      	movs	r3, #3
 80012f2:	e0a2      	b.n	800143a <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d0d6      	beq.n	80012b0 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001302:	e070      	b.n	80013e6 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001304:	4b4f      	ldr	r3, [pc, #316]	; (8001444 <HAL_ADC_PollForConversion+0x1f4>)
 8001306:	681c      	ldr	r4, [r3, #0]
 8001308:	2002      	movs	r0, #2
 800130a:	f001 f94f 	bl	80025ac <HAL_RCCEx_GetPeriphCLKFreq>
 800130e:	4603      	mov	r3, r0
 8001310:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	6919      	ldr	r1, [r3, #16]
 800131a:	4b4b      	ldr	r3, [pc, #300]	; (8001448 <HAL_ADC_PollForConversion+0x1f8>)
 800131c:	400b      	ands	r3, r1
 800131e:	2b00      	cmp	r3, #0
 8001320:	d118      	bne.n	8001354 <HAL_ADC_PollForConversion+0x104>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	68d9      	ldr	r1, [r3, #12]
 8001328:	4b48      	ldr	r3, [pc, #288]	; (800144c <HAL_ADC_PollForConversion+0x1fc>)
 800132a:	400b      	ands	r3, r1
 800132c:	2b00      	cmp	r3, #0
 800132e:	d111      	bne.n	8001354 <HAL_ADC_PollForConversion+0x104>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6919      	ldr	r1, [r3, #16]
 8001336:	4b46      	ldr	r3, [pc, #280]	; (8001450 <HAL_ADC_PollForConversion+0x200>)
 8001338:	400b      	ands	r3, r1
 800133a:	2b00      	cmp	r3, #0
 800133c:	d108      	bne.n	8001350 <HAL_ADC_PollForConversion+0x100>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	68d9      	ldr	r1, [r3, #12]
 8001344:	4b43      	ldr	r3, [pc, #268]	; (8001454 <HAL_ADC_PollForConversion+0x204>)
 8001346:	400b      	ands	r3, r1
 8001348:	2b00      	cmp	r3, #0
 800134a:	d101      	bne.n	8001350 <HAL_ADC_PollForConversion+0x100>
 800134c:	2314      	movs	r3, #20
 800134e:	e020      	b.n	8001392 <HAL_ADC_PollForConversion+0x142>
 8001350:	2329      	movs	r3, #41	; 0x29
 8001352:	e01e      	b.n	8001392 <HAL_ADC_PollForConversion+0x142>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	6919      	ldr	r1, [r3, #16]
 800135a:	4b3d      	ldr	r3, [pc, #244]	; (8001450 <HAL_ADC_PollForConversion+0x200>)
 800135c:	400b      	ands	r3, r1
 800135e:	2b00      	cmp	r3, #0
 8001360:	d106      	bne.n	8001370 <HAL_ADC_PollForConversion+0x120>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	68d9      	ldr	r1, [r3, #12]
 8001368:	4b3a      	ldr	r3, [pc, #232]	; (8001454 <HAL_ADC_PollForConversion+0x204>)
 800136a:	400b      	ands	r3, r1
 800136c:	2b00      	cmp	r3, #0
 800136e:	d00d      	beq.n	800138c <HAL_ADC_PollForConversion+0x13c>
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	6919      	ldr	r1, [r3, #16]
 8001376:	4b38      	ldr	r3, [pc, #224]	; (8001458 <HAL_ADC_PollForConversion+0x208>)
 8001378:	400b      	ands	r3, r1
 800137a:	2b00      	cmp	r3, #0
 800137c:	d108      	bne.n	8001390 <HAL_ADC_PollForConversion+0x140>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	68d9      	ldr	r1, [r3, #12]
 8001384:	4b34      	ldr	r3, [pc, #208]	; (8001458 <HAL_ADC_PollForConversion+0x208>)
 8001386:	400b      	ands	r3, r1
 8001388:	2b00      	cmp	r3, #0
 800138a:	d101      	bne.n	8001390 <HAL_ADC_PollForConversion+0x140>
 800138c:	2354      	movs	r3, #84	; 0x54
 800138e:	e000      	b.n	8001392 <HAL_ADC_PollForConversion+0x142>
 8001390:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001392:	fb02 f303 	mul.w	r3, r2, r3
 8001396:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001398:	e021      	b.n	80013de <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a0:	d01a      	beq.n	80013d8 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d007      	beq.n	80013b8 <HAL_ADC_PollForConversion+0x168>
 80013a8:	f7ff fda0 	bl	8000eec <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d20f      	bcs.n	80013d8 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d90b      	bls.n	80013d8 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c4:	f043 0204 	orr.w	r2, r3, #4
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e030      	b.n	800143a <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	3301      	adds	r3, #1
 80013dc:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d8d9      	bhi.n	800139a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f06f 0212 	mvn.w	r2, #18
 80013ee:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001406:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800140a:	d115      	bne.n	8001438 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001410:	2b00      	cmp	r3, #0
 8001412:	d111      	bne.n	8001438 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001418:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001424:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d105      	bne.n	8001438 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001430:	f043 0201 	orr.w	r2, r3, #1
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	371c      	adds	r7, #28
 800143e:	46bd      	mov	sp, r7
 8001440:	bd90      	pop	{r4, r7, pc}
 8001442:	bf00      	nop
 8001444:	20000000 	.word	0x20000000
 8001448:	24924924 	.word	0x24924924
 800144c:	00924924 	.word	0x00924924
 8001450:	12492492 	.word	0x12492492
 8001454:	00492492 	.word	0x00492492
 8001458:	00249249 	.word	0x00249249

0800145c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800146a:	4618      	mov	r0, r3
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr

08001474 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800147e:	2300      	movs	r3, #0
 8001480:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001482:	2300      	movs	r3, #0
 8001484:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800148c:	2b01      	cmp	r3, #1
 800148e:	d101      	bne.n	8001494 <HAL_ADC_ConfigChannel+0x20>
 8001490:	2302      	movs	r3, #2
 8001492:	e0dc      	b.n	800164e <HAL_ADC_ConfigChannel+0x1da>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b06      	cmp	r3, #6
 80014a2:	d81c      	bhi.n	80014de <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	4613      	mov	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	3b05      	subs	r3, #5
 80014b6:	221f      	movs	r2, #31
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	4019      	ands	r1, r3
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	6818      	ldr	r0, [r3, #0]
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	4613      	mov	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	3b05      	subs	r3, #5
 80014d0:	fa00 f203 	lsl.w	r2, r0, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	430a      	orrs	r2, r1
 80014da:	635a      	str	r2, [r3, #52]	; 0x34
 80014dc:	e03c      	b.n	8001558 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	2b0c      	cmp	r3, #12
 80014e4:	d81c      	bhi.n	8001520 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	4613      	mov	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	3b23      	subs	r3, #35	; 0x23
 80014f8:	221f      	movs	r2, #31
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43db      	mvns	r3, r3
 8001500:	4019      	ands	r1, r3
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	6818      	ldr	r0, [r3, #0]
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685a      	ldr	r2, [r3, #4]
 800150a:	4613      	mov	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	4413      	add	r3, r2
 8001510:	3b23      	subs	r3, #35	; 0x23
 8001512:	fa00 f203 	lsl.w	r2, r0, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	430a      	orrs	r2, r1
 800151c:	631a      	str	r2, [r3, #48]	; 0x30
 800151e:	e01b      	b.n	8001558 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685a      	ldr	r2, [r3, #4]
 800152a:	4613      	mov	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	3b41      	subs	r3, #65	; 0x41
 8001532:	221f      	movs	r2, #31
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	43db      	mvns	r3, r3
 800153a:	4019      	ands	r1, r3
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	6818      	ldr	r0, [r3, #0]
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	4613      	mov	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	3b41      	subs	r3, #65	; 0x41
 800154c:	fa00 f203 	lsl.w	r2, r0, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	430a      	orrs	r2, r1
 8001556:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	2b09      	cmp	r3, #9
 800155e:	d91c      	bls.n	800159a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	68d9      	ldr	r1, [r3, #12]
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	4613      	mov	r3, r2
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	4413      	add	r3, r2
 8001570:	3b1e      	subs	r3, #30
 8001572:	2207      	movs	r2, #7
 8001574:	fa02 f303 	lsl.w	r3, r2, r3
 8001578:	43db      	mvns	r3, r3
 800157a:	4019      	ands	r1, r3
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	6898      	ldr	r0, [r3, #8]
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4613      	mov	r3, r2
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	4413      	add	r3, r2
 800158a:	3b1e      	subs	r3, #30
 800158c:	fa00 f203 	lsl.w	r2, r0, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	430a      	orrs	r2, r1
 8001596:	60da      	str	r2, [r3, #12]
 8001598:	e019      	b.n	80015ce <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6919      	ldr	r1, [r3, #16]
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4613      	mov	r3, r2
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	4413      	add	r3, r2
 80015aa:	2207      	movs	r2, #7
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	43db      	mvns	r3, r3
 80015b2:	4019      	ands	r1, r3
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	6898      	ldr	r0, [r3, #8]
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4613      	mov	r3, r2
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	4413      	add	r3, r2
 80015c2:	fa00 f203 	lsl.w	r2, r0, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	430a      	orrs	r2, r1
 80015cc:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2b10      	cmp	r3, #16
 80015d4:	d003      	beq.n	80015de <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80015da:	2b11      	cmp	r3, #17
 80015dc:	d132      	bne.n	8001644 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a1d      	ldr	r2, [pc, #116]	; (8001658 <HAL_ADC_ConfigChannel+0x1e4>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d125      	bne.n	8001634 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d126      	bne.n	8001644 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001604:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2b10      	cmp	r3, #16
 800160c:	d11a      	bne.n	8001644 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800160e:	4b13      	ldr	r3, [pc, #76]	; (800165c <HAL_ADC_ConfigChannel+0x1e8>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a13      	ldr	r2, [pc, #76]	; (8001660 <HAL_ADC_ConfigChannel+0x1ec>)
 8001614:	fba2 2303 	umull	r2, r3, r2, r3
 8001618:	0c9a      	lsrs	r2, r3, #18
 800161a:	4613      	mov	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001624:	e002      	b.n	800162c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	3b01      	subs	r3, #1
 800162a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f9      	bne.n	8001626 <HAL_ADC_ConfigChannel+0x1b2>
 8001632:	e007      	b.n	8001644 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001638:	f043 0220 	orr.w	r2, r3, #32
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 800164c:	7bfb      	ldrb	r3, [r7, #15]
}
 800164e:	4618      	mov	r0, r3
 8001650:	3714      	adds	r7, #20
 8001652:	46bd      	mov	sp, r7
 8001654:	bc80      	pop	{r7}
 8001656:	4770      	bx	lr
 8001658:	40012400 	.word	0x40012400
 800165c:	20000000 	.word	0x20000000
 8001660:	431bde83 	.word	0x431bde83

08001664 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800166c:	2300      	movs	r3, #0
 800166e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001670:	2300      	movs	r3, #0
 8001672:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 0301 	and.w	r3, r3, #1
 800167e:	2b01      	cmp	r3, #1
 8001680:	d040      	beq.n	8001704 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f042 0201 	orr.w	r2, r2, #1
 8001690:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001692:	4b1f      	ldr	r3, [pc, #124]	; (8001710 <ADC_Enable+0xac>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a1f      	ldr	r2, [pc, #124]	; (8001714 <ADC_Enable+0xb0>)
 8001698:	fba2 2303 	umull	r2, r3, r2, r3
 800169c:	0c9b      	lsrs	r3, r3, #18
 800169e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80016a0:	e002      	b.n	80016a8 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	3b01      	subs	r3, #1
 80016a6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f9      	bne.n	80016a2 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80016ae:	f7ff fc1d 	bl	8000eec <HAL_GetTick>
 80016b2:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80016b4:	e01f      	b.n	80016f6 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80016b6:	f7ff fc19 	bl	8000eec <HAL_GetTick>
 80016ba:	4602      	mov	r2, r0
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	1ad3      	subs	r3, r2, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d918      	bls.n	80016f6 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d011      	beq.n	80016f6 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d6:	f043 0210 	orr.w	r2, r3, #16
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e2:	f043 0201 	orr.w	r2, r3, #1
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e007      	b.n	8001706 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	2b01      	cmp	r3, #1
 8001702:	d1d8      	bne.n	80016b6 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000000 	.word	0x20000000
 8001714:	431bde83 	.word	0x431bde83

08001718 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001720:	2300      	movs	r3, #0
 8001722:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b01      	cmp	r3, #1
 8001730:	d12e      	bne.n	8001790 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 0201 	bic.w	r2, r2, #1
 8001740:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001742:	f7ff fbd3 	bl	8000eec <HAL_GetTick>
 8001746:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001748:	e01b      	b.n	8001782 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800174a:	f7ff fbcf 	bl	8000eec <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d914      	bls.n	8001782 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b01      	cmp	r3, #1
 8001764:	d10d      	bne.n	8001782 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176a:	f043 0210 	orr.w	r2, r3, #16
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001776:	f043 0201 	orr.w	r2, r3, #1
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e007      	b.n	8001792 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	2b01      	cmp	r3, #1
 800178e:	d0dc      	beq.n	800174a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <__NVIC_SetPriorityGrouping+0x44>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017b2:	68ba      	ldr	r2, [r7, #8]
 80017b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017b8:	4013      	ands	r3, r2
 80017ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ce:	4a04      	ldr	r2, [pc, #16]	; (80017e0 <__NVIC_SetPriorityGrouping+0x44>)
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	60d3      	str	r3, [r2, #12]
}
 80017d4:	bf00      	nop
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e8:	4b04      	ldr	r3, [pc, #16]	; (80017fc <__NVIC_GetPriorityGrouping+0x18>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	0a1b      	lsrs	r3, r3, #8
 80017ee:	f003 0307 	and.w	r3, r3, #7
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bc80      	pop	{r7}
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	6039      	str	r1, [r7, #0]
 800180a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001810:	2b00      	cmp	r3, #0
 8001812:	db0a      	blt.n	800182a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	b2da      	uxtb	r2, r3
 8001818:	490c      	ldr	r1, [pc, #48]	; (800184c <__NVIC_SetPriority+0x4c>)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	0112      	lsls	r2, r2, #4
 8001820:	b2d2      	uxtb	r2, r2
 8001822:	440b      	add	r3, r1
 8001824:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001828:	e00a      	b.n	8001840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	b2da      	uxtb	r2, r3
 800182e:	4908      	ldr	r1, [pc, #32]	; (8001850 <__NVIC_SetPriority+0x50>)
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	f003 030f 	and.w	r3, r3, #15
 8001836:	3b04      	subs	r3, #4
 8001838:	0112      	lsls	r2, r2, #4
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	440b      	add	r3, r1
 800183e:	761a      	strb	r2, [r3, #24]
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	e000e100 	.word	0xe000e100
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001854:	b480      	push	{r7}
 8001856:	b089      	sub	sp, #36	; 0x24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f1c3 0307 	rsb	r3, r3, #7
 800186e:	2b04      	cmp	r3, #4
 8001870:	bf28      	it	cs
 8001872:	2304      	movcs	r3, #4
 8001874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3304      	adds	r3, #4
 800187a:	2b06      	cmp	r3, #6
 800187c:	d902      	bls.n	8001884 <NVIC_EncodePriority+0x30>
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3b03      	subs	r3, #3
 8001882:	e000      	b.n	8001886 <NVIC_EncodePriority+0x32>
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001888:	f04f 32ff 	mov.w	r2, #4294967295
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43da      	mvns	r2, r3
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	401a      	ands	r2, r3
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800189c:	f04f 31ff 	mov.w	r1, #4294967295
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	fa01 f303 	lsl.w	r3, r1, r3
 80018a6:	43d9      	mvns	r1, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ac:	4313      	orrs	r3, r2
         );
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3724      	adds	r7, #36	; 0x24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr

080018b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c8:	d301      	bcc.n	80018ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ca:	2301      	movs	r3, #1
 80018cc:	e00f      	b.n	80018ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ce:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <SysTick_Config+0x40>)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018d6:	210f      	movs	r1, #15
 80018d8:	f04f 30ff 	mov.w	r0, #4294967295
 80018dc:	f7ff ff90 	bl	8001800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e0:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <SysTick_Config+0x40>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018e6:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <SysTick_Config+0x40>)
 80018e8:	2207      	movs	r2, #7
 80018ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	e000e010 	.word	0xe000e010

080018fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff ff49 	bl	800179c <__NVIC_SetPriorityGrouping>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001912:	b580      	push	{r7, lr}
 8001914:	b086      	sub	sp, #24
 8001916:	af00      	add	r7, sp, #0
 8001918:	4603      	mov	r3, r0
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	607a      	str	r2, [r7, #4]
 800191e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001924:	f7ff ff5e 	bl	80017e4 <__NVIC_GetPriorityGrouping>
 8001928:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	68b9      	ldr	r1, [r7, #8]
 800192e:	6978      	ldr	r0, [r7, #20]
 8001930:	f7ff ff90 	bl	8001854 <NVIC_EncodePriority>
 8001934:	4602      	mov	r2, r0
 8001936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800193a:	4611      	mov	r1, r2
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff ff5f 	bl	8001800 <__NVIC_SetPriority>
}
 8001942:	bf00      	nop
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff ffb0 	bl	80018b8 <SysTick_Config>
 8001958:	4603      	mov	r3, r0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
	...

08001964 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001964:	b480      	push	{r7}
 8001966:	b08b      	sub	sp, #44	; 0x2c
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800196e:	2300      	movs	r3, #0
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001972:	2300      	movs	r3, #0
 8001974:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001976:	e121      	b.n	8001bbc <HAL_GPIO_Init+0x258>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001978:	2201      	movs	r2, #1
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	69fa      	ldr	r2, [r7, #28]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	429a      	cmp	r2, r3
 8001992:	f040 8110 	bne.w	8001bb6 <HAL_GPIO_Init+0x252>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b12      	cmp	r3, #18
 800199c:	d034      	beq.n	8001a08 <HAL_GPIO_Init+0xa4>
 800199e:	2b12      	cmp	r3, #18
 80019a0:	d80d      	bhi.n	80019be <HAL_GPIO_Init+0x5a>
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d02b      	beq.n	80019fe <HAL_GPIO_Init+0x9a>
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d804      	bhi.n	80019b4 <HAL_GPIO_Init+0x50>
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d031      	beq.n	8001a12 <HAL_GPIO_Init+0xae>
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d01c      	beq.n	80019ec <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80019b2:	e048      	b.n	8001a46 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019b4:	2b03      	cmp	r3, #3
 80019b6:	d043      	beq.n	8001a40 <HAL_GPIO_Init+0xdc>
 80019b8:	2b11      	cmp	r3, #17
 80019ba:	d01b      	beq.n	80019f4 <HAL_GPIO_Init+0x90>
          break;
 80019bc:	e043      	b.n	8001a46 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019be:	4a86      	ldr	r2, [pc, #536]	; (8001bd8 <HAL_GPIO_Init+0x274>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d026      	beq.n	8001a12 <HAL_GPIO_Init+0xae>
 80019c4:	4a84      	ldr	r2, [pc, #528]	; (8001bd8 <HAL_GPIO_Init+0x274>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d806      	bhi.n	80019d8 <HAL_GPIO_Init+0x74>
 80019ca:	4a84      	ldr	r2, [pc, #528]	; (8001bdc <HAL_GPIO_Init+0x278>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d020      	beq.n	8001a12 <HAL_GPIO_Init+0xae>
 80019d0:	4a83      	ldr	r2, [pc, #524]	; (8001be0 <HAL_GPIO_Init+0x27c>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d01d      	beq.n	8001a12 <HAL_GPIO_Init+0xae>
          break;
 80019d6:	e036      	b.n	8001a46 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80019d8:	4a82      	ldr	r2, [pc, #520]	; (8001be4 <HAL_GPIO_Init+0x280>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d019      	beq.n	8001a12 <HAL_GPIO_Init+0xae>
 80019de:	4a82      	ldr	r2, [pc, #520]	; (8001be8 <HAL_GPIO_Init+0x284>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d016      	beq.n	8001a12 <HAL_GPIO_Init+0xae>
 80019e4:	4a81      	ldr	r2, [pc, #516]	; (8001bec <HAL_GPIO_Init+0x288>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d013      	beq.n	8001a12 <HAL_GPIO_Init+0xae>
          break;
 80019ea:	e02c      	b.n	8001a46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	623b      	str	r3, [r7, #32]
          break;
 80019f2:	e028      	b.n	8001a46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	3304      	adds	r3, #4
 80019fa:	623b      	str	r3, [r7, #32]
          break;
 80019fc:	e023      	b.n	8001a46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	3308      	adds	r3, #8
 8001a04:	623b      	str	r3, [r7, #32]
          break;
 8001a06:	e01e      	b.n	8001a46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	330c      	adds	r3, #12
 8001a0e:	623b      	str	r3, [r7, #32]
          break;
 8001a10:	e019      	b.n	8001a46 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d102      	bne.n	8001a20 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a1a:	2304      	movs	r3, #4
 8001a1c:	623b      	str	r3, [r7, #32]
          break;
 8001a1e:	e012      	b.n	8001a46 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d105      	bne.n	8001a34 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a28:	2308      	movs	r3, #8
 8001a2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	69fa      	ldr	r2, [r7, #28]
 8001a30:	611a      	str	r2, [r3, #16]
          break;
 8001a32:	e008      	b.n	8001a46 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a34:	2308      	movs	r3, #8
 8001a36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	69fa      	ldr	r2, [r7, #28]
 8001a3c:	615a      	str	r2, [r3, #20]
          break;
 8001a3e:	e002      	b.n	8001a46 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001a40:	2300      	movs	r3, #0
 8001a42:	623b      	str	r3, [r7, #32]
          break;
 8001a44:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	2bff      	cmp	r3, #255	; 0xff
 8001a4a:	d801      	bhi.n	8001a50 <HAL_GPIO_Init+0xec>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	e001      	b.n	8001a54 <HAL_GPIO_Init+0xf0>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3304      	adds	r3, #4
 8001a54:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	2bff      	cmp	r3, #255	; 0xff
 8001a5a:	d802      	bhi.n	8001a62 <HAL_GPIO_Init+0xfe>
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	e002      	b.n	8001a68 <HAL_GPIO_Init+0x104>
 8001a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a64:	3b08      	subs	r3, #8
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	210f      	movs	r1, #15
 8001a70:	693b      	ldr	r3, [r7, #16]
 8001a72:	fa01 f303 	lsl.w	r3, r1, r3
 8001a76:	43db      	mvns	r3, r3
 8001a78:	401a      	ands	r2, r3
 8001a7a:	6a39      	ldr	r1, [r7, #32]
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a82:	431a      	orrs	r2, r3
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f000 8090 	beq.w	8001bb6 <HAL_GPIO_Init+0x252>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a96:	4b56      	ldr	r3, [pc, #344]	; (8001bf0 <HAL_GPIO_Init+0x28c>)
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	4a55      	ldr	r2, [pc, #340]	; (8001bf0 <HAL_GPIO_Init+0x28c>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6193      	str	r3, [r2, #24]
 8001aa2:	4b53      	ldr	r3, [pc, #332]	; (8001bf0 <HAL_GPIO_Init+0x28c>)
 8001aa4:	699b      	ldr	r3, [r3, #24]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	60bb      	str	r3, [r7, #8]
 8001aac:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001aae:	4a51      	ldr	r2, [pc, #324]	; (8001bf4 <HAL_GPIO_Init+0x290>)
 8001ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab2:	089b      	lsrs	r3, r3, #2
 8001ab4:	3302      	adds	r3, #2
 8001ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aba:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	f003 0303 	and.w	r3, r3, #3
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	220f      	movs	r2, #15
 8001ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aca:	43db      	mvns	r3, r3
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a48      	ldr	r2, [pc, #288]	; (8001bf8 <HAL_GPIO_Init+0x294>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d00d      	beq.n	8001af6 <HAL_GPIO_Init+0x192>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a47      	ldr	r2, [pc, #284]	; (8001bfc <HAL_GPIO_Init+0x298>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d007      	beq.n	8001af2 <HAL_GPIO_Init+0x18e>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a46      	ldr	r2, [pc, #280]	; (8001c00 <HAL_GPIO_Init+0x29c>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d101      	bne.n	8001aee <HAL_GPIO_Init+0x18a>
 8001aea:	2302      	movs	r3, #2
 8001aec:	e004      	b.n	8001af8 <HAL_GPIO_Init+0x194>
 8001aee:	2303      	movs	r3, #3
 8001af0:	e002      	b.n	8001af8 <HAL_GPIO_Init+0x194>
 8001af2:	2301      	movs	r3, #1
 8001af4:	e000      	b.n	8001af8 <HAL_GPIO_Init+0x194>
 8001af6:	2300      	movs	r3, #0
 8001af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001afa:	f002 0203 	and.w	r2, r2, #3
 8001afe:	0092      	lsls	r2, r2, #2
 8001b00:	4093      	lsls	r3, r2
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b08:	493a      	ldr	r1, [pc, #232]	; (8001bf4 <HAL_GPIO_Init+0x290>)
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	089b      	lsrs	r3, r3, #2
 8001b0e:	3302      	adds	r3, #2
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d006      	beq.n	8001b30 <HAL_GPIO_Init+0x1cc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b22:	4b38      	ldr	r3, [pc, #224]	; (8001c04 <HAL_GPIO_Init+0x2a0>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	4937      	ldr	r1, [pc, #220]	; (8001c04 <HAL_GPIO_Init+0x2a0>)
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	600b      	str	r3, [r1, #0]
 8001b2e:	e006      	b.n	8001b3e <HAL_GPIO_Init+0x1da>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b30:	4b34      	ldr	r3, [pc, #208]	; (8001c04 <HAL_GPIO_Init+0x2a0>)
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	43db      	mvns	r3, r3
 8001b38:	4932      	ldr	r1, [pc, #200]	; (8001c04 <HAL_GPIO_Init+0x2a0>)
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d006      	beq.n	8001b58 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b4a:	4b2e      	ldr	r3, [pc, #184]	; (8001c04 <HAL_GPIO_Init+0x2a0>)
 8001b4c:	685a      	ldr	r2, [r3, #4]
 8001b4e:	492d      	ldr	r1, [pc, #180]	; (8001c04 <HAL_GPIO_Init+0x2a0>)
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	4313      	orrs	r3, r2
 8001b54:	604b      	str	r3, [r1, #4]
 8001b56:	e006      	b.n	8001b66 <HAL_GPIO_Init+0x202>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b58:	4b2a      	ldr	r3, [pc, #168]	; (8001c04 <HAL_GPIO_Init+0x2a0>)
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	43db      	mvns	r3, r3
 8001b60:	4928      	ldr	r1, [pc, #160]	; (8001c04 <HAL_GPIO_Init+0x2a0>)
 8001b62:	4013      	ands	r3, r2
 8001b64:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d006      	beq.n	8001b80 <HAL_GPIO_Init+0x21c>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b72:	4b24      	ldr	r3, [pc, #144]	; (8001c04 <HAL_GPIO_Init+0x2a0>)
 8001b74:	689a      	ldr	r2, [r3, #8]
 8001b76:	4923      	ldr	r1, [pc, #140]	; (8001c04 <HAL_GPIO_Init+0x2a0>)
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	608b      	str	r3, [r1, #8]
 8001b7e:	e006      	b.n	8001b8e <HAL_GPIO_Init+0x22a>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b80:	4b20      	ldr	r3, [pc, #128]	; (8001c04 <HAL_GPIO_Init+0x2a0>)
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	43db      	mvns	r3, r3
 8001b88:	491e      	ldr	r1, [pc, #120]	; (8001c04 <HAL_GPIO_Init+0x2a0>)
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d006      	beq.n	8001ba8 <HAL_GPIO_Init+0x244>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001b9a:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <HAL_GPIO_Init+0x2a0>)
 8001b9c:	68da      	ldr	r2, [r3, #12]
 8001b9e:	4919      	ldr	r1, [pc, #100]	; (8001c04 <HAL_GPIO_Init+0x2a0>)
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	60cb      	str	r3, [r1, #12]
 8001ba6:	e006      	b.n	8001bb6 <HAL_GPIO_Init+0x252>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ba8:	4b16      	ldr	r3, [pc, #88]	; (8001c04 <HAL_GPIO_Init+0x2a0>)
 8001baa:	68da      	ldr	r2, [r3, #12]
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	4914      	ldr	r1, [pc, #80]	; (8001c04 <HAL_GPIO_Init+0x2a0>)
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb8:	3301      	adds	r3, #1
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f47f aed6 	bne.w	8001978 <HAL_GPIO_Init+0x14>
  }
}
 8001bcc:	bf00      	nop
 8001bce:	372c      	adds	r7, #44	; 0x2c
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bc80      	pop	{r7}
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	10210000 	.word	0x10210000
 8001bdc:	10110000 	.word	0x10110000
 8001be0:	10120000 	.word	0x10120000
 8001be4:	10310000 	.word	0x10310000
 8001be8:	10320000 	.word	0x10320000
 8001bec:	10220000 	.word	0x10220000
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	40010000 	.word	0x40010000
 8001bf8:	40010800 	.word	0x40010800
 8001bfc:	40010c00 	.word	0x40010c00
 8001c00:	40011000 	.word	0x40011000
 8001c04:	40010400 	.word	0x40010400

08001c08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d101      	bne.n	8001c1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e26c      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 8087 	beq.w	8001d36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c28:	4b92      	ldr	r3, [pc, #584]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 030c 	and.w	r3, r3, #12
 8001c30:	2b04      	cmp	r3, #4
 8001c32:	d00c      	beq.n	8001c4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c34:	4b8f      	ldr	r3, [pc, #572]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 030c 	and.w	r3, r3, #12
 8001c3c:	2b08      	cmp	r3, #8
 8001c3e:	d112      	bne.n	8001c66 <HAL_RCC_OscConfig+0x5e>
 8001c40:	4b8c      	ldr	r3, [pc, #560]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c4c:	d10b      	bne.n	8001c66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c4e:	4b89      	ldr	r3, [pc, #548]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d06c      	beq.n	8001d34 <HAL_RCC_OscConfig+0x12c>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d168      	bne.n	8001d34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e246      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c6e:	d106      	bne.n	8001c7e <HAL_RCC_OscConfig+0x76>
 8001c70:	4b80      	ldr	r3, [pc, #512]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a7f      	ldr	r2, [pc, #508]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c7a:	6013      	str	r3, [r2, #0]
 8001c7c:	e02e      	b.n	8001cdc <HAL_RCC_OscConfig+0xd4>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10c      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x98>
 8001c86:	4b7b      	ldr	r3, [pc, #492]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a7a      	ldr	r2, [pc, #488]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c90:	6013      	str	r3, [r2, #0]
 8001c92:	4b78      	ldr	r3, [pc, #480]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a77      	ldr	r2, [pc, #476]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c9c:	6013      	str	r3, [r2, #0]
 8001c9e:	e01d      	b.n	8001cdc <HAL_RCC_OscConfig+0xd4>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ca8:	d10c      	bne.n	8001cc4 <HAL_RCC_OscConfig+0xbc>
 8001caa:	4b72      	ldr	r3, [pc, #456]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a71      	ldr	r2, [pc, #452]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cb4:	6013      	str	r3, [r2, #0]
 8001cb6:	4b6f      	ldr	r3, [pc, #444]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a6e      	ldr	r2, [pc, #440]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc0:	6013      	str	r3, [r2, #0]
 8001cc2:	e00b      	b.n	8001cdc <HAL_RCC_OscConfig+0xd4>
 8001cc4:	4b6b      	ldr	r3, [pc, #428]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a6a      	ldr	r2, [pc, #424]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cce:	6013      	str	r3, [r2, #0]
 8001cd0:	4b68      	ldr	r3, [pc, #416]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a67      	ldr	r2, [pc, #412]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001cd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d013      	beq.n	8001d0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce4:	f7ff f902 	bl	8000eec <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cec:	f7ff f8fe 	bl	8000eec <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b64      	cmp	r3, #100	; 0x64
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e1fa      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfe:	4b5d      	ldr	r3, [pc, #372]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0xe4>
 8001d0a:	e014      	b.n	8001d36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0c:	f7ff f8ee 	bl	8000eec <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d14:	f7ff f8ea 	bl	8000eec <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b64      	cmp	r3, #100	; 0x64
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e1e6      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d26:	4b53      	ldr	r3, [pc, #332]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f0      	bne.n	8001d14 <HAL_RCC_OscConfig+0x10c>
 8001d32:	e000      	b.n	8001d36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d063      	beq.n	8001e0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d42:	4b4c      	ldr	r3, [pc, #304]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f003 030c 	and.w	r3, r3, #12
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d00b      	beq.n	8001d66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d4e:	4b49      	ldr	r3, [pc, #292]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f003 030c 	and.w	r3, r3, #12
 8001d56:	2b08      	cmp	r3, #8
 8001d58:	d11c      	bne.n	8001d94 <HAL_RCC_OscConfig+0x18c>
 8001d5a:	4b46      	ldr	r3, [pc, #280]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d116      	bne.n	8001d94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d66:	4b43      	ldr	r3, [pc, #268]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d005      	beq.n	8001d7e <HAL_RCC_OscConfig+0x176>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d001      	beq.n	8001d7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e1ba      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7e:	4b3d      	ldr	r3, [pc, #244]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	00db      	lsls	r3, r3, #3
 8001d8c:	4939      	ldr	r1, [pc, #228]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d92:	e03a      	b.n	8001e0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d020      	beq.n	8001dde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d9c:	4b36      	ldr	r3, [pc, #216]	; (8001e78 <HAL_RCC_OscConfig+0x270>)
 8001d9e:	2201      	movs	r2, #1
 8001da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da2:	f7ff f8a3 	bl	8000eec <HAL_GetTick>
 8001da6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da8:	e008      	b.n	8001dbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001daa:	f7ff f89f 	bl	8000eec <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d901      	bls.n	8001dbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e19b      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dbc:	4b2d      	ldr	r3, [pc, #180]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d0f0      	beq.n	8001daa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc8:	4b2a      	ldr	r3, [pc, #168]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	695b      	ldr	r3, [r3, #20]
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	4927      	ldr	r1, [pc, #156]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	600b      	str	r3, [r1, #0]
 8001ddc:	e015      	b.n	8001e0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dde:	4b26      	ldr	r3, [pc, #152]	; (8001e78 <HAL_RCC_OscConfig+0x270>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de4:	f7ff f882 	bl	8000eec <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dec:	f7ff f87e 	bl	8000eec <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e17a      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfe:	4b1d      	ldr	r3, [pc, #116]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d03a      	beq.n	8001e8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d019      	beq.n	8001e52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e1e:	4b17      	ldr	r3, [pc, #92]	; (8001e7c <HAL_RCC_OscConfig+0x274>)
 8001e20:	2201      	movs	r2, #1
 8001e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e24:	f7ff f862 	bl	8000eec <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e2c:	f7ff f85e 	bl	8000eec <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e15a      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3e:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e4a:	2001      	movs	r0, #1
 8001e4c:	f000 fada 	bl	8002404 <RCC_Delay>
 8001e50:	e01c      	b.n	8001e8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e52:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <HAL_RCC_OscConfig+0x274>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e58:	f7ff f848 	bl	8000eec <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e5e:	e00f      	b.n	8001e80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e60:	f7ff f844 	bl	8000eec <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d908      	bls.n	8001e80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e140      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
 8001e72:	bf00      	nop
 8001e74:	40021000 	.word	0x40021000
 8001e78:	42420000 	.word	0x42420000
 8001e7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e80:	4b9e      	ldr	r3, [pc, #632]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1e9      	bne.n	8001e60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f000 80a6 	beq.w	8001fe6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e9e:	4b97      	ldr	r3, [pc, #604]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d10d      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eaa:	4b94      	ldr	r3, [pc, #592]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	4a93      	ldr	r2, [pc, #588]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	61d3      	str	r3, [r2, #28]
 8001eb6:	4b91      	ldr	r3, [pc, #580]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec6:	4b8e      	ldr	r3, [pc, #568]	; (8002100 <HAL_RCC_OscConfig+0x4f8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d118      	bne.n	8001f04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ed2:	4b8b      	ldr	r3, [pc, #556]	; (8002100 <HAL_RCC_OscConfig+0x4f8>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a8a      	ldr	r2, [pc, #552]	; (8002100 <HAL_RCC_OscConfig+0x4f8>)
 8001ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ede:	f7ff f805 	bl	8000eec <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee6:	f7ff f801 	bl	8000eec <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b64      	cmp	r3, #100	; 0x64
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e0fd      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef8:	4b81      	ldr	r3, [pc, #516]	; (8002100 <HAL_RCC_OscConfig+0x4f8>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0f0      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d106      	bne.n	8001f1a <HAL_RCC_OscConfig+0x312>
 8001f0c:	4b7b      	ldr	r3, [pc, #492]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001f0e:	6a1b      	ldr	r3, [r3, #32]
 8001f10:	4a7a      	ldr	r2, [pc, #488]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001f12:	f043 0301 	orr.w	r3, r3, #1
 8001f16:	6213      	str	r3, [r2, #32]
 8001f18:	e02d      	b.n	8001f76 <HAL_RCC_OscConfig+0x36e>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10c      	bne.n	8001f3c <HAL_RCC_OscConfig+0x334>
 8001f22:	4b76      	ldr	r3, [pc, #472]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001f24:	6a1b      	ldr	r3, [r3, #32]
 8001f26:	4a75      	ldr	r2, [pc, #468]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001f28:	f023 0301 	bic.w	r3, r3, #1
 8001f2c:	6213      	str	r3, [r2, #32]
 8001f2e:	4b73      	ldr	r3, [pc, #460]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	4a72      	ldr	r2, [pc, #456]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001f34:	f023 0304 	bic.w	r3, r3, #4
 8001f38:	6213      	str	r3, [r2, #32]
 8001f3a:	e01c      	b.n	8001f76 <HAL_RCC_OscConfig+0x36e>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	2b05      	cmp	r3, #5
 8001f42:	d10c      	bne.n	8001f5e <HAL_RCC_OscConfig+0x356>
 8001f44:	4b6d      	ldr	r3, [pc, #436]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001f46:	6a1b      	ldr	r3, [r3, #32]
 8001f48:	4a6c      	ldr	r2, [pc, #432]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001f4a:	f043 0304 	orr.w	r3, r3, #4
 8001f4e:	6213      	str	r3, [r2, #32]
 8001f50:	4b6a      	ldr	r3, [pc, #424]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	4a69      	ldr	r2, [pc, #420]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	6213      	str	r3, [r2, #32]
 8001f5c:	e00b      	b.n	8001f76 <HAL_RCC_OscConfig+0x36e>
 8001f5e:	4b67      	ldr	r3, [pc, #412]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	4a66      	ldr	r2, [pc, #408]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001f64:	f023 0301 	bic.w	r3, r3, #1
 8001f68:	6213      	str	r3, [r2, #32]
 8001f6a:	4b64      	ldr	r3, [pc, #400]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	4a63      	ldr	r2, [pc, #396]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001f70:	f023 0304 	bic.w	r3, r3, #4
 8001f74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	68db      	ldr	r3, [r3, #12]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d015      	beq.n	8001faa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f7e:	f7fe ffb5 	bl	8000eec <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f84:	e00a      	b.n	8001f9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f86:	f7fe ffb1 	bl	8000eec <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e0ab      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f9c:	4b57      	ldr	r3, [pc, #348]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001f9e:	6a1b      	ldr	r3, [r3, #32]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0ee      	beq.n	8001f86 <HAL_RCC_OscConfig+0x37e>
 8001fa8:	e014      	b.n	8001fd4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001faa:	f7fe ff9f 	bl	8000eec <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb0:	e00a      	b.n	8001fc8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb2:	f7fe ff9b 	bl	8000eec <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e095      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc8:	4b4c      	ldr	r3, [pc, #304]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001fca:	6a1b      	ldr	r3, [r3, #32]
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d1ee      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fd4:	7dfb      	ldrb	r3, [r7, #23]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d105      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fda:	4b48      	ldr	r3, [pc, #288]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001fdc:	69db      	ldr	r3, [r3, #28]
 8001fde:	4a47      	ldr	r2, [pc, #284]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001fe0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fe4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 8081 	beq.w	80020f2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ff0:	4b42      	ldr	r3, [pc, #264]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 030c 	and.w	r3, r3, #12
 8001ff8:	2b08      	cmp	r3, #8
 8001ffa:	d061      	beq.n	80020c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	69db      	ldr	r3, [r3, #28]
 8002000:	2b02      	cmp	r3, #2
 8002002:	d146      	bne.n	8002092 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002004:	4b3f      	ldr	r3, [pc, #252]	; (8002104 <HAL_RCC_OscConfig+0x4fc>)
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200a:	f7fe ff6f 	bl	8000eec <HAL_GetTick>
 800200e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002010:	e008      	b.n	8002024 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002012:	f7fe ff6b 	bl	8000eec <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	2b02      	cmp	r3, #2
 800201e:	d901      	bls.n	8002024 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002020:	2303      	movs	r3, #3
 8002022:	e067      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002024:	4b35      	ldr	r3, [pc, #212]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1f0      	bne.n	8002012 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a1b      	ldr	r3, [r3, #32]
 8002034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002038:	d108      	bne.n	800204c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800203a:	4b30      	ldr	r3, [pc, #192]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	492d      	ldr	r1, [pc, #180]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8002048:	4313      	orrs	r3, r2
 800204a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800204c:	4b2b      	ldr	r3, [pc, #172]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a19      	ldr	r1, [r3, #32]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205c:	430b      	orrs	r3, r1
 800205e:	4927      	ldr	r1, [pc, #156]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8002060:	4313      	orrs	r3, r2
 8002062:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002064:	4b27      	ldr	r3, [pc, #156]	; (8002104 <HAL_RCC_OscConfig+0x4fc>)
 8002066:	2201      	movs	r2, #1
 8002068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206a:	f7fe ff3f 	bl	8000eec <HAL_GetTick>
 800206e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002070:	e008      	b.n	8002084 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002072:	f7fe ff3b 	bl	8000eec <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	2b02      	cmp	r3, #2
 800207e:	d901      	bls.n	8002084 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e037      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002084:	4b1d      	ldr	r3, [pc, #116]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d0f0      	beq.n	8002072 <HAL_RCC_OscConfig+0x46a>
 8002090:	e02f      	b.n	80020f2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002092:	4b1c      	ldr	r3, [pc, #112]	; (8002104 <HAL_RCC_OscConfig+0x4fc>)
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002098:	f7fe ff28 	bl	8000eec <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a0:	f7fe ff24 	bl	8000eec <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e020      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020b2:	4b12      	ldr	r3, [pc, #72]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0x498>
 80020be:	e018      	b.n	80020f2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69db      	ldr	r3, [r3, #28]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d101      	bne.n	80020cc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e013      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020cc:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <HAL_RCC_OscConfig+0x4f4>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d106      	bne.n	80020ee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d001      	beq.n	80020f2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e000      	b.n	80020f4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40021000 	.word	0x40021000
 8002100:	40007000 	.word	0x40007000
 8002104:	42420060 	.word	0x42420060

08002108 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d101      	bne.n	800211c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e0d0      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800211c:	4b6a      	ldr	r3, [pc, #424]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	429a      	cmp	r2, r3
 8002128:	d910      	bls.n	800214c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212a:	4b67      	ldr	r3, [pc, #412]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f023 0207 	bic.w	r2, r3, #7
 8002132:	4965      	ldr	r1, [pc, #404]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	4313      	orrs	r3, r2
 8002138:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800213a:	4b63      	ldr	r3, [pc, #396]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	429a      	cmp	r2, r3
 8002146:	d001      	beq.n	800214c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e0b8      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	2b00      	cmp	r3, #0
 8002156:	d020      	beq.n	800219a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	d005      	beq.n	8002170 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002164:	4b59      	ldr	r3, [pc, #356]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	4a58      	ldr	r2, [pc, #352]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 800216a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800216e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0308 	and.w	r3, r3, #8
 8002178:	2b00      	cmp	r3, #0
 800217a:	d005      	beq.n	8002188 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800217c:	4b53      	ldr	r3, [pc, #332]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	4a52      	ldr	r2, [pc, #328]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002182:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002186:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002188:	4b50      	ldr	r3, [pc, #320]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	494d      	ldr	r1, [pc, #308]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002196:	4313      	orrs	r3, r2
 8002198:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d040      	beq.n	8002228 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b01      	cmp	r3, #1
 80021ac:	d107      	bne.n	80021be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ae:	4b47      	ldr	r3, [pc, #284]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d115      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e07f      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d107      	bne.n	80021d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c6:	4b41      	ldr	r3, [pc, #260]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d109      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e073      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d6:	4b3d      	ldr	r3, [pc, #244]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e06b      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021e6:	4b39      	ldr	r3, [pc, #228]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f023 0203 	bic.w	r2, r3, #3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	4936      	ldr	r1, [pc, #216]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021f8:	f7fe fe78 	bl	8000eec <HAL_GetTick>
 80021fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fe:	e00a      	b.n	8002216 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002200:	f7fe fe74 	bl	8000eec <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	f241 3288 	movw	r2, #5000	; 0x1388
 800220e:	4293      	cmp	r3, r2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e053      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002216:	4b2d      	ldr	r3, [pc, #180]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 020c 	and.w	r2, r3, #12
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	429a      	cmp	r2, r3
 8002226:	d1eb      	bne.n	8002200 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002228:	4b27      	ldr	r3, [pc, #156]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	d210      	bcs.n	8002258 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002236:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f023 0207 	bic.w	r2, r3, #7
 800223e:	4922      	ldr	r1, [pc, #136]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	4313      	orrs	r3, r2
 8002244:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002246:	4b20      	ldr	r3, [pc, #128]	; (80022c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	683a      	ldr	r2, [r7, #0]
 8002250:	429a      	cmp	r2, r3
 8002252:	d001      	beq.n	8002258 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e032      	b.n	80022be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b00      	cmp	r3, #0
 8002262:	d008      	beq.n	8002276 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002264:	4b19      	ldr	r3, [pc, #100]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	4916      	ldr	r1, [pc, #88]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002272:	4313      	orrs	r3, r2
 8002274:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0308 	and.w	r3, r3, #8
 800227e:	2b00      	cmp	r3, #0
 8002280:	d009      	beq.n	8002296 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002282:	4b12      	ldr	r3, [pc, #72]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	490e      	ldr	r1, [pc, #56]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 8002292:	4313      	orrs	r3, r2
 8002294:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002296:	f000 f821 	bl	80022dc <HAL_RCC_GetSysClockFreq>
 800229a:	4601      	mov	r1, r0
 800229c:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <HAL_RCC_ClockConfig+0x1c4>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	4a0a      	ldr	r2, [pc, #40]	; (80022d0 <HAL_RCC_ClockConfig+0x1c8>)
 80022a8:	5cd3      	ldrb	r3, [r2, r3]
 80022aa:	fa21 f303 	lsr.w	r3, r1, r3
 80022ae:	4a09      	ldr	r2, [pc, #36]	; (80022d4 <HAL_RCC_ClockConfig+0x1cc>)
 80022b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022b2:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <HAL_RCC_ClockConfig+0x1d0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fe fdd6 	bl	8000e68 <HAL_InitTick>

  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40022000 	.word	0x40022000
 80022cc:	40021000 	.word	0x40021000
 80022d0:	08003370 	.word	0x08003370
 80022d4:	20000000 	.word	0x20000000
 80022d8:	20000004 	.word	0x20000004

080022dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022dc:	b490      	push	{r4, r7}
 80022de:	b08a      	sub	sp, #40	; 0x28
 80022e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80022e2:	4b2a      	ldr	r3, [pc, #168]	; (800238c <HAL_RCC_GetSysClockFreq+0xb0>)
 80022e4:	1d3c      	adds	r4, r7, #4
 80022e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80022ec:	4b28      	ldr	r3, [pc, #160]	; (8002390 <HAL_RCC_GetSysClockFreq+0xb4>)
 80022ee:	881b      	ldrh	r3, [r3, #0]
 80022f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	61fb      	str	r3, [r7, #28]
 80022f6:	2300      	movs	r3, #0
 80022f8:	61bb      	str	r3, [r7, #24]
 80022fa:	2300      	movs	r3, #0
 80022fc:	627b      	str	r3, [r7, #36]	; 0x24
 80022fe:	2300      	movs	r3, #0
 8002300:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002302:	2300      	movs	r3, #0
 8002304:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002306:	4b23      	ldr	r3, [pc, #140]	; (8002394 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	f003 030c 	and.w	r3, r3, #12
 8002312:	2b04      	cmp	r3, #4
 8002314:	d002      	beq.n	800231c <HAL_RCC_GetSysClockFreq+0x40>
 8002316:	2b08      	cmp	r3, #8
 8002318:	d003      	beq.n	8002322 <HAL_RCC_GetSysClockFreq+0x46>
 800231a:	e02d      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800231c:	4b1e      	ldr	r3, [pc, #120]	; (8002398 <HAL_RCC_GetSysClockFreq+0xbc>)
 800231e:	623b      	str	r3, [r7, #32]
      break;
 8002320:	e02d      	b.n	800237e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	0c9b      	lsrs	r3, r3, #18
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800232e:	4413      	add	r3, r2
 8002330:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002334:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d013      	beq.n	8002368 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002340:	4b14      	ldr	r3, [pc, #80]	; (8002394 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	0c5b      	lsrs	r3, r3, #17
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800234e:	4413      	add	r3, r2
 8002350:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002354:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	4a0f      	ldr	r2, [pc, #60]	; (8002398 <HAL_RCC_GetSysClockFreq+0xbc>)
 800235a:	fb02 f203 	mul.w	r2, r2, r3
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	fbb2 f3f3 	udiv	r3, r2, r3
 8002364:	627b      	str	r3, [r7, #36]	; 0x24
 8002366:	e004      	b.n	8002372 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	4a0c      	ldr	r2, [pc, #48]	; (800239c <HAL_RCC_GetSysClockFreq+0xc0>)
 800236c:	fb02 f303 	mul.w	r3, r2, r3
 8002370:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	623b      	str	r3, [r7, #32]
      break;
 8002376:	e002      	b.n	800237e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002378:	4b07      	ldr	r3, [pc, #28]	; (8002398 <HAL_RCC_GetSysClockFreq+0xbc>)
 800237a:	623b      	str	r3, [r7, #32]
      break;
 800237c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800237e:	6a3b      	ldr	r3, [r7, #32]
}
 8002380:	4618      	mov	r0, r3
 8002382:	3728      	adds	r7, #40	; 0x28
 8002384:	46bd      	mov	sp, r7
 8002386:	bc90      	pop	{r4, r7}
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	08003348 	.word	0x08003348
 8002390:	08003358 	.word	0x08003358
 8002394:	40021000 	.word	0x40021000
 8002398:	007a1200 	.word	0x007a1200
 800239c:	003d0900 	.word	0x003d0900

080023a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023a0:	b480      	push	{r7}
 80023a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023a4:	4b02      	ldr	r3, [pc, #8]	; (80023b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80023a6:	681b      	ldr	r3, [r3, #0]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bc80      	pop	{r7}
 80023ae:	4770      	bx	lr
 80023b0:	20000000 	.word	0x20000000

080023b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023b8:	f7ff fff2 	bl	80023a0 <HAL_RCC_GetHCLKFreq>
 80023bc:	4601      	mov	r1, r0
 80023be:	4b05      	ldr	r3, [pc, #20]	; (80023d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	0a1b      	lsrs	r3, r3, #8
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	4a03      	ldr	r2, [pc, #12]	; (80023d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023ca:	5cd3      	ldrb	r3, [r2, r3]
 80023cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	40021000 	.word	0x40021000
 80023d8:	08003380 	.word	0x08003380

080023dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023e0:	f7ff ffde 	bl	80023a0 <HAL_RCC_GetHCLKFreq>
 80023e4:	4601      	mov	r1, r0
 80023e6:	4b05      	ldr	r3, [pc, #20]	; (80023fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	0adb      	lsrs	r3, r3, #11
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	4a03      	ldr	r2, [pc, #12]	; (8002400 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023f2:	5cd3      	ldrb	r3, [r2, r3]
 80023f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40021000 	.word	0x40021000
 8002400:	08003380 	.word	0x08003380

08002404 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800240c:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <RCC_Delay+0x34>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a0a      	ldr	r2, [pc, #40]	; (800243c <RCC_Delay+0x38>)
 8002412:	fba2 2303 	umull	r2, r3, r2, r3
 8002416:	0a5b      	lsrs	r3, r3, #9
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	fb02 f303 	mul.w	r3, r2, r3
 800241e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002420:	bf00      	nop
  }
  while (Delay --);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	1e5a      	subs	r2, r3, #1
 8002426:	60fa      	str	r2, [r7, #12]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1f9      	bne.n	8002420 <RCC_Delay+0x1c>
}
 800242c:	bf00      	nop
 800242e:	3714      	adds	r7, #20
 8002430:	46bd      	mov	sp, r7
 8002432:	bc80      	pop	{r7}
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	20000000 	.word	0x20000000
 800243c:	10624dd3 	.word	0x10624dd3

08002440 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002448:	2300      	movs	r3, #0
 800244a:	613b      	str	r3, [r7, #16]
 800244c:	2300      	movs	r3, #0
 800244e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b00      	cmp	r3, #0
 800245a:	d07d      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800245c:	2300      	movs	r3, #0
 800245e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002460:	4b4f      	ldr	r3, [pc, #316]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002462:	69db      	ldr	r3, [r3, #28]
 8002464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10d      	bne.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800246c:	4b4c      	ldr	r3, [pc, #304]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800246e:	69db      	ldr	r3, [r3, #28]
 8002470:	4a4b      	ldr	r2, [pc, #300]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002472:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002476:	61d3      	str	r3, [r2, #28]
 8002478:	4b49      	ldr	r3, [pc, #292]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800247a:	69db      	ldr	r3, [r3, #28]
 800247c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002480:	60bb      	str	r3, [r7, #8]
 8002482:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002484:	2301      	movs	r3, #1
 8002486:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002488:	4b46      	ldr	r3, [pc, #280]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002490:	2b00      	cmp	r3, #0
 8002492:	d118      	bne.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002494:	4b43      	ldr	r3, [pc, #268]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a42      	ldr	r2, [pc, #264]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800249a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800249e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024a0:	f7fe fd24 	bl	8000eec <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a6:	e008      	b.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a8:	f7fe fd20 	bl	8000eec <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b64      	cmp	r3, #100	; 0x64
 80024b4:	d901      	bls.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e06d      	b.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ba:	4b3a      	ldr	r3, [pc, #232]	; (80025a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0f0      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024c6:	4b36      	ldr	r3, [pc, #216]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ce:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d02e      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d027      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024e4:	4b2e      	ldr	r3, [pc, #184]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024ec:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024ee:	4b2e      	ldr	r3, [pc, #184]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024f4:	4b2c      	ldr	r3, [pc, #176]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80024fa:	4a29      	ldr	r2, [pc, #164]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	2b00      	cmp	r3, #0
 8002508:	d014      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250a:	f7fe fcef 	bl	8000eec <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002510:	e00a      	b.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002512:	f7fe fceb 	bl	8000eec <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002520:	4293      	cmp	r3, r2
 8002522:	d901      	bls.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e036      	b.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002528:	4b1d      	ldr	r3, [pc, #116]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800252a:	6a1b      	ldr	r3, [r3, #32]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0ee      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002534:	4b1a      	ldr	r3, [pc, #104]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	4917      	ldr	r1, [pc, #92]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002542:	4313      	orrs	r3, r2
 8002544:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002546:	7dfb      	ldrb	r3, [r7, #23]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d105      	bne.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800254c:	4b14      	ldr	r3, [pc, #80]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	4a13      	ldr	r2, [pc, #76]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002552:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002556:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d008      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002564:	4b0e      	ldr	r3, [pc, #56]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	490b      	ldr	r1, [pc, #44]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002572:	4313      	orrs	r3, r2
 8002574:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0310 	and.w	r3, r3, #16
 800257e:	2b00      	cmp	r3, #0
 8002580:	d008      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002582:	4b07      	ldr	r3, [pc, #28]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	4904      	ldr	r1, [pc, #16]	; (80025a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002590:	4313      	orrs	r3, r2
 8002592:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002594:	2300      	movs	r3, #0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	40021000 	.word	0x40021000
 80025a4:	40007000 	.word	0x40007000
 80025a8:	42420440 	.word	0x42420440

080025ac <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80025ac:	b590      	push	{r4, r7, lr}
 80025ae:	b08d      	sub	sp, #52	; 0x34
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80025b4:	4b55      	ldr	r3, [pc, #340]	; (800270c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 80025b6:	f107 040c 	add.w	r4, r7, #12
 80025ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80025c0:	4b53      	ldr	r3, [pc, #332]	; (8002710 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80025c2:	881b      	ldrh	r3, [r3, #0]
 80025c4:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80025c6:	2300      	movs	r3, #0
 80025c8:	627b      	str	r3, [r7, #36]	; 0x24
 80025ca:	2300      	movs	r3, #0
 80025cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025ce:	2300      	movs	r3, #0
 80025d0:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	61fb      	str	r3, [r7, #28]
 80025d6:	2300      	movs	r3, #0
 80025d8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d07f      	beq.n	80026e0 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 80025e0:	2b10      	cmp	r3, #16
 80025e2:	d002      	beq.n	80025ea <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d048      	beq.n	800267a <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80025e8:	e08b      	b.n	8002702 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 80025ea:	4b4a      	ldr	r3, [pc, #296]	; (8002714 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80025f0:	4b48      	ldr	r3, [pc, #288]	; (8002714 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d07f      	beq.n	80026fc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	0c9b      	lsrs	r3, r3, #18
 8002600:	f003 030f 	and.w	r3, r3, #15
 8002604:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002608:	4413      	add	r3, r2
 800260a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800260e:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d018      	beq.n	800264c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800261a:	4b3e      	ldr	r3, [pc, #248]	; (8002714 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	0c5b      	lsrs	r3, r3, #17
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002628:	4413      	add	r3, r2
 800262a:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800262e:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00d      	beq.n	8002656 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800263a:	4a37      	ldr	r2, [pc, #220]	; (8002718 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002642:	6a3b      	ldr	r3, [r7, #32]
 8002644:	fb02 f303 	mul.w	r3, r2, r3
 8002648:	62fb      	str	r3, [r7, #44]	; 0x2c
 800264a:	e004      	b.n	8002656 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800264c:	6a3b      	ldr	r3, [r7, #32]
 800264e:	4a33      	ldr	r2, [pc, #204]	; (800271c <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002650:	fb02 f303 	mul.w	r3, r2, r3
 8002654:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002656:	4b2f      	ldr	r3, [pc, #188]	; (8002714 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800265e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002662:	d102      	bne.n	800266a <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8002664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002666:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002668:	e048      	b.n	80026fc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 800266a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	4a2c      	ldr	r2, [pc, #176]	; (8002720 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002670:	fba2 2303 	umull	r2, r3, r2, r3
 8002674:	085b      	lsrs	r3, r3, #1
 8002676:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002678:	e040      	b.n	80026fc <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 800267a:	4b26      	ldr	r3, [pc, #152]	; (8002714 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800268a:	d108      	bne.n	800269e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8002696:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800269a:	62bb      	str	r3, [r7, #40]	; 0x28
 800269c:	e01f      	b.n	80026de <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026a8:	d109      	bne.n	80026be <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 80026aa:	4b1a      	ldr	r3, [pc, #104]	; (8002714 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 80026b6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80026ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80026bc:	e00f      	b.n	80026de <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80026c8:	d11a      	bne.n	8002700 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80026ca:	4b12      	ldr	r3, [pc, #72]	; (8002714 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d014      	beq.n	8002700 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80026d6:	f24f 4324 	movw	r3, #62500	; 0xf424
 80026da:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80026dc:	e010      	b.n	8002700 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80026de:	e00f      	b.n	8002700 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80026e0:	f7ff fe7c 	bl	80023dc <HAL_RCC_GetPCLK2Freq>
 80026e4:	4602      	mov	r2, r0
 80026e6:	4b0b      	ldr	r3, [pc, #44]	; (8002714 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	0b9b      	lsrs	r3, r3, #14
 80026ec:	f003 0303 	and.w	r3, r3, #3
 80026f0:	3301      	adds	r3, #1
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80026fa:	e002      	b.n	8002702 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80026fc:	bf00      	nop
 80026fe:	e000      	b.n	8002702 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002700:	bf00      	nop
    }
  }
  return (frequency);
 8002702:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002704:	4618      	mov	r0, r3
 8002706:	3734      	adds	r7, #52	; 0x34
 8002708:	46bd      	mov	sp, r7
 800270a:	bd90      	pop	{r4, r7, pc}
 800270c:	0800335c 	.word	0x0800335c
 8002710:	0800336c 	.word	0x0800336c
 8002714:	40021000 	.word	0x40021000
 8002718:	007a1200 	.word	0x007a1200
 800271c:	003d0900 	.word	0x003d0900
 8002720:	aaaaaaab 	.word	0xaaaaaaab

08002724 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e03f      	b.n	80027b6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d106      	bne.n	8002750 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7fe faa2 	bl	8000c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2224      	movs	r2, #36	; 0x24
 8002754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	68da      	ldr	r2, [r3, #12]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002766:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f905 	bl	8002978 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	691a      	ldr	r2, [r3, #16]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800277c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695a      	ldr	r2, [r3, #20]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800278c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68da      	ldr	r2, [r3, #12]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800279c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2220      	movs	r2, #32
 80027a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2220      	movs	r2, #32
 80027b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027be:	b580      	push	{r7, lr}
 80027c0:	b08a      	sub	sp, #40	; 0x28
 80027c2:	af02      	add	r7, sp, #8
 80027c4:	60f8      	str	r0, [r7, #12]
 80027c6:	60b9      	str	r1, [r7, #8]
 80027c8:	603b      	str	r3, [r7, #0]
 80027ca:	4613      	mov	r3, r2
 80027cc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b20      	cmp	r3, #32
 80027dc:	d17c      	bne.n	80028d8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d002      	beq.n	80027ea <HAL_UART_Transmit+0x2c>
 80027e4:	88fb      	ldrh	r3, [r7, #6]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e075      	b.n	80028da <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d101      	bne.n	80027fc <HAL_UART_Transmit+0x3e>
 80027f8:	2302      	movs	r3, #2
 80027fa:	e06e      	b.n	80028da <HAL_UART_Transmit+0x11c>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2201      	movs	r2, #1
 8002800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2200      	movs	r2, #0
 8002808:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2221      	movs	r2, #33	; 0x21
 800280e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002812:	f7fe fb6b 	bl	8000eec <HAL_GetTick>
 8002816:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	88fa      	ldrh	r2, [r7, #6]
 800281c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	88fa      	ldrh	r2, [r7, #6]
 8002822:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800282c:	d108      	bne.n	8002840 <HAL_UART_Transmit+0x82>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d104      	bne.n	8002840 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002836:	2300      	movs	r3, #0
 8002838:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	61bb      	str	r3, [r7, #24]
 800283e:	e003      	b.n	8002848 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002844:	2300      	movs	r3, #0
 8002846:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002850:	e02a      	b.n	80028a8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	2200      	movs	r2, #0
 800285a:	2180      	movs	r1, #128	; 0x80
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f000 f840 	bl	80028e2 <UART_WaitOnFlagUntilTimeout>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e036      	b.n	80028da <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10b      	bne.n	800288a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	461a      	mov	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002880:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	3302      	adds	r3, #2
 8002886:	61bb      	str	r3, [r7, #24]
 8002888:	e007      	b.n	800289a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	781a      	ldrb	r2, [r3, #0]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	3301      	adds	r3, #1
 8002898:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800289e:	b29b      	uxth	r3, r3
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1cf      	bne.n	8002852 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	2200      	movs	r2, #0
 80028ba:	2140      	movs	r1, #64	; 0x40
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f000 f810 	bl	80028e2 <UART_WaitOnFlagUntilTimeout>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e006      	b.n	80028da <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2220      	movs	r2, #32
 80028d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80028d4:	2300      	movs	r3, #0
 80028d6:	e000      	b.n	80028da <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80028d8:	2302      	movs	r3, #2
  }
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3720      	adds	r7, #32
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b084      	sub	sp, #16
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	60f8      	str	r0, [r7, #12]
 80028ea:	60b9      	str	r1, [r7, #8]
 80028ec:	603b      	str	r3, [r7, #0]
 80028ee:	4613      	mov	r3, r2
 80028f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028f2:	e02c      	b.n	800294e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028fa:	d028      	beq.n	800294e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d007      	beq.n	8002912 <UART_WaitOnFlagUntilTimeout+0x30>
 8002902:	f7fe faf3 	bl	8000eec <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	429a      	cmp	r2, r3
 8002910:	d21d      	bcs.n	800294e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	68da      	ldr	r2, [r3, #12]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002920:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	695a      	ldr	r2, [r3, #20]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 0201 	bic.w	r2, r2, #1
 8002930:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2220      	movs	r2, #32
 8002936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2220      	movs	r2, #32
 800293e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800294a:	2303      	movs	r3, #3
 800294c:	e00f      	b.n	800296e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	4013      	ands	r3, r2
 8002958:	68ba      	ldr	r2, [r7, #8]
 800295a:	429a      	cmp	r2, r3
 800295c:	bf0c      	ite	eq
 800295e:	2301      	moveq	r3, #1
 8002960:	2300      	movne	r3, #0
 8002962:	b2db      	uxtb	r3, r3
 8002964:	461a      	mov	r2, r3
 8002966:	79fb      	ldrb	r3, [r7, #7]
 8002968:	429a      	cmp	r2, r3
 800296a:	d0c3      	beq.n	80028f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
	...

08002978 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68da      	ldr	r2, [r3, #12]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	430a      	orrs	r2, r1
 8002994:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	431a      	orrs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	695b      	ldr	r3, [r3, #20]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80029b2:	f023 030c 	bic.w	r3, r3, #12
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6812      	ldr	r2, [r2, #0]
 80029ba:	68b9      	ldr	r1, [r7, #8]
 80029bc:	430b      	orrs	r3, r1
 80029be:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	699a      	ldr	r2, [r3, #24]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a2c      	ldr	r2, [pc, #176]	; (8002a8c <UART_SetConfig+0x114>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d103      	bne.n	80029e8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80029e0:	f7ff fcfc 	bl	80023dc <HAL_RCC_GetPCLK2Freq>
 80029e4:	60f8      	str	r0, [r7, #12]
 80029e6:	e002      	b.n	80029ee <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80029e8:	f7ff fce4 	bl	80023b4 <HAL_RCC_GetPCLK1Freq>
 80029ec:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	4613      	mov	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4413      	add	r3, r2
 80029f6:	009a      	lsls	r2, r3, #2
 80029f8:	441a      	add	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a04:	4a22      	ldr	r2, [pc, #136]	; (8002a90 <UART_SetConfig+0x118>)
 8002a06:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0a:	095b      	lsrs	r3, r3, #5
 8002a0c:	0119      	lsls	r1, r3, #4
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	4613      	mov	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	009a      	lsls	r2, r3, #2
 8002a18:	441a      	add	r2, r3
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a24:	4b1a      	ldr	r3, [pc, #104]	; (8002a90 <UART_SetConfig+0x118>)
 8002a26:	fba3 0302 	umull	r0, r3, r3, r2
 8002a2a:	095b      	lsrs	r3, r3, #5
 8002a2c:	2064      	movs	r0, #100	; 0x64
 8002a2e:	fb00 f303 	mul.w	r3, r0, r3
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	3332      	adds	r3, #50	; 0x32
 8002a38:	4a15      	ldr	r2, [pc, #84]	; (8002a90 <UART_SetConfig+0x118>)
 8002a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3e:	095b      	lsrs	r3, r3, #5
 8002a40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a44:	4419      	add	r1, r3
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	4413      	add	r3, r2
 8002a4e:	009a      	lsls	r2, r3, #2
 8002a50:	441a      	add	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a5c:	4b0c      	ldr	r3, [pc, #48]	; (8002a90 <UART_SetConfig+0x118>)
 8002a5e:	fba3 0302 	umull	r0, r3, r3, r2
 8002a62:	095b      	lsrs	r3, r3, #5
 8002a64:	2064      	movs	r0, #100	; 0x64
 8002a66:	fb00 f303 	mul.w	r3, r0, r3
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	011b      	lsls	r3, r3, #4
 8002a6e:	3332      	adds	r3, #50	; 0x32
 8002a70:	4a07      	ldr	r2, [pc, #28]	; (8002a90 <UART_SetConfig+0x118>)
 8002a72:	fba2 2303 	umull	r2, r3, r2, r3
 8002a76:	095b      	lsrs	r3, r3, #5
 8002a78:	f003 020f 	and.w	r2, r3, #15
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	440a      	add	r2, r1
 8002a82:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002a84:	bf00      	nop
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40013800 	.word	0x40013800
 8002a90:	51eb851f 	.word	0x51eb851f

08002a94 <__errno>:
 8002a94:	4b01      	ldr	r3, [pc, #4]	; (8002a9c <__errno+0x8>)
 8002a96:	6818      	ldr	r0, [r3, #0]
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	2000000c 	.word	0x2000000c

08002aa0 <__libc_init_array>:
 8002aa0:	b570      	push	{r4, r5, r6, lr}
 8002aa2:	2500      	movs	r5, #0
 8002aa4:	4e0c      	ldr	r6, [pc, #48]	; (8002ad8 <__libc_init_array+0x38>)
 8002aa6:	4c0d      	ldr	r4, [pc, #52]	; (8002adc <__libc_init_array+0x3c>)
 8002aa8:	1ba4      	subs	r4, r4, r6
 8002aaa:	10a4      	asrs	r4, r4, #2
 8002aac:	42a5      	cmp	r5, r4
 8002aae:	d109      	bne.n	8002ac4 <__libc_init_array+0x24>
 8002ab0:	f000 fc34 	bl	800331c <_init>
 8002ab4:	2500      	movs	r5, #0
 8002ab6:	4e0a      	ldr	r6, [pc, #40]	; (8002ae0 <__libc_init_array+0x40>)
 8002ab8:	4c0a      	ldr	r4, [pc, #40]	; (8002ae4 <__libc_init_array+0x44>)
 8002aba:	1ba4      	subs	r4, r4, r6
 8002abc:	10a4      	asrs	r4, r4, #2
 8002abe:	42a5      	cmp	r5, r4
 8002ac0:	d105      	bne.n	8002ace <__libc_init_array+0x2e>
 8002ac2:	bd70      	pop	{r4, r5, r6, pc}
 8002ac4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ac8:	4798      	blx	r3
 8002aca:	3501      	adds	r5, #1
 8002acc:	e7ee      	b.n	8002aac <__libc_init_array+0xc>
 8002ace:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ad2:	4798      	blx	r3
 8002ad4:	3501      	adds	r5, #1
 8002ad6:	e7f2      	b.n	8002abe <__libc_init_array+0x1e>
 8002ad8:	080033bc 	.word	0x080033bc
 8002adc:	080033bc 	.word	0x080033bc
 8002ae0:	080033bc 	.word	0x080033bc
 8002ae4:	080033c0 	.word	0x080033c0

08002ae8 <memset>:
 8002ae8:	4603      	mov	r3, r0
 8002aea:	4402      	add	r2, r0
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d100      	bne.n	8002af2 <memset+0xa>
 8002af0:	4770      	bx	lr
 8002af2:	f803 1b01 	strb.w	r1, [r3], #1
 8002af6:	e7f9      	b.n	8002aec <memset+0x4>

08002af8 <siprintf>:
 8002af8:	b40e      	push	{r1, r2, r3}
 8002afa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002afe:	b500      	push	{lr}
 8002b00:	b09c      	sub	sp, #112	; 0x70
 8002b02:	ab1d      	add	r3, sp, #116	; 0x74
 8002b04:	9002      	str	r0, [sp, #8]
 8002b06:	9006      	str	r0, [sp, #24]
 8002b08:	9107      	str	r1, [sp, #28]
 8002b0a:	9104      	str	r1, [sp, #16]
 8002b0c:	4808      	ldr	r0, [pc, #32]	; (8002b30 <siprintf+0x38>)
 8002b0e:	4909      	ldr	r1, [pc, #36]	; (8002b34 <siprintf+0x3c>)
 8002b10:	f853 2b04 	ldr.w	r2, [r3], #4
 8002b14:	9105      	str	r1, [sp, #20]
 8002b16:	6800      	ldr	r0, [r0, #0]
 8002b18:	a902      	add	r1, sp, #8
 8002b1a:	9301      	str	r3, [sp, #4]
 8002b1c:	f000 f866 	bl	8002bec <_svfiprintf_r>
 8002b20:	2200      	movs	r2, #0
 8002b22:	9b02      	ldr	r3, [sp, #8]
 8002b24:	701a      	strb	r2, [r3, #0]
 8002b26:	b01c      	add	sp, #112	; 0x70
 8002b28:	f85d eb04 	ldr.w	lr, [sp], #4
 8002b2c:	b003      	add	sp, #12
 8002b2e:	4770      	bx	lr
 8002b30:	2000000c 	.word	0x2000000c
 8002b34:	ffff0208 	.word	0xffff0208

08002b38 <__ssputs_r>:
 8002b38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b3c:	688e      	ldr	r6, [r1, #8]
 8002b3e:	4682      	mov	sl, r0
 8002b40:	429e      	cmp	r6, r3
 8002b42:	460c      	mov	r4, r1
 8002b44:	4690      	mov	r8, r2
 8002b46:	4699      	mov	r9, r3
 8002b48:	d837      	bhi.n	8002bba <__ssputs_r+0x82>
 8002b4a:	898a      	ldrh	r2, [r1, #12]
 8002b4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002b50:	d031      	beq.n	8002bb6 <__ssputs_r+0x7e>
 8002b52:	2302      	movs	r3, #2
 8002b54:	6825      	ldr	r5, [r4, #0]
 8002b56:	6909      	ldr	r1, [r1, #16]
 8002b58:	1a6f      	subs	r7, r5, r1
 8002b5a:	6965      	ldr	r5, [r4, #20]
 8002b5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002b60:	fb95 f5f3 	sdiv	r5, r5, r3
 8002b64:	f109 0301 	add.w	r3, r9, #1
 8002b68:	443b      	add	r3, r7
 8002b6a:	429d      	cmp	r5, r3
 8002b6c:	bf38      	it	cc
 8002b6e:	461d      	movcc	r5, r3
 8002b70:	0553      	lsls	r3, r2, #21
 8002b72:	d530      	bpl.n	8002bd6 <__ssputs_r+0x9e>
 8002b74:	4629      	mov	r1, r5
 8002b76:	f000 fb37 	bl	80031e8 <_malloc_r>
 8002b7a:	4606      	mov	r6, r0
 8002b7c:	b950      	cbnz	r0, 8002b94 <__ssputs_r+0x5c>
 8002b7e:	230c      	movs	r3, #12
 8002b80:	f04f 30ff 	mov.w	r0, #4294967295
 8002b84:	f8ca 3000 	str.w	r3, [sl]
 8002b88:	89a3      	ldrh	r3, [r4, #12]
 8002b8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b8e:	81a3      	strh	r3, [r4, #12]
 8002b90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b94:	463a      	mov	r2, r7
 8002b96:	6921      	ldr	r1, [r4, #16]
 8002b98:	f000 fab6 	bl	8003108 <memcpy>
 8002b9c:	89a3      	ldrh	r3, [r4, #12]
 8002b9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002ba2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ba6:	81a3      	strh	r3, [r4, #12]
 8002ba8:	6126      	str	r6, [r4, #16]
 8002baa:	443e      	add	r6, r7
 8002bac:	6026      	str	r6, [r4, #0]
 8002bae:	464e      	mov	r6, r9
 8002bb0:	6165      	str	r5, [r4, #20]
 8002bb2:	1bed      	subs	r5, r5, r7
 8002bb4:	60a5      	str	r5, [r4, #8]
 8002bb6:	454e      	cmp	r6, r9
 8002bb8:	d900      	bls.n	8002bbc <__ssputs_r+0x84>
 8002bba:	464e      	mov	r6, r9
 8002bbc:	4632      	mov	r2, r6
 8002bbe:	4641      	mov	r1, r8
 8002bc0:	6820      	ldr	r0, [r4, #0]
 8002bc2:	f000 faac 	bl	800311e <memmove>
 8002bc6:	68a3      	ldr	r3, [r4, #8]
 8002bc8:	2000      	movs	r0, #0
 8002bca:	1b9b      	subs	r3, r3, r6
 8002bcc:	60a3      	str	r3, [r4, #8]
 8002bce:	6823      	ldr	r3, [r4, #0]
 8002bd0:	441e      	add	r6, r3
 8002bd2:	6026      	str	r6, [r4, #0]
 8002bd4:	e7dc      	b.n	8002b90 <__ssputs_r+0x58>
 8002bd6:	462a      	mov	r2, r5
 8002bd8:	f000 fb60 	bl	800329c <_realloc_r>
 8002bdc:	4606      	mov	r6, r0
 8002bde:	2800      	cmp	r0, #0
 8002be0:	d1e2      	bne.n	8002ba8 <__ssputs_r+0x70>
 8002be2:	6921      	ldr	r1, [r4, #16]
 8002be4:	4650      	mov	r0, sl
 8002be6:	f000 fab3 	bl	8003150 <_free_r>
 8002bea:	e7c8      	b.n	8002b7e <__ssputs_r+0x46>

08002bec <_svfiprintf_r>:
 8002bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bf0:	461d      	mov	r5, r3
 8002bf2:	898b      	ldrh	r3, [r1, #12]
 8002bf4:	b09d      	sub	sp, #116	; 0x74
 8002bf6:	061f      	lsls	r7, r3, #24
 8002bf8:	4680      	mov	r8, r0
 8002bfa:	460c      	mov	r4, r1
 8002bfc:	4616      	mov	r6, r2
 8002bfe:	d50f      	bpl.n	8002c20 <_svfiprintf_r+0x34>
 8002c00:	690b      	ldr	r3, [r1, #16]
 8002c02:	b96b      	cbnz	r3, 8002c20 <_svfiprintf_r+0x34>
 8002c04:	2140      	movs	r1, #64	; 0x40
 8002c06:	f000 faef 	bl	80031e8 <_malloc_r>
 8002c0a:	6020      	str	r0, [r4, #0]
 8002c0c:	6120      	str	r0, [r4, #16]
 8002c0e:	b928      	cbnz	r0, 8002c1c <_svfiprintf_r+0x30>
 8002c10:	230c      	movs	r3, #12
 8002c12:	f8c8 3000 	str.w	r3, [r8]
 8002c16:	f04f 30ff 	mov.w	r0, #4294967295
 8002c1a:	e0c8      	b.n	8002dae <_svfiprintf_r+0x1c2>
 8002c1c:	2340      	movs	r3, #64	; 0x40
 8002c1e:	6163      	str	r3, [r4, #20]
 8002c20:	2300      	movs	r3, #0
 8002c22:	9309      	str	r3, [sp, #36]	; 0x24
 8002c24:	2320      	movs	r3, #32
 8002c26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c2a:	2330      	movs	r3, #48	; 0x30
 8002c2c:	f04f 0b01 	mov.w	fp, #1
 8002c30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002c34:	9503      	str	r5, [sp, #12]
 8002c36:	4637      	mov	r7, r6
 8002c38:	463d      	mov	r5, r7
 8002c3a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002c3e:	b10b      	cbz	r3, 8002c44 <_svfiprintf_r+0x58>
 8002c40:	2b25      	cmp	r3, #37	; 0x25
 8002c42:	d13e      	bne.n	8002cc2 <_svfiprintf_r+0xd6>
 8002c44:	ebb7 0a06 	subs.w	sl, r7, r6
 8002c48:	d00b      	beq.n	8002c62 <_svfiprintf_r+0x76>
 8002c4a:	4653      	mov	r3, sl
 8002c4c:	4632      	mov	r2, r6
 8002c4e:	4621      	mov	r1, r4
 8002c50:	4640      	mov	r0, r8
 8002c52:	f7ff ff71 	bl	8002b38 <__ssputs_r>
 8002c56:	3001      	adds	r0, #1
 8002c58:	f000 80a4 	beq.w	8002da4 <_svfiprintf_r+0x1b8>
 8002c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c5e:	4453      	add	r3, sl
 8002c60:	9309      	str	r3, [sp, #36]	; 0x24
 8002c62:	783b      	ldrb	r3, [r7, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 809d 	beq.w	8002da4 <_svfiprintf_r+0x1b8>
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002c74:	9304      	str	r3, [sp, #16]
 8002c76:	9307      	str	r3, [sp, #28]
 8002c78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002c7c:	931a      	str	r3, [sp, #104]	; 0x68
 8002c7e:	462f      	mov	r7, r5
 8002c80:	2205      	movs	r2, #5
 8002c82:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002c86:	4850      	ldr	r0, [pc, #320]	; (8002dc8 <_svfiprintf_r+0x1dc>)
 8002c88:	f000 fa30 	bl	80030ec <memchr>
 8002c8c:	9b04      	ldr	r3, [sp, #16]
 8002c8e:	b9d0      	cbnz	r0, 8002cc6 <_svfiprintf_r+0xda>
 8002c90:	06d9      	lsls	r1, r3, #27
 8002c92:	bf44      	itt	mi
 8002c94:	2220      	movmi	r2, #32
 8002c96:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002c9a:	071a      	lsls	r2, r3, #28
 8002c9c:	bf44      	itt	mi
 8002c9e:	222b      	movmi	r2, #43	; 0x2b
 8002ca0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002ca4:	782a      	ldrb	r2, [r5, #0]
 8002ca6:	2a2a      	cmp	r2, #42	; 0x2a
 8002ca8:	d015      	beq.n	8002cd6 <_svfiprintf_r+0xea>
 8002caa:	462f      	mov	r7, r5
 8002cac:	2000      	movs	r0, #0
 8002cae:	250a      	movs	r5, #10
 8002cb0:	9a07      	ldr	r2, [sp, #28]
 8002cb2:	4639      	mov	r1, r7
 8002cb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002cb8:	3b30      	subs	r3, #48	; 0x30
 8002cba:	2b09      	cmp	r3, #9
 8002cbc:	d94d      	bls.n	8002d5a <_svfiprintf_r+0x16e>
 8002cbe:	b1b8      	cbz	r0, 8002cf0 <_svfiprintf_r+0x104>
 8002cc0:	e00f      	b.n	8002ce2 <_svfiprintf_r+0xf6>
 8002cc2:	462f      	mov	r7, r5
 8002cc4:	e7b8      	b.n	8002c38 <_svfiprintf_r+0x4c>
 8002cc6:	4a40      	ldr	r2, [pc, #256]	; (8002dc8 <_svfiprintf_r+0x1dc>)
 8002cc8:	463d      	mov	r5, r7
 8002cca:	1a80      	subs	r0, r0, r2
 8002ccc:	fa0b f000 	lsl.w	r0, fp, r0
 8002cd0:	4318      	orrs	r0, r3
 8002cd2:	9004      	str	r0, [sp, #16]
 8002cd4:	e7d3      	b.n	8002c7e <_svfiprintf_r+0x92>
 8002cd6:	9a03      	ldr	r2, [sp, #12]
 8002cd8:	1d11      	adds	r1, r2, #4
 8002cda:	6812      	ldr	r2, [r2, #0]
 8002cdc:	9103      	str	r1, [sp, #12]
 8002cde:	2a00      	cmp	r2, #0
 8002ce0:	db01      	blt.n	8002ce6 <_svfiprintf_r+0xfa>
 8002ce2:	9207      	str	r2, [sp, #28]
 8002ce4:	e004      	b.n	8002cf0 <_svfiprintf_r+0x104>
 8002ce6:	4252      	negs	r2, r2
 8002ce8:	f043 0302 	orr.w	r3, r3, #2
 8002cec:	9207      	str	r2, [sp, #28]
 8002cee:	9304      	str	r3, [sp, #16]
 8002cf0:	783b      	ldrb	r3, [r7, #0]
 8002cf2:	2b2e      	cmp	r3, #46	; 0x2e
 8002cf4:	d10c      	bne.n	8002d10 <_svfiprintf_r+0x124>
 8002cf6:	787b      	ldrb	r3, [r7, #1]
 8002cf8:	2b2a      	cmp	r3, #42	; 0x2a
 8002cfa:	d133      	bne.n	8002d64 <_svfiprintf_r+0x178>
 8002cfc:	9b03      	ldr	r3, [sp, #12]
 8002cfe:	3702      	adds	r7, #2
 8002d00:	1d1a      	adds	r2, r3, #4
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	9203      	str	r2, [sp, #12]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	bfb8      	it	lt
 8002d0a:	f04f 33ff 	movlt.w	r3, #4294967295
 8002d0e:	9305      	str	r3, [sp, #20]
 8002d10:	4d2e      	ldr	r5, [pc, #184]	; (8002dcc <_svfiprintf_r+0x1e0>)
 8002d12:	2203      	movs	r2, #3
 8002d14:	7839      	ldrb	r1, [r7, #0]
 8002d16:	4628      	mov	r0, r5
 8002d18:	f000 f9e8 	bl	80030ec <memchr>
 8002d1c:	b138      	cbz	r0, 8002d2e <_svfiprintf_r+0x142>
 8002d1e:	2340      	movs	r3, #64	; 0x40
 8002d20:	1b40      	subs	r0, r0, r5
 8002d22:	fa03 f000 	lsl.w	r0, r3, r0
 8002d26:	9b04      	ldr	r3, [sp, #16]
 8002d28:	3701      	adds	r7, #1
 8002d2a:	4303      	orrs	r3, r0
 8002d2c:	9304      	str	r3, [sp, #16]
 8002d2e:	7839      	ldrb	r1, [r7, #0]
 8002d30:	2206      	movs	r2, #6
 8002d32:	4827      	ldr	r0, [pc, #156]	; (8002dd0 <_svfiprintf_r+0x1e4>)
 8002d34:	1c7e      	adds	r6, r7, #1
 8002d36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002d3a:	f000 f9d7 	bl	80030ec <memchr>
 8002d3e:	2800      	cmp	r0, #0
 8002d40:	d038      	beq.n	8002db4 <_svfiprintf_r+0x1c8>
 8002d42:	4b24      	ldr	r3, [pc, #144]	; (8002dd4 <_svfiprintf_r+0x1e8>)
 8002d44:	bb13      	cbnz	r3, 8002d8c <_svfiprintf_r+0x1a0>
 8002d46:	9b03      	ldr	r3, [sp, #12]
 8002d48:	3307      	adds	r3, #7
 8002d4a:	f023 0307 	bic.w	r3, r3, #7
 8002d4e:	3308      	adds	r3, #8
 8002d50:	9303      	str	r3, [sp, #12]
 8002d52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d54:	444b      	add	r3, r9
 8002d56:	9309      	str	r3, [sp, #36]	; 0x24
 8002d58:	e76d      	b.n	8002c36 <_svfiprintf_r+0x4a>
 8002d5a:	fb05 3202 	mla	r2, r5, r2, r3
 8002d5e:	2001      	movs	r0, #1
 8002d60:	460f      	mov	r7, r1
 8002d62:	e7a6      	b.n	8002cb2 <_svfiprintf_r+0xc6>
 8002d64:	2300      	movs	r3, #0
 8002d66:	250a      	movs	r5, #10
 8002d68:	4619      	mov	r1, r3
 8002d6a:	3701      	adds	r7, #1
 8002d6c:	9305      	str	r3, [sp, #20]
 8002d6e:	4638      	mov	r0, r7
 8002d70:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d74:	3a30      	subs	r2, #48	; 0x30
 8002d76:	2a09      	cmp	r2, #9
 8002d78:	d903      	bls.n	8002d82 <_svfiprintf_r+0x196>
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0c8      	beq.n	8002d10 <_svfiprintf_r+0x124>
 8002d7e:	9105      	str	r1, [sp, #20]
 8002d80:	e7c6      	b.n	8002d10 <_svfiprintf_r+0x124>
 8002d82:	fb05 2101 	mla	r1, r5, r1, r2
 8002d86:	2301      	movs	r3, #1
 8002d88:	4607      	mov	r7, r0
 8002d8a:	e7f0      	b.n	8002d6e <_svfiprintf_r+0x182>
 8002d8c:	ab03      	add	r3, sp, #12
 8002d8e:	9300      	str	r3, [sp, #0]
 8002d90:	4622      	mov	r2, r4
 8002d92:	4b11      	ldr	r3, [pc, #68]	; (8002dd8 <_svfiprintf_r+0x1ec>)
 8002d94:	a904      	add	r1, sp, #16
 8002d96:	4640      	mov	r0, r8
 8002d98:	f3af 8000 	nop.w
 8002d9c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002da0:	4681      	mov	r9, r0
 8002da2:	d1d6      	bne.n	8002d52 <_svfiprintf_r+0x166>
 8002da4:	89a3      	ldrh	r3, [r4, #12]
 8002da6:	065b      	lsls	r3, r3, #25
 8002da8:	f53f af35 	bmi.w	8002c16 <_svfiprintf_r+0x2a>
 8002dac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002dae:	b01d      	add	sp, #116	; 0x74
 8002db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002db4:	ab03      	add	r3, sp, #12
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	4622      	mov	r2, r4
 8002dba:	4b07      	ldr	r3, [pc, #28]	; (8002dd8 <_svfiprintf_r+0x1ec>)
 8002dbc:	a904      	add	r1, sp, #16
 8002dbe:	4640      	mov	r0, r8
 8002dc0:	f000 f882 	bl	8002ec8 <_printf_i>
 8002dc4:	e7ea      	b.n	8002d9c <_svfiprintf_r+0x1b0>
 8002dc6:	bf00      	nop
 8002dc8:	08003388 	.word	0x08003388
 8002dcc:	0800338e 	.word	0x0800338e
 8002dd0:	08003392 	.word	0x08003392
 8002dd4:	00000000 	.word	0x00000000
 8002dd8:	08002b39 	.word	0x08002b39

08002ddc <_printf_common>:
 8002ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002de0:	4691      	mov	r9, r2
 8002de2:	461f      	mov	r7, r3
 8002de4:	688a      	ldr	r2, [r1, #8]
 8002de6:	690b      	ldr	r3, [r1, #16]
 8002de8:	4606      	mov	r6, r0
 8002dea:	4293      	cmp	r3, r2
 8002dec:	bfb8      	it	lt
 8002dee:	4613      	movlt	r3, r2
 8002df0:	f8c9 3000 	str.w	r3, [r9]
 8002df4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002df8:	460c      	mov	r4, r1
 8002dfa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002dfe:	b112      	cbz	r2, 8002e06 <_printf_common+0x2a>
 8002e00:	3301      	adds	r3, #1
 8002e02:	f8c9 3000 	str.w	r3, [r9]
 8002e06:	6823      	ldr	r3, [r4, #0]
 8002e08:	0699      	lsls	r1, r3, #26
 8002e0a:	bf42      	ittt	mi
 8002e0c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002e10:	3302      	addmi	r3, #2
 8002e12:	f8c9 3000 	strmi.w	r3, [r9]
 8002e16:	6825      	ldr	r5, [r4, #0]
 8002e18:	f015 0506 	ands.w	r5, r5, #6
 8002e1c:	d107      	bne.n	8002e2e <_printf_common+0x52>
 8002e1e:	f104 0a19 	add.w	sl, r4, #25
 8002e22:	68e3      	ldr	r3, [r4, #12]
 8002e24:	f8d9 2000 	ldr.w	r2, [r9]
 8002e28:	1a9b      	subs	r3, r3, r2
 8002e2a:	42ab      	cmp	r3, r5
 8002e2c:	dc29      	bgt.n	8002e82 <_printf_common+0xa6>
 8002e2e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002e32:	6822      	ldr	r2, [r4, #0]
 8002e34:	3300      	adds	r3, #0
 8002e36:	bf18      	it	ne
 8002e38:	2301      	movne	r3, #1
 8002e3a:	0692      	lsls	r2, r2, #26
 8002e3c:	d42e      	bmi.n	8002e9c <_printf_common+0xc0>
 8002e3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e42:	4639      	mov	r1, r7
 8002e44:	4630      	mov	r0, r6
 8002e46:	47c0      	blx	r8
 8002e48:	3001      	adds	r0, #1
 8002e4a:	d021      	beq.n	8002e90 <_printf_common+0xb4>
 8002e4c:	6823      	ldr	r3, [r4, #0]
 8002e4e:	68e5      	ldr	r5, [r4, #12]
 8002e50:	f003 0306 	and.w	r3, r3, #6
 8002e54:	2b04      	cmp	r3, #4
 8002e56:	bf18      	it	ne
 8002e58:	2500      	movne	r5, #0
 8002e5a:	f8d9 2000 	ldr.w	r2, [r9]
 8002e5e:	f04f 0900 	mov.w	r9, #0
 8002e62:	bf08      	it	eq
 8002e64:	1aad      	subeq	r5, r5, r2
 8002e66:	68a3      	ldr	r3, [r4, #8]
 8002e68:	6922      	ldr	r2, [r4, #16]
 8002e6a:	bf08      	it	eq
 8002e6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e70:	4293      	cmp	r3, r2
 8002e72:	bfc4      	itt	gt
 8002e74:	1a9b      	subgt	r3, r3, r2
 8002e76:	18ed      	addgt	r5, r5, r3
 8002e78:	341a      	adds	r4, #26
 8002e7a:	454d      	cmp	r5, r9
 8002e7c:	d11a      	bne.n	8002eb4 <_printf_common+0xd8>
 8002e7e:	2000      	movs	r0, #0
 8002e80:	e008      	b.n	8002e94 <_printf_common+0xb8>
 8002e82:	2301      	movs	r3, #1
 8002e84:	4652      	mov	r2, sl
 8002e86:	4639      	mov	r1, r7
 8002e88:	4630      	mov	r0, r6
 8002e8a:	47c0      	blx	r8
 8002e8c:	3001      	adds	r0, #1
 8002e8e:	d103      	bne.n	8002e98 <_printf_common+0xbc>
 8002e90:	f04f 30ff 	mov.w	r0, #4294967295
 8002e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e98:	3501      	adds	r5, #1
 8002e9a:	e7c2      	b.n	8002e22 <_printf_common+0x46>
 8002e9c:	2030      	movs	r0, #48	; 0x30
 8002e9e:	18e1      	adds	r1, r4, r3
 8002ea0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002ea4:	1c5a      	adds	r2, r3, #1
 8002ea6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002eaa:	4422      	add	r2, r4
 8002eac:	3302      	adds	r3, #2
 8002eae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002eb2:	e7c4      	b.n	8002e3e <_printf_common+0x62>
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	4622      	mov	r2, r4
 8002eb8:	4639      	mov	r1, r7
 8002eba:	4630      	mov	r0, r6
 8002ebc:	47c0      	blx	r8
 8002ebe:	3001      	adds	r0, #1
 8002ec0:	d0e6      	beq.n	8002e90 <_printf_common+0xb4>
 8002ec2:	f109 0901 	add.w	r9, r9, #1
 8002ec6:	e7d8      	b.n	8002e7a <_printf_common+0x9e>

08002ec8 <_printf_i>:
 8002ec8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ecc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002ed0:	460c      	mov	r4, r1
 8002ed2:	7e09      	ldrb	r1, [r1, #24]
 8002ed4:	b085      	sub	sp, #20
 8002ed6:	296e      	cmp	r1, #110	; 0x6e
 8002ed8:	4617      	mov	r7, r2
 8002eda:	4606      	mov	r6, r0
 8002edc:	4698      	mov	r8, r3
 8002ede:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002ee0:	f000 80b3 	beq.w	800304a <_printf_i+0x182>
 8002ee4:	d822      	bhi.n	8002f2c <_printf_i+0x64>
 8002ee6:	2963      	cmp	r1, #99	; 0x63
 8002ee8:	d036      	beq.n	8002f58 <_printf_i+0x90>
 8002eea:	d80a      	bhi.n	8002f02 <_printf_i+0x3a>
 8002eec:	2900      	cmp	r1, #0
 8002eee:	f000 80b9 	beq.w	8003064 <_printf_i+0x19c>
 8002ef2:	2958      	cmp	r1, #88	; 0x58
 8002ef4:	f000 8083 	beq.w	8002ffe <_printf_i+0x136>
 8002ef8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002efc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002f00:	e032      	b.n	8002f68 <_printf_i+0xa0>
 8002f02:	2964      	cmp	r1, #100	; 0x64
 8002f04:	d001      	beq.n	8002f0a <_printf_i+0x42>
 8002f06:	2969      	cmp	r1, #105	; 0x69
 8002f08:	d1f6      	bne.n	8002ef8 <_printf_i+0x30>
 8002f0a:	6820      	ldr	r0, [r4, #0]
 8002f0c:	6813      	ldr	r3, [r2, #0]
 8002f0e:	0605      	lsls	r5, r0, #24
 8002f10:	f103 0104 	add.w	r1, r3, #4
 8002f14:	d52a      	bpl.n	8002f6c <_printf_i+0xa4>
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6011      	str	r1, [r2, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	da03      	bge.n	8002f26 <_printf_i+0x5e>
 8002f1e:	222d      	movs	r2, #45	; 0x2d
 8002f20:	425b      	negs	r3, r3
 8002f22:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002f26:	486f      	ldr	r0, [pc, #444]	; (80030e4 <_printf_i+0x21c>)
 8002f28:	220a      	movs	r2, #10
 8002f2a:	e039      	b.n	8002fa0 <_printf_i+0xd8>
 8002f2c:	2973      	cmp	r1, #115	; 0x73
 8002f2e:	f000 809d 	beq.w	800306c <_printf_i+0x1a4>
 8002f32:	d808      	bhi.n	8002f46 <_printf_i+0x7e>
 8002f34:	296f      	cmp	r1, #111	; 0x6f
 8002f36:	d020      	beq.n	8002f7a <_printf_i+0xb2>
 8002f38:	2970      	cmp	r1, #112	; 0x70
 8002f3a:	d1dd      	bne.n	8002ef8 <_printf_i+0x30>
 8002f3c:	6823      	ldr	r3, [r4, #0]
 8002f3e:	f043 0320 	orr.w	r3, r3, #32
 8002f42:	6023      	str	r3, [r4, #0]
 8002f44:	e003      	b.n	8002f4e <_printf_i+0x86>
 8002f46:	2975      	cmp	r1, #117	; 0x75
 8002f48:	d017      	beq.n	8002f7a <_printf_i+0xb2>
 8002f4a:	2978      	cmp	r1, #120	; 0x78
 8002f4c:	d1d4      	bne.n	8002ef8 <_printf_i+0x30>
 8002f4e:	2378      	movs	r3, #120	; 0x78
 8002f50:	4865      	ldr	r0, [pc, #404]	; (80030e8 <_printf_i+0x220>)
 8002f52:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002f56:	e055      	b.n	8003004 <_printf_i+0x13c>
 8002f58:	6813      	ldr	r3, [r2, #0]
 8002f5a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f5e:	1d19      	adds	r1, r3, #4
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6011      	str	r1, [r2, #0]
 8002f64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e08c      	b.n	8003086 <_printf_i+0x1be>
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002f72:	6011      	str	r1, [r2, #0]
 8002f74:	bf18      	it	ne
 8002f76:	b21b      	sxthne	r3, r3
 8002f78:	e7cf      	b.n	8002f1a <_printf_i+0x52>
 8002f7a:	6813      	ldr	r3, [r2, #0]
 8002f7c:	6825      	ldr	r5, [r4, #0]
 8002f7e:	1d18      	adds	r0, r3, #4
 8002f80:	6010      	str	r0, [r2, #0]
 8002f82:	0628      	lsls	r0, r5, #24
 8002f84:	d501      	bpl.n	8002f8a <_printf_i+0xc2>
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	e002      	b.n	8002f90 <_printf_i+0xc8>
 8002f8a:	0668      	lsls	r0, r5, #25
 8002f8c:	d5fb      	bpl.n	8002f86 <_printf_i+0xbe>
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	296f      	cmp	r1, #111	; 0x6f
 8002f92:	bf14      	ite	ne
 8002f94:	220a      	movne	r2, #10
 8002f96:	2208      	moveq	r2, #8
 8002f98:	4852      	ldr	r0, [pc, #328]	; (80030e4 <_printf_i+0x21c>)
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002fa0:	6865      	ldr	r5, [r4, #4]
 8002fa2:	2d00      	cmp	r5, #0
 8002fa4:	60a5      	str	r5, [r4, #8]
 8002fa6:	f2c0 8095 	blt.w	80030d4 <_printf_i+0x20c>
 8002faa:	6821      	ldr	r1, [r4, #0]
 8002fac:	f021 0104 	bic.w	r1, r1, #4
 8002fb0:	6021      	str	r1, [r4, #0]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d13d      	bne.n	8003032 <_printf_i+0x16a>
 8002fb6:	2d00      	cmp	r5, #0
 8002fb8:	f040 808e 	bne.w	80030d8 <_printf_i+0x210>
 8002fbc:	4665      	mov	r5, ip
 8002fbe:	2a08      	cmp	r2, #8
 8002fc0:	d10b      	bne.n	8002fda <_printf_i+0x112>
 8002fc2:	6823      	ldr	r3, [r4, #0]
 8002fc4:	07db      	lsls	r3, r3, #31
 8002fc6:	d508      	bpl.n	8002fda <_printf_i+0x112>
 8002fc8:	6923      	ldr	r3, [r4, #16]
 8002fca:	6862      	ldr	r2, [r4, #4]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	bfde      	ittt	le
 8002fd0:	2330      	movle	r3, #48	; 0x30
 8002fd2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002fd6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002fda:	ebac 0305 	sub.w	r3, ip, r5
 8002fde:	6123      	str	r3, [r4, #16]
 8002fe0:	f8cd 8000 	str.w	r8, [sp]
 8002fe4:	463b      	mov	r3, r7
 8002fe6:	aa03      	add	r2, sp, #12
 8002fe8:	4621      	mov	r1, r4
 8002fea:	4630      	mov	r0, r6
 8002fec:	f7ff fef6 	bl	8002ddc <_printf_common>
 8002ff0:	3001      	adds	r0, #1
 8002ff2:	d14d      	bne.n	8003090 <_printf_i+0x1c8>
 8002ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ff8:	b005      	add	sp, #20
 8002ffa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002ffe:	4839      	ldr	r0, [pc, #228]	; (80030e4 <_printf_i+0x21c>)
 8003000:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003004:	6813      	ldr	r3, [r2, #0]
 8003006:	6821      	ldr	r1, [r4, #0]
 8003008:	1d1d      	adds	r5, r3, #4
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	6015      	str	r5, [r2, #0]
 800300e:	060a      	lsls	r2, r1, #24
 8003010:	d50b      	bpl.n	800302a <_printf_i+0x162>
 8003012:	07ca      	lsls	r2, r1, #31
 8003014:	bf44      	itt	mi
 8003016:	f041 0120 	orrmi.w	r1, r1, #32
 800301a:	6021      	strmi	r1, [r4, #0]
 800301c:	b91b      	cbnz	r3, 8003026 <_printf_i+0x15e>
 800301e:	6822      	ldr	r2, [r4, #0]
 8003020:	f022 0220 	bic.w	r2, r2, #32
 8003024:	6022      	str	r2, [r4, #0]
 8003026:	2210      	movs	r2, #16
 8003028:	e7b7      	b.n	8002f9a <_printf_i+0xd2>
 800302a:	064d      	lsls	r5, r1, #25
 800302c:	bf48      	it	mi
 800302e:	b29b      	uxthmi	r3, r3
 8003030:	e7ef      	b.n	8003012 <_printf_i+0x14a>
 8003032:	4665      	mov	r5, ip
 8003034:	fbb3 f1f2 	udiv	r1, r3, r2
 8003038:	fb02 3311 	mls	r3, r2, r1, r3
 800303c:	5cc3      	ldrb	r3, [r0, r3]
 800303e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003042:	460b      	mov	r3, r1
 8003044:	2900      	cmp	r1, #0
 8003046:	d1f5      	bne.n	8003034 <_printf_i+0x16c>
 8003048:	e7b9      	b.n	8002fbe <_printf_i+0xf6>
 800304a:	6813      	ldr	r3, [r2, #0]
 800304c:	6825      	ldr	r5, [r4, #0]
 800304e:	1d18      	adds	r0, r3, #4
 8003050:	6961      	ldr	r1, [r4, #20]
 8003052:	6010      	str	r0, [r2, #0]
 8003054:	0628      	lsls	r0, r5, #24
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	d501      	bpl.n	800305e <_printf_i+0x196>
 800305a:	6019      	str	r1, [r3, #0]
 800305c:	e002      	b.n	8003064 <_printf_i+0x19c>
 800305e:	066a      	lsls	r2, r5, #25
 8003060:	d5fb      	bpl.n	800305a <_printf_i+0x192>
 8003062:	8019      	strh	r1, [r3, #0]
 8003064:	2300      	movs	r3, #0
 8003066:	4665      	mov	r5, ip
 8003068:	6123      	str	r3, [r4, #16]
 800306a:	e7b9      	b.n	8002fe0 <_printf_i+0x118>
 800306c:	6813      	ldr	r3, [r2, #0]
 800306e:	1d19      	adds	r1, r3, #4
 8003070:	6011      	str	r1, [r2, #0]
 8003072:	681d      	ldr	r5, [r3, #0]
 8003074:	6862      	ldr	r2, [r4, #4]
 8003076:	2100      	movs	r1, #0
 8003078:	4628      	mov	r0, r5
 800307a:	f000 f837 	bl	80030ec <memchr>
 800307e:	b108      	cbz	r0, 8003084 <_printf_i+0x1bc>
 8003080:	1b40      	subs	r0, r0, r5
 8003082:	6060      	str	r0, [r4, #4]
 8003084:	6863      	ldr	r3, [r4, #4]
 8003086:	6123      	str	r3, [r4, #16]
 8003088:	2300      	movs	r3, #0
 800308a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800308e:	e7a7      	b.n	8002fe0 <_printf_i+0x118>
 8003090:	6923      	ldr	r3, [r4, #16]
 8003092:	462a      	mov	r2, r5
 8003094:	4639      	mov	r1, r7
 8003096:	4630      	mov	r0, r6
 8003098:	47c0      	blx	r8
 800309a:	3001      	adds	r0, #1
 800309c:	d0aa      	beq.n	8002ff4 <_printf_i+0x12c>
 800309e:	6823      	ldr	r3, [r4, #0]
 80030a0:	079b      	lsls	r3, r3, #30
 80030a2:	d413      	bmi.n	80030cc <_printf_i+0x204>
 80030a4:	68e0      	ldr	r0, [r4, #12]
 80030a6:	9b03      	ldr	r3, [sp, #12]
 80030a8:	4298      	cmp	r0, r3
 80030aa:	bfb8      	it	lt
 80030ac:	4618      	movlt	r0, r3
 80030ae:	e7a3      	b.n	8002ff8 <_printf_i+0x130>
 80030b0:	2301      	movs	r3, #1
 80030b2:	464a      	mov	r2, r9
 80030b4:	4639      	mov	r1, r7
 80030b6:	4630      	mov	r0, r6
 80030b8:	47c0      	blx	r8
 80030ba:	3001      	adds	r0, #1
 80030bc:	d09a      	beq.n	8002ff4 <_printf_i+0x12c>
 80030be:	3501      	adds	r5, #1
 80030c0:	68e3      	ldr	r3, [r4, #12]
 80030c2:	9a03      	ldr	r2, [sp, #12]
 80030c4:	1a9b      	subs	r3, r3, r2
 80030c6:	42ab      	cmp	r3, r5
 80030c8:	dcf2      	bgt.n	80030b0 <_printf_i+0x1e8>
 80030ca:	e7eb      	b.n	80030a4 <_printf_i+0x1dc>
 80030cc:	2500      	movs	r5, #0
 80030ce:	f104 0919 	add.w	r9, r4, #25
 80030d2:	e7f5      	b.n	80030c0 <_printf_i+0x1f8>
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1ac      	bne.n	8003032 <_printf_i+0x16a>
 80030d8:	7803      	ldrb	r3, [r0, #0]
 80030da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80030e2:	e76c      	b.n	8002fbe <_printf_i+0xf6>
 80030e4:	08003399 	.word	0x08003399
 80030e8:	080033aa 	.word	0x080033aa

080030ec <memchr>:
 80030ec:	b510      	push	{r4, lr}
 80030ee:	b2c9      	uxtb	r1, r1
 80030f0:	4402      	add	r2, r0
 80030f2:	4290      	cmp	r0, r2
 80030f4:	4603      	mov	r3, r0
 80030f6:	d101      	bne.n	80030fc <memchr+0x10>
 80030f8:	2300      	movs	r3, #0
 80030fa:	e003      	b.n	8003104 <memchr+0x18>
 80030fc:	781c      	ldrb	r4, [r3, #0]
 80030fe:	3001      	adds	r0, #1
 8003100:	428c      	cmp	r4, r1
 8003102:	d1f6      	bne.n	80030f2 <memchr+0x6>
 8003104:	4618      	mov	r0, r3
 8003106:	bd10      	pop	{r4, pc}

08003108 <memcpy>:
 8003108:	b510      	push	{r4, lr}
 800310a:	1e43      	subs	r3, r0, #1
 800310c:	440a      	add	r2, r1
 800310e:	4291      	cmp	r1, r2
 8003110:	d100      	bne.n	8003114 <memcpy+0xc>
 8003112:	bd10      	pop	{r4, pc}
 8003114:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003118:	f803 4f01 	strb.w	r4, [r3, #1]!
 800311c:	e7f7      	b.n	800310e <memcpy+0x6>

0800311e <memmove>:
 800311e:	4288      	cmp	r0, r1
 8003120:	b510      	push	{r4, lr}
 8003122:	eb01 0302 	add.w	r3, r1, r2
 8003126:	d807      	bhi.n	8003138 <memmove+0x1a>
 8003128:	1e42      	subs	r2, r0, #1
 800312a:	4299      	cmp	r1, r3
 800312c:	d00a      	beq.n	8003144 <memmove+0x26>
 800312e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003132:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003136:	e7f8      	b.n	800312a <memmove+0xc>
 8003138:	4283      	cmp	r3, r0
 800313a:	d9f5      	bls.n	8003128 <memmove+0xa>
 800313c:	1881      	adds	r1, r0, r2
 800313e:	1ad2      	subs	r2, r2, r3
 8003140:	42d3      	cmn	r3, r2
 8003142:	d100      	bne.n	8003146 <memmove+0x28>
 8003144:	bd10      	pop	{r4, pc}
 8003146:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800314a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800314e:	e7f7      	b.n	8003140 <memmove+0x22>

08003150 <_free_r>:
 8003150:	b538      	push	{r3, r4, r5, lr}
 8003152:	4605      	mov	r5, r0
 8003154:	2900      	cmp	r1, #0
 8003156:	d043      	beq.n	80031e0 <_free_r+0x90>
 8003158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800315c:	1f0c      	subs	r4, r1, #4
 800315e:	2b00      	cmp	r3, #0
 8003160:	bfb8      	it	lt
 8003162:	18e4      	addlt	r4, r4, r3
 8003164:	f000 f8d0 	bl	8003308 <__malloc_lock>
 8003168:	4a1e      	ldr	r2, [pc, #120]	; (80031e4 <_free_r+0x94>)
 800316a:	6813      	ldr	r3, [r2, #0]
 800316c:	4610      	mov	r0, r2
 800316e:	b933      	cbnz	r3, 800317e <_free_r+0x2e>
 8003170:	6063      	str	r3, [r4, #4]
 8003172:	6014      	str	r4, [r2, #0]
 8003174:	4628      	mov	r0, r5
 8003176:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800317a:	f000 b8c6 	b.w	800330a <__malloc_unlock>
 800317e:	42a3      	cmp	r3, r4
 8003180:	d90b      	bls.n	800319a <_free_r+0x4a>
 8003182:	6821      	ldr	r1, [r4, #0]
 8003184:	1862      	adds	r2, r4, r1
 8003186:	4293      	cmp	r3, r2
 8003188:	bf01      	itttt	eq
 800318a:	681a      	ldreq	r2, [r3, #0]
 800318c:	685b      	ldreq	r3, [r3, #4]
 800318e:	1852      	addeq	r2, r2, r1
 8003190:	6022      	streq	r2, [r4, #0]
 8003192:	6063      	str	r3, [r4, #4]
 8003194:	6004      	str	r4, [r0, #0]
 8003196:	e7ed      	b.n	8003174 <_free_r+0x24>
 8003198:	4613      	mov	r3, r2
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	b10a      	cbz	r2, 80031a2 <_free_r+0x52>
 800319e:	42a2      	cmp	r2, r4
 80031a0:	d9fa      	bls.n	8003198 <_free_r+0x48>
 80031a2:	6819      	ldr	r1, [r3, #0]
 80031a4:	1858      	adds	r0, r3, r1
 80031a6:	42a0      	cmp	r0, r4
 80031a8:	d10b      	bne.n	80031c2 <_free_r+0x72>
 80031aa:	6820      	ldr	r0, [r4, #0]
 80031ac:	4401      	add	r1, r0
 80031ae:	1858      	adds	r0, r3, r1
 80031b0:	4282      	cmp	r2, r0
 80031b2:	6019      	str	r1, [r3, #0]
 80031b4:	d1de      	bne.n	8003174 <_free_r+0x24>
 80031b6:	6810      	ldr	r0, [r2, #0]
 80031b8:	6852      	ldr	r2, [r2, #4]
 80031ba:	4401      	add	r1, r0
 80031bc:	6019      	str	r1, [r3, #0]
 80031be:	605a      	str	r2, [r3, #4]
 80031c0:	e7d8      	b.n	8003174 <_free_r+0x24>
 80031c2:	d902      	bls.n	80031ca <_free_r+0x7a>
 80031c4:	230c      	movs	r3, #12
 80031c6:	602b      	str	r3, [r5, #0]
 80031c8:	e7d4      	b.n	8003174 <_free_r+0x24>
 80031ca:	6820      	ldr	r0, [r4, #0]
 80031cc:	1821      	adds	r1, r4, r0
 80031ce:	428a      	cmp	r2, r1
 80031d0:	bf01      	itttt	eq
 80031d2:	6811      	ldreq	r1, [r2, #0]
 80031d4:	6852      	ldreq	r2, [r2, #4]
 80031d6:	1809      	addeq	r1, r1, r0
 80031d8:	6021      	streq	r1, [r4, #0]
 80031da:	6062      	str	r2, [r4, #4]
 80031dc:	605c      	str	r4, [r3, #4]
 80031de:	e7c9      	b.n	8003174 <_free_r+0x24>
 80031e0:	bd38      	pop	{r3, r4, r5, pc}
 80031e2:	bf00      	nop
 80031e4:	20000094 	.word	0x20000094

080031e8 <_malloc_r>:
 80031e8:	b570      	push	{r4, r5, r6, lr}
 80031ea:	1ccd      	adds	r5, r1, #3
 80031ec:	f025 0503 	bic.w	r5, r5, #3
 80031f0:	3508      	adds	r5, #8
 80031f2:	2d0c      	cmp	r5, #12
 80031f4:	bf38      	it	cc
 80031f6:	250c      	movcc	r5, #12
 80031f8:	2d00      	cmp	r5, #0
 80031fa:	4606      	mov	r6, r0
 80031fc:	db01      	blt.n	8003202 <_malloc_r+0x1a>
 80031fe:	42a9      	cmp	r1, r5
 8003200:	d903      	bls.n	800320a <_malloc_r+0x22>
 8003202:	230c      	movs	r3, #12
 8003204:	6033      	str	r3, [r6, #0]
 8003206:	2000      	movs	r0, #0
 8003208:	bd70      	pop	{r4, r5, r6, pc}
 800320a:	f000 f87d 	bl	8003308 <__malloc_lock>
 800320e:	4a21      	ldr	r2, [pc, #132]	; (8003294 <_malloc_r+0xac>)
 8003210:	6814      	ldr	r4, [r2, #0]
 8003212:	4621      	mov	r1, r4
 8003214:	b991      	cbnz	r1, 800323c <_malloc_r+0x54>
 8003216:	4c20      	ldr	r4, [pc, #128]	; (8003298 <_malloc_r+0xb0>)
 8003218:	6823      	ldr	r3, [r4, #0]
 800321a:	b91b      	cbnz	r3, 8003224 <_malloc_r+0x3c>
 800321c:	4630      	mov	r0, r6
 800321e:	f000 f863 	bl	80032e8 <_sbrk_r>
 8003222:	6020      	str	r0, [r4, #0]
 8003224:	4629      	mov	r1, r5
 8003226:	4630      	mov	r0, r6
 8003228:	f000 f85e 	bl	80032e8 <_sbrk_r>
 800322c:	1c43      	adds	r3, r0, #1
 800322e:	d124      	bne.n	800327a <_malloc_r+0x92>
 8003230:	230c      	movs	r3, #12
 8003232:	4630      	mov	r0, r6
 8003234:	6033      	str	r3, [r6, #0]
 8003236:	f000 f868 	bl	800330a <__malloc_unlock>
 800323a:	e7e4      	b.n	8003206 <_malloc_r+0x1e>
 800323c:	680b      	ldr	r3, [r1, #0]
 800323e:	1b5b      	subs	r3, r3, r5
 8003240:	d418      	bmi.n	8003274 <_malloc_r+0x8c>
 8003242:	2b0b      	cmp	r3, #11
 8003244:	d90f      	bls.n	8003266 <_malloc_r+0x7e>
 8003246:	600b      	str	r3, [r1, #0]
 8003248:	18cc      	adds	r4, r1, r3
 800324a:	50cd      	str	r5, [r1, r3]
 800324c:	4630      	mov	r0, r6
 800324e:	f000 f85c 	bl	800330a <__malloc_unlock>
 8003252:	f104 000b 	add.w	r0, r4, #11
 8003256:	1d23      	adds	r3, r4, #4
 8003258:	f020 0007 	bic.w	r0, r0, #7
 800325c:	1ac3      	subs	r3, r0, r3
 800325e:	d0d3      	beq.n	8003208 <_malloc_r+0x20>
 8003260:	425a      	negs	r2, r3
 8003262:	50e2      	str	r2, [r4, r3]
 8003264:	e7d0      	b.n	8003208 <_malloc_r+0x20>
 8003266:	684b      	ldr	r3, [r1, #4]
 8003268:	428c      	cmp	r4, r1
 800326a:	bf16      	itet	ne
 800326c:	6063      	strne	r3, [r4, #4]
 800326e:	6013      	streq	r3, [r2, #0]
 8003270:	460c      	movne	r4, r1
 8003272:	e7eb      	b.n	800324c <_malloc_r+0x64>
 8003274:	460c      	mov	r4, r1
 8003276:	6849      	ldr	r1, [r1, #4]
 8003278:	e7cc      	b.n	8003214 <_malloc_r+0x2c>
 800327a:	1cc4      	adds	r4, r0, #3
 800327c:	f024 0403 	bic.w	r4, r4, #3
 8003280:	42a0      	cmp	r0, r4
 8003282:	d005      	beq.n	8003290 <_malloc_r+0xa8>
 8003284:	1a21      	subs	r1, r4, r0
 8003286:	4630      	mov	r0, r6
 8003288:	f000 f82e 	bl	80032e8 <_sbrk_r>
 800328c:	3001      	adds	r0, #1
 800328e:	d0cf      	beq.n	8003230 <_malloc_r+0x48>
 8003290:	6025      	str	r5, [r4, #0]
 8003292:	e7db      	b.n	800324c <_malloc_r+0x64>
 8003294:	20000094 	.word	0x20000094
 8003298:	20000098 	.word	0x20000098

0800329c <_realloc_r>:
 800329c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800329e:	4607      	mov	r7, r0
 80032a0:	4614      	mov	r4, r2
 80032a2:	460e      	mov	r6, r1
 80032a4:	b921      	cbnz	r1, 80032b0 <_realloc_r+0x14>
 80032a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80032aa:	4611      	mov	r1, r2
 80032ac:	f7ff bf9c 	b.w	80031e8 <_malloc_r>
 80032b0:	b922      	cbnz	r2, 80032bc <_realloc_r+0x20>
 80032b2:	f7ff ff4d 	bl	8003150 <_free_r>
 80032b6:	4625      	mov	r5, r4
 80032b8:	4628      	mov	r0, r5
 80032ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032bc:	f000 f826 	bl	800330c <_malloc_usable_size_r>
 80032c0:	42a0      	cmp	r0, r4
 80032c2:	d20f      	bcs.n	80032e4 <_realloc_r+0x48>
 80032c4:	4621      	mov	r1, r4
 80032c6:	4638      	mov	r0, r7
 80032c8:	f7ff ff8e 	bl	80031e8 <_malloc_r>
 80032cc:	4605      	mov	r5, r0
 80032ce:	2800      	cmp	r0, #0
 80032d0:	d0f2      	beq.n	80032b8 <_realloc_r+0x1c>
 80032d2:	4631      	mov	r1, r6
 80032d4:	4622      	mov	r2, r4
 80032d6:	f7ff ff17 	bl	8003108 <memcpy>
 80032da:	4631      	mov	r1, r6
 80032dc:	4638      	mov	r0, r7
 80032de:	f7ff ff37 	bl	8003150 <_free_r>
 80032e2:	e7e9      	b.n	80032b8 <_realloc_r+0x1c>
 80032e4:	4635      	mov	r5, r6
 80032e6:	e7e7      	b.n	80032b8 <_realloc_r+0x1c>

080032e8 <_sbrk_r>:
 80032e8:	b538      	push	{r3, r4, r5, lr}
 80032ea:	2300      	movs	r3, #0
 80032ec:	4c05      	ldr	r4, [pc, #20]	; (8003304 <_sbrk_r+0x1c>)
 80032ee:	4605      	mov	r5, r0
 80032f0:	4608      	mov	r0, r1
 80032f2:	6023      	str	r3, [r4, #0]
 80032f4:	f7fd fd40 	bl	8000d78 <_sbrk>
 80032f8:	1c43      	adds	r3, r0, #1
 80032fa:	d102      	bne.n	8003302 <_sbrk_r+0x1a>
 80032fc:	6823      	ldr	r3, [r4, #0]
 80032fe:	b103      	cbz	r3, 8003302 <_sbrk_r+0x1a>
 8003300:	602b      	str	r3, [r5, #0]
 8003302:	bd38      	pop	{r3, r4, r5, pc}
 8003304:	2000012c 	.word	0x2000012c

08003308 <__malloc_lock>:
 8003308:	4770      	bx	lr

0800330a <__malloc_unlock>:
 800330a:	4770      	bx	lr

0800330c <_malloc_usable_size_r>:
 800330c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003310:	1f18      	subs	r0, r3, #4
 8003312:	2b00      	cmp	r3, #0
 8003314:	bfbc      	itt	lt
 8003316:	580b      	ldrlt	r3, [r1, r0]
 8003318:	18c0      	addlt	r0, r0, r3
 800331a:	4770      	bx	lr

0800331c <_init>:
 800331c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800331e:	bf00      	nop
 8003320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003322:	bc08      	pop	{r3}
 8003324:	469e      	mov	lr, r3
 8003326:	4770      	bx	lr

08003328 <_fini>:
 8003328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800332a:	bf00      	nop
 800332c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800332e:	bc08      	pop	{r3}
 8003330:	469e      	mov	lr, r3
 8003332:	4770      	bx	lr
