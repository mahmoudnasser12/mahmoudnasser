
uart_float.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004584  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  08004698  08004698  00014698  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049b8  080049b8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080049b8  080049b8  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049b8  080049b8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049b8  080049b8  000149b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049bc  080049bc  000149bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  080049c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  200001dc  08004b9c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000250  08004b9c  00020250  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006bb5  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000014fd  00000000  00000000  00026dba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006b8  00000000  00000000  000282b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000630  00000000  00000000  00028970  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017502  00000000  00000000  00028fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005da1  00000000  00000000  000404a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080ddf  00000000  00000000  00046243  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c7022  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027bc  00000000  00000000  000c70a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800467c 	.word	0x0800467c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	0800467c 	.word	0x0800467c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <_write>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file , char *ptr,int len){
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]

	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	f04f 33ff 	mov.w	r3, #4294967295
 8000a9c:	68b9      	ldr	r1, [r7, #8]
 8000a9e:	4804      	ldr	r0, [pc, #16]	; (8000ab0 <_write+0x28>)
 8000aa0:	f001 f929 	bl	8001cf6 <HAL_UART_Transmit>
	return len;
 8000aa4:	687b      	ldr	r3, [r7, #4]
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20000204 	.word	0x20000204

08000ab4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab4:	b590      	push	{r4, r7, lr}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
int counter = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	607b      	str	r3, [r7, #4]
float x_float = 12.5f;
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <main+0x4c>)
 8000ac0:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac2:	f000 f9f5 	bl	8000eb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac6:	f000 f821 	bl	8000b0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aca:	f000 f885 	bl	8000bd8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ace:	f000 f859 	bl	8000b84 <MX_USART2_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  printf("current number is %d \r\n",counter++);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	1c5a      	adds	r2, r3, #1
 8000ad6:	607a      	str	r2, [r7, #4]
 8000ad8:	4619      	mov	r1, r3
 8000ada:	480a      	ldr	r0, [pc, #40]	; (8000b04 <main+0x50>)
 8000adc:	f001 fef8 	bl	80028d0 <iprintf>
	  printf("float number is %f\r\n",x_float);
 8000ae0:	6838      	ldr	r0, [r7, #0]
 8000ae2:	f7ff fca1 	bl	8000428 <__aeabi_f2d>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	460c      	mov	r4, r1
 8000aea:	461a      	mov	r2, r3
 8000aec:	4623      	mov	r3, r4
 8000aee:	4806      	ldr	r0, [pc, #24]	; (8000b08 <main+0x54>)
 8000af0:	f001 feee 	bl	80028d0 <iprintf>
	  HAL_Delay(500);
 8000af4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000af8:	f000 fa3c 	bl	8000f74 <HAL_Delay>
	  printf("current number is %d \r\n",counter++);
 8000afc:	e7e9      	b.n	8000ad2 <main+0x1e>
 8000afe:	bf00      	nop
 8000b00:	41480000 	.word	0x41480000
 8000b04:	08004698 	.word	0x08004698
 8000b08:	080046b0 	.word	0x080046b0

08000b0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b090      	sub	sp, #64	; 0x40
 8000b10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b12:	f107 0318 	add.w	r3, r7, #24
 8000b16:	2228      	movs	r2, #40	; 0x28
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f001 fa80 	bl	8002020 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b32:	2301      	movs	r3, #1
 8000b34:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b36:	2310      	movs	r3, #16
 8000b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b3e:	f107 0318 	add.w	r3, r7, #24
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 fc6e 	bl	8001424 <HAL_RCC_OscConfig>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000b4e:	f000 f859 	bl	8000c04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b52:	230f      	movs	r3, #15
 8000b54:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 feda 	bl	8001924 <HAL_RCC_ClockConfig>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b76:	f000 f845 	bl	8000c04 <Error_Handler>
  }
}
 8000b7a:	bf00      	nop
 8000b7c:	3740      	adds	r7, #64	; 0x40
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000b8a:	4a12      	ldr	r2, [pc, #72]	; (8000bd4 <MX_USART2_UART_Init+0x50>)
 8000b8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000b90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ba8:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000baa:	220c      	movs	r2, #12
 8000bac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bba:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000bbc:	f001 f84e 	bl	8001c5c <HAL_UART_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bc6:	f000 f81d 	bl	8000c04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000204 	.word	0x20000204
 8000bd4:	40004400 	.word	0x40004400

08000bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	b083      	sub	sp, #12
 8000bdc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bde:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <MX_GPIO_Init+0x28>)
 8000be0:	699b      	ldr	r3, [r3, #24]
 8000be2:	4a07      	ldr	r2, [pc, #28]	; (8000c00 <MX_GPIO_Init+0x28>)
 8000be4:	f043 0304 	orr.w	r3, r3, #4
 8000be8:	6193      	str	r3, [r2, #24]
 8000bea:	4b05      	ldr	r3, [pc, #20]	; (8000c00 <MX_GPIO_Init+0x28>)
 8000bec:	699b      	ldr	r3, [r3, #24]
 8000bee:	f003 0304 	and.w	r3, r3, #4
 8000bf2:	607b      	str	r3, [r7, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]

}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bc80      	pop	{r7}
 8000bfe:	4770      	bx	lr
 8000c00:	40021000 	.word	0x40021000

08000c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c08:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <Error_Handler+0x6>

08000c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <HAL_MspInit+0x5c>)
 8000c14:	699b      	ldr	r3, [r3, #24]
 8000c16:	4a14      	ldr	r2, [pc, #80]	; (8000c68 <HAL_MspInit+0x5c>)
 8000c18:	f043 0301 	orr.w	r3, r3, #1
 8000c1c:	6193      	str	r3, [r2, #24]
 8000c1e:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <HAL_MspInit+0x5c>)
 8000c20:	699b      	ldr	r3, [r3, #24]
 8000c22:	f003 0301 	and.w	r3, r3, #1
 8000c26:	60bb      	str	r3, [r7, #8]
 8000c28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <HAL_MspInit+0x5c>)
 8000c2c:	69db      	ldr	r3, [r3, #28]
 8000c2e:	4a0e      	ldr	r2, [pc, #56]	; (8000c68 <HAL_MspInit+0x5c>)
 8000c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c34:	61d3      	str	r3, [r2, #28]
 8000c36:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <HAL_MspInit+0x5c>)
 8000c38:	69db      	ldr	r3, [r3, #28]
 8000c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000c42:	4b0a      	ldr	r3, [pc, #40]	; (8000c6c <HAL_MspInit+0x60>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c56:	60fb      	str	r3, [r7, #12]
 8000c58:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <HAL_MspInit+0x60>)
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5e:	bf00      	nop
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	40010000 	.word	0x40010000

08000c70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b088      	sub	sp, #32
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 0310 	add.w	r3, r7, #16
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a1b      	ldr	r2, [pc, #108]	; (8000cf8 <HAL_UART_MspInit+0x88>)
 8000c8c:	4293      	cmp	r3, r2
 8000c8e:	d12f      	bne.n	8000cf0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c90:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <HAL_UART_MspInit+0x8c>)
 8000c92:	69db      	ldr	r3, [r3, #28]
 8000c94:	4a19      	ldr	r2, [pc, #100]	; (8000cfc <HAL_UART_MspInit+0x8c>)
 8000c96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c9a:	61d3      	str	r3, [r2, #28]
 8000c9c:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <HAL_UART_MspInit+0x8c>)
 8000c9e:	69db      	ldr	r3, [r3, #28]
 8000ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca8:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <HAL_UART_MspInit+0x8c>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	4a13      	ldr	r2, [pc, #76]	; (8000cfc <HAL_UART_MspInit+0x8c>)
 8000cae:	f043 0304 	orr.w	r3, r3, #4
 8000cb2:	6193      	str	r3, [r2, #24]
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <HAL_UART_MspInit+0x8c>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	f003 0304 	and.w	r3, r3, #4
 8000cbc:	60bb      	str	r3, [r7, #8]
 8000cbe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cc0:	2304      	movs	r3, #4
 8000cc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ccc:	f107 0310 	add.w	r3, r7, #16
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	480b      	ldr	r0, [pc, #44]	; (8000d00 <HAL_UART_MspInit+0x90>)
 8000cd4:	f000 fa54 	bl	8001180 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cd8:	2308      	movs	r3, #8
 8000cda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce4:	f107 0310 	add.w	r3, r7, #16
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4805      	ldr	r0, [pc, #20]	; (8000d00 <HAL_UART_MspInit+0x90>)
 8000cec:	f000 fa48 	bl	8001180 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cf0:	bf00      	nop
 8000cf2:	3720      	adds	r7, #32
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40004400 	.word	0x40004400
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	40010800 	.word	0x40010800

08000d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <NMI_Handler+0x4>

08000d0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <HardFault_Handler+0x4>

08000d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <MemManage_Handler+0x4>

08000d16 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1a:	e7fe      	b.n	8000d1a <BusFault_Handler+0x4>

08000d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <UsageFault_Handler+0x4>

08000d22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bc80      	pop	{r7}
 8000d2c:	4770      	bx	lr

08000d2e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bc80      	pop	{r7}
 8000d38:	4770      	bx	lr

08000d3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d3a:	b480      	push	{r7}
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr

08000d46 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d4a:	f000 f8f7 	bl	8000f3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b086      	sub	sp, #24
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	60f8      	str	r0, [r7, #12]
 8000d5a:	60b9      	str	r1, [r7, #8]
 8000d5c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
 8000d62:	e00a      	b.n	8000d7a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d64:	f3af 8000 	nop.w
 8000d68:	4601      	mov	r1, r0
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	1c5a      	adds	r2, r3, #1
 8000d6e:	60ba      	str	r2, [r7, #8]
 8000d70:	b2ca      	uxtb	r2, r1
 8000d72:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	3301      	adds	r3, #1
 8000d78:	617b      	str	r3, [r7, #20]
 8000d7a:	697a      	ldr	r2, [r7, #20]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	dbf0      	blt.n	8000d64 <_read+0x12>
	}

return len;
 8000d82:	687b      	ldr	r3, [r7, #4]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3718      	adds	r7, #24
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <_close>:
	}
	return len;
}

int _close(int file)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
	return -1;
 8000d94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bc80      	pop	{r7}
 8000da0:	4770      	bx	lr

08000da2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000da2:	b480      	push	{r7}
 8000da4:	b083      	sub	sp, #12
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
 8000daa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000db2:	605a      	str	r2, [r3, #4]
	return 0;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bc80      	pop	{r7}
 8000dbe:	4770      	bx	lr

08000dc0 <_isatty>:

int _isatty(int file)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
	return 1;
 8000dc8:	2301      	movs	r3, #1
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bc80      	pop	{r7}
 8000dd2:	4770      	bx	lr

08000dd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
	return 0;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3714      	adds	r7, #20
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr

08000dec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000df4:	4a14      	ldr	r2, [pc, #80]	; (8000e48 <_sbrk+0x5c>)
 8000df6:	4b15      	ldr	r3, [pc, #84]	; (8000e4c <_sbrk+0x60>)
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <_sbrk+0x64>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d102      	bne.n	8000e0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e08:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <_sbrk+0x64>)
 8000e0a:	4a12      	ldr	r2, [pc, #72]	; (8000e54 <_sbrk+0x68>)
 8000e0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e0e:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <_sbrk+0x64>)
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4413      	add	r3, r2
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d207      	bcs.n	8000e2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e1c:	f001 f8d6 	bl	8001fcc <__errno>
 8000e20:	4602      	mov	r2, r0
 8000e22:	230c      	movs	r3, #12
 8000e24:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000e26:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2a:	e009      	b.n	8000e40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e2c:	4b08      	ldr	r3, [pc, #32]	; (8000e50 <_sbrk+0x64>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e32:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <_sbrk+0x64>)
 8000e34:	681a      	ldr	r2, [r3, #0]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4413      	add	r3, r2
 8000e3a:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <_sbrk+0x64>)
 8000e3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e3e:	68fb      	ldr	r3, [r7, #12]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3718      	adds	r7, #24
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20002800 	.word	0x20002800
 8000e4c:	00000400 	.word	0x00000400
 8000e50:	200001f8 	.word	0x200001f8
 8000e54:	20000250 	.word	0x20000250

08000e58 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e5c:	bf00      	nop
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bc80      	pop	{r7}
 8000e62:	4770      	bx	lr

08000e64 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e64:	480c      	ldr	r0, [pc, #48]	; (8000e98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e66:	490d      	ldr	r1, [pc, #52]	; (8000e9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e68:	4a0d      	ldr	r2, [pc, #52]	; (8000ea0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e6c:	e002      	b.n	8000e74 <LoopCopyDataInit>

08000e6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e72:	3304      	adds	r3, #4

08000e74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e78:	d3f9      	bcc.n	8000e6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ea4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e7c:	4c0a      	ldr	r4, [pc, #40]	; (8000ea8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e80:	e001      	b.n	8000e86 <LoopFillZerobss>

08000e82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e84:	3204      	adds	r2, #4

08000e86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e88:	d3fb      	bcc.n	8000e82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e8a:	f7ff ffe5 	bl	8000e58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e8e:	f001 f8a3 	bl	8001fd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e92:	f7ff fe0f 	bl	8000ab4 <main>
  bx lr
 8000e96:	4770      	bx	lr
  ldr r0, =_sdata
 8000e98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e9c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8000ea0:	080049c0 	.word	0x080049c0
  ldr r2, =_sbss
 8000ea4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8000ea8:	20000250 	.word	0x20000250

08000eac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000eac:	e7fe      	b.n	8000eac <ADC1_2_IRQHandler>
	...

08000eb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb4:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <HAL_Init+0x28>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a07      	ldr	r2, [pc, #28]	; (8000ed8 <HAL_Init+0x28>)
 8000eba:	f043 0310 	orr.w	r3, r3, #16
 8000ebe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec0:	2003      	movs	r0, #3
 8000ec2:	f000 f929 	bl	8001118 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f000 f808 	bl	8000edc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ecc:	f7ff fe9e 	bl	8000c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40022000 	.word	0x40022000

08000edc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee4:	4b12      	ldr	r3, [pc, #72]	; (8000f30 <HAL_InitTick+0x54>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <HAL_InitTick+0x58>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	4619      	mov	r1, r3
 8000eee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 f933 	bl	8001166 <HAL_SYSTICK_Config>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e00e      	b.n	8000f28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2b0f      	cmp	r3, #15
 8000f0e:	d80a      	bhi.n	8000f26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f10:	2200      	movs	r2, #0
 8000f12:	6879      	ldr	r1, [r7, #4]
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295
 8000f18:	f000 f909 	bl	800112e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f1c:	4a06      	ldr	r2, [pc, #24]	; (8000f38 <HAL_InitTick+0x5c>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	e000      	b.n	8000f28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000000 	.word	0x20000000
 8000f34:	20000008 	.word	0x20000008
 8000f38:	20000004 	.word	0x20000004

08000f3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f40:	4b05      	ldr	r3, [pc, #20]	; (8000f58 <HAL_IncTick+0x1c>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <HAL_IncTick+0x20>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	4a03      	ldr	r2, [pc, #12]	; (8000f5c <HAL_IncTick+0x20>)
 8000f4e:	6013      	str	r3, [r2, #0]
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bc80      	pop	{r7}
 8000f56:	4770      	bx	lr
 8000f58:	20000008 	.word	0x20000008
 8000f5c:	20000248 	.word	0x20000248

08000f60 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return uwTick;
 8000f64:	4b02      	ldr	r3, [pc, #8]	; (8000f70 <HAL_GetTick+0x10>)
 8000f66:	681b      	ldr	r3, [r3, #0]
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bc80      	pop	{r7}
 8000f6e:	4770      	bx	lr
 8000f70:	20000248 	.word	0x20000248

08000f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f7c:	f7ff fff0 	bl	8000f60 <HAL_GetTick>
 8000f80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f8c:	d005      	beq.n	8000f9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f8e:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <HAL_Delay+0x40>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4413      	add	r3, r2
 8000f98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f9a:	bf00      	nop
 8000f9c:	f7ff ffe0 	bl	8000f60 <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d8f7      	bhi.n	8000f9c <HAL_Delay+0x28>
  {
  }
}
 8000fac:	bf00      	nop
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000008 	.word	0x20000008

08000fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <__NVIC_SetPriorityGrouping+0x44>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fce:	68ba      	ldr	r2, [r7, #8]
 8000fd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fea:	4a04      	ldr	r2, [pc, #16]	; (8000ffc <__NVIC_SetPriorityGrouping+0x44>)
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	60d3      	str	r3, [r2, #12]
}
 8000ff0:	bf00      	nop
 8000ff2:	3714      	adds	r7, #20
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bc80      	pop	{r7}
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001004:	4b04      	ldr	r3, [pc, #16]	; (8001018 <__NVIC_GetPriorityGrouping+0x18>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	0a1b      	lsrs	r3, r3, #8
 800100a:	f003 0307 	and.w	r3, r3, #7
}
 800100e:	4618      	mov	r0, r3
 8001010:	46bd      	mov	sp, r7
 8001012:	bc80      	pop	{r7}
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	6039      	str	r1, [r7, #0]
 8001026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102c:	2b00      	cmp	r3, #0
 800102e:	db0a      	blt.n	8001046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	b2da      	uxtb	r2, r3
 8001034:	490c      	ldr	r1, [pc, #48]	; (8001068 <__NVIC_SetPriority+0x4c>)
 8001036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103a:	0112      	lsls	r2, r2, #4
 800103c:	b2d2      	uxtb	r2, r2
 800103e:	440b      	add	r3, r1
 8001040:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001044:	e00a      	b.n	800105c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	b2da      	uxtb	r2, r3
 800104a:	4908      	ldr	r1, [pc, #32]	; (800106c <__NVIC_SetPriority+0x50>)
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	f003 030f 	and.w	r3, r3, #15
 8001052:	3b04      	subs	r3, #4
 8001054:	0112      	lsls	r2, r2, #4
 8001056:	b2d2      	uxtb	r2, r2
 8001058:	440b      	add	r3, r1
 800105a:	761a      	strb	r2, [r3, #24]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000e100 	.word	0xe000e100
 800106c:	e000ed00 	.word	0xe000ed00

08001070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001070:	b480      	push	{r7}
 8001072:	b089      	sub	sp, #36	; 0x24
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f1c3 0307 	rsb	r3, r3, #7
 800108a:	2b04      	cmp	r3, #4
 800108c:	bf28      	it	cs
 800108e:	2304      	movcs	r3, #4
 8001090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	3304      	adds	r3, #4
 8001096:	2b06      	cmp	r3, #6
 8001098:	d902      	bls.n	80010a0 <NVIC_EncodePriority+0x30>
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3b03      	subs	r3, #3
 800109e:	e000      	b.n	80010a2 <NVIC_EncodePriority+0x32>
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a4:	f04f 32ff 	mov.w	r2, #4294967295
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43da      	mvns	r2, r3
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	401a      	ands	r2, r3
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b8:	f04f 31ff 	mov.w	r1, #4294967295
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	fa01 f303 	lsl.w	r3, r1, r3
 80010c2:	43d9      	mvns	r1, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	4313      	orrs	r3, r2
         );
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3724      	adds	r7, #36	; 0x24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr

080010d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3b01      	subs	r3, #1
 80010e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010e4:	d301      	bcc.n	80010ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010e6:	2301      	movs	r3, #1
 80010e8:	e00f      	b.n	800110a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ea:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <SysTick_Config+0x40>)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010f2:	210f      	movs	r1, #15
 80010f4:	f04f 30ff 	mov.w	r0, #4294967295
 80010f8:	f7ff ff90 	bl	800101c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <SysTick_Config+0x40>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001102:	4b04      	ldr	r3, [pc, #16]	; (8001114 <SysTick_Config+0x40>)
 8001104:	2207      	movs	r2, #7
 8001106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	e000e010 	.word	0xe000e010

08001118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ff49 	bl	8000fb8 <__NVIC_SetPriorityGrouping>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800112e:	b580      	push	{r7, lr}
 8001130:	b086      	sub	sp, #24
 8001132:	af00      	add	r7, sp, #0
 8001134:	4603      	mov	r3, r0
 8001136:	60b9      	str	r1, [r7, #8]
 8001138:	607a      	str	r2, [r7, #4]
 800113a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800113c:	2300      	movs	r3, #0
 800113e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001140:	f7ff ff5e 	bl	8001000 <__NVIC_GetPriorityGrouping>
 8001144:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	68b9      	ldr	r1, [r7, #8]
 800114a:	6978      	ldr	r0, [r7, #20]
 800114c:	f7ff ff90 	bl	8001070 <NVIC_EncodePriority>
 8001150:	4602      	mov	r2, r0
 8001152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001156:	4611      	mov	r1, r2
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff ff5f 	bl	800101c <__NVIC_SetPriority>
}
 800115e:	bf00      	nop
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}

08001166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001166:	b580      	push	{r7, lr}
 8001168:	b082      	sub	sp, #8
 800116a:	af00      	add	r7, sp, #0
 800116c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff ffb0 	bl	80010d4 <SysTick_Config>
 8001174:	4603      	mov	r3, r0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
	...

08001180 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001180:	b480      	push	{r7}
 8001182:	b08b      	sub	sp, #44	; 0x2c
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800118a:	2300      	movs	r3, #0
 800118c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800118e:	2300      	movs	r3, #0
 8001190:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001192:	e121      	b.n	80013d8 <HAL_GPIO_Init+0x258>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001194:	2201      	movs	r2, #1
 8001196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	69fa      	ldr	r2, [r7, #28]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	f040 8110 	bne.w	80013d2 <HAL_GPIO_Init+0x252>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2b12      	cmp	r3, #18
 80011b8:	d034      	beq.n	8001224 <HAL_GPIO_Init+0xa4>
 80011ba:	2b12      	cmp	r3, #18
 80011bc:	d80d      	bhi.n	80011da <HAL_GPIO_Init+0x5a>
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d02b      	beq.n	800121a <HAL_GPIO_Init+0x9a>
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d804      	bhi.n	80011d0 <HAL_GPIO_Init+0x50>
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d031      	beq.n	800122e <HAL_GPIO_Init+0xae>
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d01c      	beq.n	8001208 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011ce:	e048      	b.n	8001262 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011d0:	2b03      	cmp	r3, #3
 80011d2:	d043      	beq.n	800125c <HAL_GPIO_Init+0xdc>
 80011d4:	2b11      	cmp	r3, #17
 80011d6:	d01b      	beq.n	8001210 <HAL_GPIO_Init+0x90>
          break;
 80011d8:	e043      	b.n	8001262 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011da:	4a86      	ldr	r2, [pc, #536]	; (80013f4 <HAL_GPIO_Init+0x274>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d026      	beq.n	800122e <HAL_GPIO_Init+0xae>
 80011e0:	4a84      	ldr	r2, [pc, #528]	; (80013f4 <HAL_GPIO_Init+0x274>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d806      	bhi.n	80011f4 <HAL_GPIO_Init+0x74>
 80011e6:	4a84      	ldr	r2, [pc, #528]	; (80013f8 <HAL_GPIO_Init+0x278>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d020      	beq.n	800122e <HAL_GPIO_Init+0xae>
 80011ec:	4a83      	ldr	r2, [pc, #524]	; (80013fc <HAL_GPIO_Init+0x27c>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d01d      	beq.n	800122e <HAL_GPIO_Init+0xae>
          break;
 80011f2:	e036      	b.n	8001262 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011f4:	4a82      	ldr	r2, [pc, #520]	; (8001400 <HAL_GPIO_Init+0x280>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d019      	beq.n	800122e <HAL_GPIO_Init+0xae>
 80011fa:	4a82      	ldr	r2, [pc, #520]	; (8001404 <HAL_GPIO_Init+0x284>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d016      	beq.n	800122e <HAL_GPIO_Init+0xae>
 8001200:	4a81      	ldr	r2, [pc, #516]	; (8001408 <HAL_GPIO_Init+0x288>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d013      	beq.n	800122e <HAL_GPIO_Init+0xae>
          break;
 8001206:	e02c      	b.n	8001262 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	623b      	str	r3, [r7, #32]
          break;
 800120e:	e028      	b.n	8001262 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	3304      	adds	r3, #4
 8001216:	623b      	str	r3, [r7, #32]
          break;
 8001218:	e023      	b.n	8001262 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	3308      	adds	r3, #8
 8001220:	623b      	str	r3, [r7, #32]
          break;
 8001222:	e01e      	b.n	8001262 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	330c      	adds	r3, #12
 800122a:	623b      	str	r3, [r7, #32]
          break;
 800122c:	e019      	b.n	8001262 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d102      	bne.n	800123c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001236:	2304      	movs	r3, #4
 8001238:	623b      	str	r3, [r7, #32]
          break;
 800123a:	e012      	b.n	8001262 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d105      	bne.n	8001250 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001244:	2308      	movs	r3, #8
 8001246:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	69fa      	ldr	r2, [r7, #28]
 800124c:	611a      	str	r2, [r3, #16]
          break;
 800124e:	e008      	b.n	8001262 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001250:	2308      	movs	r3, #8
 8001252:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	69fa      	ldr	r2, [r7, #28]
 8001258:	615a      	str	r2, [r3, #20]
          break;
 800125a:	e002      	b.n	8001262 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800125c:	2300      	movs	r3, #0
 800125e:	623b      	str	r3, [r7, #32]
          break;
 8001260:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	2bff      	cmp	r3, #255	; 0xff
 8001266:	d801      	bhi.n	800126c <HAL_GPIO_Init+0xec>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	e001      	b.n	8001270 <HAL_GPIO_Init+0xf0>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3304      	adds	r3, #4
 8001270:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001272:	69bb      	ldr	r3, [r7, #24]
 8001274:	2bff      	cmp	r3, #255	; 0xff
 8001276:	d802      	bhi.n	800127e <HAL_GPIO_Init+0xfe>
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	e002      	b.n	8001284 <HAL_GPIO_Init+0x104>
 800127e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001280:	3b08      	subs	r3, #8
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	210f      	movs	r1, #15
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	fa01 f303 	lsl.w	r3, r1, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	401a      	ands	r2, r3
 8001296:	6a39      	ldr	r1, [r7, #32]
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	fa01 f303 	lsl.w	r3, r1, r3
 800129e:	431a      	orrs	r2, r3
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	f000 8090 	beq.w	80013d2 <HAL_GPIO_Init+0x252>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012b2:	4b56      	ldr	r3, [pc, #344]	; (800140c <HAL_GPIO_Init+0x28c>)
 80012b4:	699b      	ldr	r3, [r3, #24]
 80012b6:	4a55      	ldr	r2, [pc, #340]	; (800140c <HAL_GPIO_Init+0x28c>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6193      	str	r3, [r2, #24]
 80012be:	4b53      	ldr	r3, [pc, #332]	; (800140c <HAL_GPIO_Init+0x28c>)
 80012c0:	699b      	ldr	r3, [r3, #24]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012ca:	4a51      	ldr	r2, [pc, #324]	; (8001410 <HAL_GPIO_Init+0x290>)
 80012cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ce:	089b      	lsrs	r3, r3, #2
 80012d0:	3302      	adds	r3, #2
 80012d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012d6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	220f      	movs	r2, #15
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	68fa      	ldr	r2, [r7, #12]
 80012ea:	4013      	ands	r3, r2
 80012ec:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a48      	ldr	r2, [pc, #288]	; (8001414 <HAL_GPIO_Init+0x294>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d00d      	beq.n	8001312 <HAL_GPIO_Init+0x192>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a47      	ldr	r2, [pc, #284]	; (8001418 <HAL_GPIO_Init+0x298>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d007      	beq.n	800130e <HAL_GPIO_Init+0x18e>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a46      	ldr	r2, [pc, #280]	; (800141c <HAL_GPIO_Init+0x29c>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d101      	bne.n	800130a <HAL_GPIO_Init+0x18a>
 8001306:	2302      	movs	r3, #2
 8001308:	e004      	b.n	8001314 <HAL_GPIO_Init+0x194>
 800130a:	2303      	movs	r3, #3
 800130c:	e002      	b.n	8001314 <HAL_GPIO_Init+0x194>
 800130e:	2301      	movs	r3, #1
 8001310:	e000      	b.n	8001314 <HAL_GPIO_Init+0x194>
 8001312:	2300      	movs	r3, #0
 8001314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001316:	f002 0203 	and.w	r2, r2, #3
 800131a:	0092      	lsls	r2, r2, #2
 800131c:	4093      	lsls	r3, r2
 800131e:	68fa      	ldr	r2, [r7, #12]
 8001320:	4313      	orrs	r3, r2
 8001322:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001324:	493a      	ldr	r1, [pc, #232]	; (8001410 <HAL_GPIO_Init+0x290>)
 8001326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001328:	089b      	lsrs	r3, r3, #2
 800132a:	3302      	adds	r3, #2
 800132c:	68fa      	ldr	r2, [r7, #12]
 800132e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d006      	beq.n	800134c <HAL_GPIO_Init+0x1cc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800133e:	4b38      	ldr	r3, [pc, #224]	; (8001420 <HAL_GPIO_Init+0x2a0>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	4937      	ldr	r1, [pc, #220]	; (8001420 <HAL_GPIO_Init+0x2a0>)
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	4313      	orrs	r3, r2
 8001348:	600b      	str	r3, [r1, #0]
 800134a:	e006      	b.n	800135a <HAL_GPIO_Init+0x1da>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800134c:	4b34      	ldr	r3, [pc, #208]	; (8001420 <HAL_GPIO_Init+0x2a0>)
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	69bb      	ldr	r3, [r7, #24]
 8001352:	43db      	mvns	r3, r3
 8001354:	4932      	ldr	r1, [pc, #200]	; (8001420 <HAL_GPIO_Init+0x2a0>)
 8001356:	4013      	ands	r3, r2
 8001358:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d006      	beq.n	8001374 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001366:	4b2e      	ldr	r3, [pc, #184]	; (8001420 <HAL_GPIO_Init+0x2a0>)
 8001368:	685a      	ldr	r2, [r3, #4]
 800136a:	492d      	ldr	r1, [pc, #180]	; (8001420 <HAL_GPIO_Init+0x2a0>)
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	4313      	orrs	r3, r2
 8001370:	604b      	str	r3, [r1, #4]
 8001372:	e006      	b.n	8001382 <HAL_GPIO_Init+0x202>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001374:	4b2a      	ldr	r3, [pc, #168]	; (8001420 <HAL_GPIO_Init+0x2a0>)
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	43db      	mvns	r3, r3
 800137c:	4928      	ldr	r1, [pc, #160]	; (8001420 <HAL_GPIO_Init+0x2a0>)
 800137e:	4013      	ands	r3, r2
 8001380:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d006      	beq.n	800139c <HAL_GPIO_Init+0x21c>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800138e:	4b24      	ldr	r3, [pc, #144]	; (8001420 <HAL_GPIO_Init+0x2a0>)
 8001390:	689a      	ldr	r2, [r3, #8]
 8001392:	4923      	ldr	r1, [pc, #140]	; (8001420 <HAL_GPIO_Init+0x2a0>)
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	4313      	orrs	r3, r2
 8001398:	608b      	str	r3, [r1, #8]
 800139a:	e006      	b.n	80013aa <HAL_GPIO_Init+0x22a>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800139c:	4b20      	ldr	r3, [pc, #128]	; (8001420 <HAL_GPIO_Init+0x2a0>)
 800139e:	689a      	ldr	r2, [r3, #8]
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	43db      	mvns	r3, r3
 80013a4:	491e      	ldr	r1, [pc, #120]	; (8001420 <HAL_GPIO_Init+0x2a0>)
 80013a6:	4013      	ands	r3, r2
 80013a8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d006      	beq.n	80013c4 <HAL_GPIO_Init+0x244>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013b6:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <HAL_GPIO_Init+0x2a0>)
 80013b8:	68da      	ldr	r2, [r3, #12]
 80013ba:	4919      	ldr	r1, [pc, #100]	; (8001420 <HAL_GPIO_Init+0x2a0>)
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	4313      	orrs	r3, r2
 80013c0:	60cb      	str	r3, [r1, #12]
 80013c2:	e006      	b.n	80013d2 <HAL_GPIO_Init+0x252>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80013c4:	4b16      	ldr	r3, [pc, #88]	; (8001420 <HAL_GPIO_Init+0x2a0>)
 80013c6:	68da      	ldr	r2, [r3, #12]
 80013c8:	69bb      	ldr	r3, [r7, #24]
 80013ca:	43db      	mvns	r3, r3
 80013cc:	4914      	ldr	r1, [pc, #80]	; (8001420 <HAL_GPIO_Init+0x2a0>)
 80013ce:	4013      	ands	r3, r2
 80013d0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80013d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d4:	3301      	adds	r3, #1
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013de:	fa22 f303 	lsr.w	r3, r2, r3
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f47f aed6 	bne.w	8001194 <HAL_GPIO_Init+0x14>
  }
}
 80013e8:	bf00      	nop
 80013ea:	372c      	adds	r7, #44	; 0x2c
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bc80      	pop	{r7}
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	10210000 	.word	0x10210000
 80013f8:	10110000 	.word	0x10110000
 80013fc:	10120000 	.word	0x10120000
 8001400:	10310000 	.word	0x10310000
 8001404:	10320000 	.word	0x10320000
 8001408:	10220000 	.word	0x10220000
 800140c:	40021000 	.word	0x40021000
 8001410:	40010000 	.word	0x40010000
 8001414:	40010800 	.word	0x40010800
 8001418:	40010c00 	.word	0x40010c00
 800141c:	40011000 	.word	0x40011000
 8001420:	40010400 	.word	0x40010400

08001424 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d101      	bne.n	8001436 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	e26c      	b.n	8001910 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	2b00      	cmp	r3, #0
 8001440:	f000 8087 	beq.w	8001552 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001444:	4b92      	ldr	r3, [pc, #584]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 030c 	and.w	r3, r3, #12
 800144c:	2b04      	cmp	r3, #4
 800144e:	d00c      	beq.n	800146a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001450:	4b8f      	ldr	r3, [pc, #572]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f003 030c 	and.w	r3, r3, #12
 8001458:	2b08      	cmp	r3, #8
 800145a:	d112      	bne.n	8001482 <HAL_RCC_OscConfig+0x5e>
 800145c:	4b8c      	ldr	r3, [pc, #560]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001468:	d10b      	bne.n	8001482 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800146a:	4b89      	ldr	r3, [pc, #548]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d06c      	beq.n	8001550 <HAL_RCC_OscConfig+0x12c>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d168      	bne.n	8001550 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e246      	b.n	8001910 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800148a:	d106      	bne.n	800149a <HAL_RCC_OscConfig+0x76>
 800148c:	4b80      	ldr	r3, [pc, #512]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a7f      	ldr	r2, [pc, #508]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 8001492:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001496:	6013      	str	r3, [r2, #0]
 8001498:	e02e      	b.n	80014f8 <HAL_RCC_OscConfig+0xd4>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d10c      	bne.n	80014bc <HAL_RCC_OscConfig+0x98>
 80014a2:	4b7b      	ldr	r3, [pc, #492]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a7a      	ldr	r2, [pc, #488]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80014a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ac:	6013      	str	r3, [r2, #0]
 80014ae:	4b78      	ldr	r3, [pc, #480]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a77      	ldr	r2, [pc, #476]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80014b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014b8:	6013      	str	r3, [r2, #0]
 80014ba:	e01d      	b.n	80014f8 <HAL_RCC_OscConfig+0xd4>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014c4:	d10c      	bne.n	80014e0 <HAL_RCC_OscConfig+0xbc>
 80014c6:	4b72      	ldr	r3, [pc, #456]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a71      	ldr	r2, [pc, #452]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80014cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	4b6f      	ldr	r3, [pc, #444]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a6e      	ldr	r2, [pc, #440]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80014d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014dc:	6013      	str	r3, [r2, #0]
 80014de:	e00b      	b.n	80014f8 <HAL_RCC_OscConfig+0xd4>
 80014e0:	4b6b      	ldr	r3, [pc, #428]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a6a      	ldr	r2, [pc, #424]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80014e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ea:	6013      	str	r3, [r2, #0]
 80014ec:	4b68      	ldr	r3, [pc, #416]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a67      	ldr	r2, [pc, #412]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80014f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d013      	beq.n	8001528 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001500:	f7ff fd2e 	bl	8000f60 <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001508:	f7ff fd2a 	bl	8000f60 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b64      	cmp	r3, #100	; 0x64
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e1fa      	b.n	8001910 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151a:	4b5d      	ldr	r3, [pc, #372]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d0f0      	beq.n	8001508 <HAL_RCC_OscConfig+0xe4>
 8001526:	e014      	b.n	8001552 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001528:	f7ff fd1a 	bl	8000f60 <HAL_GetTick>
 800152c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001530:	f7ff fd16 	bl	8000f60 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b64      	cmp	r3, #100	; 0x64
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e1e6      	b.n	8001910 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001542:	4b53      	ldr	r3, [pc, #332]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f0      	bne.n	8001530 <HAL_RCC_OscConfig+0x10c>
 800154e:	e000      	b.n	8001552 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	2b00      	cmp	r3, #0
 800155c:	d063      	beq.n	8001626 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800155e:	4b4c      	ldr	r3, [pc, #304]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f003 030c 	and.w	r3, r3, #12
 8001566:	2b00      	cmp	r3, #0
 8001568:	d00b      	beq.n	8001582 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800156a:	4b49      	ldr	r3, [pc, #292]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	f003 030c 	and.w	r3, r3, #12
 8001572:	2b08      	cmp	r3, #8
 8001574:	d11c      	bne.n	80015b0 <HAL_RCC_OscConfig+0x18c>
 8001576:	4b46      	ldr	r3, [pc, #280]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d116      	bne.n	80015b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001582:	4b43      	ldr	r3, [pc, #268]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d005      	beq.n	800159a <HAL_RCC_OscConfig+0x176>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d001      	beq.n	800159a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e1ba      	b.n	8001910 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800159a:	4b3d      	ldr	r3, [pc, #244]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	695b      	ldr	r3, [r3, #20]
 80015a6:	00db      	lsls	r3, r3, #3
 80015a8:	4939      	ldr	r1, [pc, #228]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80015aa:	4313      	orrs	r3, r2
 80015ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ae:	e03a      	b.n	8001626 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d020      	beq.n	80015fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015b8:	4b36      	ldr	r3, [pc, #216]	; (8001694 <HAL_RCC_OscConfig+0x270>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015be:	f7ff fccf 	bl	8000f60 <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015c6:	f7ff fccb 	bl	8000f60 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e19b      	b.n	8001910 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d8:	4b2d      	ldr	r3, [pc, #180]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0f0      	beq.n	80015c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e4:	4b2a      	ldr	r3, [pc, #168]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	695b      	ldr	r3, [r3, #20]
 80015f0:	00db      	lsls	r3, r3, #3
 80015f2:	4927      	ldr	r1, [pc, #156]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 80015f4:	4313      	orrs	r3, r2
 80015f6:	600b      	str	r3, [r1, #0]
 80015f8:	e015      	b.n	8001626 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015fa:	4b26      	ldr	r3, [pc, #152]	; (8001694 <HAL_RCC_OscConfig+0x270>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001600:	f7ff fcae 	bl	8000f60 <HAL_GetTick>
 8001604:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001608:	f7ff fcaa 	bl	8000f60 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e17a      	b.n	8001910 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800161a:	4b1d      	ldr	r3, [pc, #116]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1f0      	bne.n	8001608 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0308 	and.w	r3, r3, #8
 800162e:	2b00      	cmp	r3, #0
 8001630:	d03a      	beq.n	80016a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d019      	beq.n	800166e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800163a:	4b17      	ldr	r3, [pc, #92]	; (8001698 <HAL_RCC_OscConfig+0x274>)
 800163c:	2201      	movs	r2, #1
 800163e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001640:	f7ff fc8e 	bl	8000f60 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001648:	f7ff fc8a 	bl	8000f60 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e15a      	b.n	8001910 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800165a:	4b0d      	ldr	r3, [pc, #52]	; (8001690 <HAL_RCC_OscConfig+0x26c>)
 800165c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0f0      	beq.n	8001648 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001666:	2001      	movs	r0, #1
 8001668:	f000 fada 	bl	8001c20 <RCC_Delay>
 800166c:	e01c      	b.n	80016a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800166e:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <HAL_RCC_OscConfig+0x274>)
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001674:	f7ff fc74 	bl	8000f60 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800167a:	e00f      	b.n	800169c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800167c:	f7ff fc70 	bl	8000f60 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d908      	bls.n	800169c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e140      	b.n	8001910 <HAL_RCC_OscConfig+0x4ec>
 800168e:	bf00      	nop
 8001690:	40021000 	.word	0x40021000
 8001694:	42420000 	.word	0x42420000
 8001698:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800169c:	4b9e      	ldr	r3, [pc, #632]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 800169e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1e9      	bne.n	800167c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f000 80a6 	beq.w	8001802 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016b6:	2300      	movs	r3, #0
 80016b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ba:	4b97      	ldr	r3, [pc, #604]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d10d      	bne.n	80016e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016c6:	4b94      	ldr	r3, [pc, #592]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	4a93      	ldr	r2, [pc, #588]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 80016cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d0:	61d3      	str	r3, [r2, #28]
 80016d2:	4b91      	ldr	r3, [pc, #580]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016da:	60bb      	str	r3, [r7, #8]
 80016dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016de:	2301      	movs	r3, #1
 80016e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e2:	4b8e      	ldr	r3, [pc, #568]	; (800191c <HAL_RCC_OscConfig+0x4f8>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d118      	bne.n	8001720 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ee:	4b8b      	ldr	r3, [pc, #556]	; (800191c <HAL_RCC_OscConfig+0x4f8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a8a      	ldr	r2, [pc, #552]	; (800191c <HAL_RCC_OscConfig+0x4f8>)
 80016f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016fa:	f7ff fc31 	bl	8000f60 <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001700:	e008      	b.n	8001714 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001702:	f7ff fc2d 	bl	8000f60 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b64      	cmp	r3, #100	; 0x64
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e0fd      	b.n	8001910 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001714:	4b81      	ldr	r3, [pc, #516]	; (800191c <HAL_RCC_OscConfig+0x4f8>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0f0      	beq.n	8001702 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d106      	bne.n	8001736 <HAL_RCC_OscConfig+0x312>
 8001728:	4b7b      	ldr	r3, [pc, #492]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	4a7a      	ldr	r2, [pc, #488]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 800172e:	f043 0301 	orr.w	r3, r3, #1
 8001732:	6213      	str	r3, [r2, #32]
 8001734:	e02d      	b.n	8001792 <HAL_RCC_OscConfig+0x36e>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d10c      	bne.n	8001758 <HAL_RCC_OscConfig+0x334>
 800173e:	4b76      	ldr	r3, [pc, #472]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 8001740:	6a1b      	ldr	r3, [r3, #32]
 8001742:	4a75      	ldr	r2, [pc, #468]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 8001744:	f023 0301 	bic.w	r3, r3, #1
 8001748:	6213      	str	r3, [r2, #32]
 800174a:	4b73      	ldr	r3, [pc, #460]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 800174c:	6a1b      	ldr	r3, [r3, #32]
 800174e:	4a72      	ldr	r2, [pc, #456]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 8001750:	f023 0304 	bic.w	r3, r3, #4
 8001754:	6213      	str	r3, [r2, #32]
 8001756:	e01c      	b.n	8001792 <HAL_RCC_OscConfig+0x36e>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	2b05      	cmp	r3, #5
 800175e:	d10c      	bne.n	800177a <HAL_RCC_OscConfig+0x356>
 8001760:	4b6d      	ldr	r3, [pc, #436]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	4a6c      	ldr	r2, [pc, #432]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 8001766:	f043 0304 	orr.w	r3, r3, #4
 800176a:	6213      	str	r3, [r2, #32]
 800176c:	4b6a      	ldr	r3, [pc, #424]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 800176e:	6a1b      	ldr	r3, [r3, #32]
 8001770:	4a69      	ldr	r2, [pc, #420]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 8001772:	f043 0301 	orr.w	r3, r3, #1
 8001776:	6213      	str	r3, [r2, #32]
 8001778:	e00b      	b.n	8001792 <HAL_RCC_OscConfig+0x36e>
 800177a:	4b67      	ldr	r3, [pc, #412]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 800177c:	6a1b      	ldr	r3, [r3, #32]
 800177e:	4a66      	ldr	r2, [pc, #408]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 8001780:	f023 0301 	bic.w	r3, r3, #1
 8001784:	6213      	str	r3, [r2, #32]
 8001786:	4b64      	ldr	r3, [pc, #400]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 8001788:	6a1b      	ldr	r3, [r3, #32]
 800178a:	4a63      	ldr	r2, [pc, #396]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 800178c:	f023 0304 	bic.w	r3, r3, #4
 8001790:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d015      	beq.n	80017c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800179a:	f7ff fbe1 	bl	8000f60 <HAL_GetTick>
 800179e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a0:	e00a      	b.n	80017b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017a2:	f7ff fbdd 	bl	8000f60 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e0ab      	b.n	8001910 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b8:	4b57      	ldr	r3, [pc, #348]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0ee      	beq.n	80017a2 <HAL_RCC_OscConfig+0x37e>
 80017c4:	e014      	b.n	80017f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c6:	f7ff fbcb 	bl	8000f60 <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017cc:	e00a      	b.n	80017e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ce:	f7ff fbc7 	bl	8000f60 <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017dc:	4293      	cmp	r3, r2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e095      	b.n	8001910 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e4:	4b4c      	ldr	r3, [pc, #304]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1ee      	bne.n	80017ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017f0:	7dfb      	ldrb	r3, [r7, #23]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d105      	bne.n	8001802 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017f6:	4b48      	ldr	r3, [pc, #288]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 80017f8:	69db      	ldr	r3, [r3, #28]
 80017fa:	4a47      	ldr	r2, [pc, #284]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 80017fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001800:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69db      	ldr	r3, [r3, #28]
 8001806:	2b00      	cmp	r3, #0
 8001808:	f000 8081 	beq.w	800190e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800180c:	4b42      	ldr	r3, [pc, #264]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 030c 	and.w	r3, r3, #12
 8001814:	2b08      	cmp	r3, #8
 8001816:	d061      	beq.n	80018dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	69db      	ldr	r3, [r3, #28]
 800181c:	2b02      	cmp	r3, #2
 800181e:	d146      	bne.n	80018ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001820:	4b3f      	ldr	r3, [pc, #252]	; (8001920 <HAL_RCC_OscConfig+0x4fc>)
 8001822:	2200      	movs	r2, #0
 8001824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001826:	f7ff fb9b 	bl	8000f60 <HAL_GetTick>
 800182a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800182e:	f7ff fb97 	bl	8000f60 <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b02      	cmp	r3, #2
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e067      	b.n	8001910 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001840:	4b35      	ldr	r3, [pc, #212]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1f0      	bne.n	800182e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a1b      	ldr	r3, [r3, #32]
 8001850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001854:	d108      	bne.n	8001868 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001856:	4b30      	ldr	r3, [pc, #192]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	492d      	ldr	r1, [pc, #180]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 8001864:	4313      	orrs	r3, r2
 8001866:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001868:	4b2b      	ldr	r3, [pc, #172]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a19      	ldr	r1, [r3, #32]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001878:	430b      	orrs	r3, r1
 800187a:	4927      	ldr	r1, [pc, #156]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 800187c:	4313      	orrs	r3, r2
 800187e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001880:	4b27      	ldr	r3, [pc, #156]	; (8001920 <HAL_RCC_OscConfig+0x4fc>)
 8001882:	2201      	movs	r2, #1
 8001884:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001886:	f7ff fb6b 	bl	8000f60 <HAL_GetTick>
 800188a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800188c:	e008      	b.n	80018a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800188e:	f7ff fb67 	bl	8000f60 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	2b02      	cmp	r3, #2
 800189a:	d901      	bls.n	80018a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800189c:	2303      	movs	r3, #3
 800189e:	e037      	b.n	8001910 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018a0:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0f0      	beq.n	800188e <HAL_RCC_OscConfig+0x46a>
 80018ac:	e02f      	b.n	800190e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018ae:	4b1c      	ldr	r3, [pc, #112]	; (8001920 <HAL_RCC_OscConfig+0x4fc>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b4:	f7ff fb54 	bl	8000f60 <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018bc:	f7ff fb50 	bl	8000f60 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e020      	b.n	8001910 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ce:	4b12      	ldr	r3, [pc, #72]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1f0      	bne.n	80018bc <HAL_RCC_OscConfig+0x498>
 80018da:	e018      	b.n	800190e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	69db      	ldr	r3, [r3, #28]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d101      	bne.n	80018e8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e013      	b.n	8001910 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018e8:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <HAL_RCC_OscConfig+0x4f4>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a1b      	ldr	r3, [r3, #32]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d106      	bne.n	800190a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001906:	429a      	cmp	r2, r3
 8001908:	d001      	beq.n	800190e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e000      	b.n	8001910 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3718      	adds	r7, #24
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40021000 	.word	0x40021000
 800191c:	40007000 	.word	0x40007000
 8001920:	42420060 	.word	0x42420060

08001924 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d101      	bne.n	8001938 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e0d0      	b.n	8001ada <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001938:	4b6a      	ldr	r3, [pc, #424]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c0>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0307 	and.w	r3, r3, #7
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	429a      	cmp	r2, r3
 8001944:	d910      	bls.n	8001968 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001946:	4b67      	ldr	r3, [pc, #412]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f023 0207 	bic.w	r2, r3, #7
 800194e:	4965      	ldr	r1, [pc, #404]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	4313      	orrs	r3, r2
 8001954:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001956:	4b63      	ldr	r3, [pc, #396]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	429a      	cmp	r2, r3
 8001962:	d001      	beq.n	8001968 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e0b8      	b.n	8001ada <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d020      	beq.n	80019b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	2b00      	cmp	r3, #0
 800197e:	d005      	beq.n	800198c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001980:	4b59      	ldr	r3, [pc, #356]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	4a58      	ldr	r2, [pc, #352]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8001986:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800198a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0308 	and.w	r3, r3, #8
 8001994:	2b00      	cmp	r3, #0
 8001996:	d005      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001998:	4b53      	ldr	r3, [pc, #332]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	4a52      	ldr	r2, [pc, #328]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 800199e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019a4:	4b50      	ldr	r3, [pc, #320]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	494d      	ldr	r1, [pc, #308]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d040      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d107      	bne.n	80019da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ca:	4b47      	ldr	r3, [pc, #284]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d115      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e07f      	b.n	8001ada <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d107      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019e2:	4b41      	ldr	r3, [pc, #260]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d109      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e073      	b.n	8001ada <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f2:	4b3d      	ldr	r3, [pc, #244]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e06b      	b.n	8001ada <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a02:	4b39      	ldr	r3, [pc, #228]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f023 0203 	bic.w	r2, r3, #3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	4936      	ldr	r1, [pc, #216]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a14:	f7ff faa4 	bl	8000f60 <HAL_GetTick>
 8001a18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1a:	e00a      	b.n	8001a32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a1c:	f7ff faa0 	bl	8000f60 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e053      	b.n	8001ada <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a32:	4b2d      	ldr	r3, [pc, #180]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f003 020c 	and.w	r2, r3, #12
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d1eb      	bne.n	8001a1c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a44:	4b27      	ldr	r3, [pc, #156]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d210      	bcs.n	8001a74 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a52:	4b24      	ldr	r3, [pc, #144]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f023 0207 	bic.w	r2, r3, #7
 8001a5a:	4922      	ldr	r1, [pc, #136]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a62:	4b20      	ldr	r3, [pc, #128]	; (8001ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d001      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e032      	b.n	8001ada <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d008      	beq.n	8001a92 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a80:	4b19      	ldr	r3, [pc, #100]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	4916      	ldr	r1, [pc, #88]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0308 	and.w	r3, r3, #8
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d009      	beq.n	8001ab2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a9e:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	490e      	ldr	r1, [pc, #56]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ab2:	f000 f821 	bl	8001af8 <HAL_RCC_GetSysClockFreq>
 8001ab6:	4601      	mov	r1, r0
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	091b      	lsrs	r3, r3, #4
 8001abe:	f003 030f 	and.w	r3, r3, #15
 8001ac2:	4a0a      	ldr	r2, [pc, #40]	; (8001aec <HAL_RCC_ClockConfig+0x1c8>)
 8001ac4:	5cd3      	ldrb	r3, [r2, r3]
 8001ac6:	fa21 f303 	lsr.w	r3, r1, r3
 8001aca:	4a09      	ldr	r2, [pc, #36]	; (8001af0 <HAL_RCC_ClockConfig+0x1cc>)
 8001acc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001ace:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <HAL_RCC_ClockConfig+0x1d0>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff fa02 	bl	8000edc <HAL_InitTick>

  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40022000 	.word	0x40022000
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	080046dc 	.word	0x080046dc
 8001af0:	20000000 	.word	0x20000000
 8001af4:	20000004 	.word	0x20000004

08001af8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001af8:	b490      	push	{r4, r7}
 8001afa:	b08a      	sub	sp, #40	; 0x28
 8001afc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001afe:	4b2a      	ldr	r3, [pc, #168]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b00:	1d3c      	adds	r4, r7, #4
 8001b02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b08:	4b28      	ldr	r3, [pc, #160]	; (8001bac <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61fb      	str	r3, [r7, #28]
 8001b12:	2300      	movs	r3, #0
 8001b14:	61bb      	str	r3, [r7, #24]
 8001b16:	2300      	movs	r3, #0
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b22:	4b23      	ldr	r3, [pc, #140]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	f003 030c 	and.w	r3, r3, #12
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	d002      	beq.n	8001b38 <HAL_RCC_GetSysClockFreq+0x40>
 8001b32:	2b08      	cmp	r3, #8
 8001b34:	d003      	beq.n	8001b3e <HAL_RCC_GetSysClockFreq+0x46>
 8001b36:	e02d      	b.n	8001b94 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b38:	4b1e      	ldr	r3, [pc, #120]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b3a:	623b      	str	r3, [r7, #32]
      break;
 8001b3c:	e02d      	b.n	8001b9a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	0c9b      	lsrs	r3, r3, #18
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b4a:	4413      	add	r3, r2
 8001b4c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b50:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d013      	beq.n	8001b84 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b5c:	4b14      	ldr	r3, [pc, #80]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	0c5b      	lsrs	r3, r3, #17
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b6a:	4413      	add	r3, r2
 8001b6c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b70:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	4a0f      	ldr	r2, [pc, #60]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b76:	fb02 f203 	mul.w	r2, r2, r3
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
 8001b82:	e004      	b.n	8001b8e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	4a0c      	ldr	r2, [pc, #48]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001b88:	fb02 f303 	mul.w	r3, r2, r3
 8001b8c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b90:	623b      	str	r3, [r7, #32]
      break;
 8001b92:	e002      	b.n	8001b9a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b94:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b96:	623b      	str	r3, [r7, #32]
      break;
 8001b98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b9a:	6a3b      	ldr	r3, [r7, #32]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3728      	adds	r7, #40	; 0x28
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc90      	pop	{r4, r7}
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	080046c8 	.word	0x080046c8
 8001bac:	080046d8 	.word	0x080046d8
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	007a1200 	.word	0x007a1200
 8001bb8:	003d0900 	.word	0x003d0900

08001bbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bc0:	4b02      	ldr	r3, [pc, #8]	; (8001bcc <HAL_RCC_GetHCLKFreq+0x10>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr
 8001bcc:	20000000 	.word	0x20000000

08001bd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bd4:	f7ff fff2 	bl	8001bbc <HAL_RCC_GetHCLKFreq>
 8001bd8:	4601      	mov	r1, r0
 8001bda:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	0a1b      	lsrs	r3, r3, #8
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	4a03      	ldr	r2, [pc, #12]	; (8001bf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001be6:	5cd3      	ldrb	r3, [r2, r3]
 8001be8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	080046ec 	.word	0x080046ec

08001bf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bfc:	f7ff ffde 	bl	8001bbc <HAL_RCC_GetHCLKFreq>
 8001c00:	4601      	mov	r1, r0
 8001c02:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	0adb      	lsrs	r3, r3, #11
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	4a03      	ldr	r2, [pc, #12]	; (8001c1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c0e:	5cd3      	ldrb	r3, [r2, r3]
 8001c10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	080046ec 	.word	0x080046ec

08001c20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c28:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <RCC_Delay+0x34>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a0a      	ldr	r2, [pc, #40]	; (8001c58 <RCC_Delay+0x38>)
 8001c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c32:	0a5b      	lsrs	r3, r3, #9
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	fb02 f303 	mul.w	r3, r2, r3
 8001c3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c3c:	bf00      	nop
  }
  while (Delay --);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	1e5a      	subs	r2, r3, #1
 8001c42:	60fa      	str	r2, [r7, #12]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1f9      	bne.n	8001c3c <RCC_Delay+0x1c>
}
 8001c48:	bf00      	nop
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bc80      	pop	{r7}
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	20000000 	.word	0x20000000
 8001c58:	10624dd3 	.word	0x10624dd3

08001c5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e03f      	b.n	8001cee <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d106      	bne.n	8001c88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7fe fff4 	bl	8000c70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2224      	movs	r2, #36	; 0x24
 8001c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68da      	ldr	r2, [r3, #12]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f000 f905 	bl	8001eb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	691a      	ldr	r2, [r3, #16]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001cb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	695a      	ldr	r2, [r3, #20]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001cc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	68da      	ldr	r2, [r3, #12]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2220      	movs	r2, #32
 8001ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2220      	movs	r2, #32
 8001ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b08a      	sub	sp, #40	; 0x28
 8001cfa:	af02      	add	r7, sp, #8
 8001cfc:	60f8      	str	r0, [r7, #12]
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	603b      	str	r3, [r7, #0]
 8001d02:	4613      	mov	r3, r2
 8001d04:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b20      	cmp	r3, #32
 8001d14:	d17c      	bne.n	8001e10 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d002      	beq.n	8001d22 <HAL_UART_Transmit+0x2c>
 8001d1c:	88fb      	ldrh	r3, [r7, #6]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d101      	bne.n	8001d26 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e075      	b.n	8001e12 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d101      	bne.n	8001d34 <HAL_UART_Transmit+0x3e>
 8001d30:	2302      	movs	r3, #2
 8001d32:	e06e      	b.n	8001e12 <HAL_UART_Transmit+0x11c>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2221      	movs	r2, #33	; 0x21
 8001d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d4a:	f7ff f909 	bl	8000f60 <HAL_GetTick>
 8001d4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	88fa      	ldrh	r2, [r7, #6]
 8001d54:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	88fa      	ldrh	r2, [r7, #6]
 8001d5a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d64:	d108      	bne.n	8001d78 <HAL_UART_Transmit+0x82>
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d104      	bne.n	8001d78 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	61bb      	str	r3, [r7, #24]
 8001d76:	e003      	b.n	8001d80 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001d88:	e02a      	b.n	8001de0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	9300      	str	r3, [sp, #0]
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	2200      	movs	r2, #0
 8001d92:	2180      	movs	r1, #128	; 0x80
 8001d94:	68f8      	ldr	r0, [r7, #12]
 8001d96:	f000 f840 	bl	8001e1a <UART_WaitOnFlagUntilTimeout>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001da0:	2303      	movs	r3, #3
 8001da2:	e036      	b.n	8001e12 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10b      	bne.n	8001dc2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	881b      	ldrh	r3, [r3, #0]
 8001dae:	461a      	mov	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001db8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	3302      	adds	r3, #2
 8001dbe:	61bb      	str	r3, [r7, #24]
 8001dc0:	e007      	b.n	8001dd2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	781a      	ldrb	r2, [r3, #0]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1cf      	bne.n	8001d8a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	2200      	movs	r2, #0
 8001df2:	2140      	movs	r1, #64	; 0x40
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f000 f810 	bl	8001e1a <UART_WaitOnFlagUntilTimeout>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e006      	b.n	8001e12 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	2220      	movs	r2, #32
 8001e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	e000      	b.n	8001e12 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001e10:	2302      	movs	r3, #2
  }
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3720      	adds	r7, #32
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b084      	sub	sp, #16
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	60f8      	str	r0, [r7, #12]
 8001e22:	60b9      	str	r1, [r7, #8]
 8001e24:	603b      	str	r3, [r7, #0]
 8001e26:	4613      	mov	r3, r2
 8001e28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e2a:	e02c      	b.n	8001e86 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e32:	d028      	beq.n	8001e86 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d007      	beq.n	8001e4a <UART_WaitOnFlagUntilTimeout+0x30>
 8001e3a:	f7ff f891 	bl	8000f60 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d21d      	bcs.n	8001e86 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	68da      	ldr	r2, [r3, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001e58:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	695a      	ldr	r2, [r3, #20]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 0201 	bic.w	r2, r2, #1
 8001e68:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2220      	movs	r2, #32
 8001e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2220      	movs	r2, #32
 8001e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e00f      	b.n	8001ea6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	68ba      	ldr	r2, [r7, #8]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	bf0c      	ite	eq
 8001e96:	2301      	moveq	r3, #1
 8001e98:	2300      	movne	r3, #0
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d0c3      	beq.n	8001e2c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
	...

08001eb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	691b      	ldr	r3, [r3, #16]
 8001ebe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68da      	ldr	r2, [r3, #12]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	431a      	orrs	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	695b      	ldr	r3, [r3, #20]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001eea:	f023 030c 	bic.w	r3, r3, #12
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	6812      	ldr	r2, [r2, #0]
 8001ef2:	68b9      	ldr	r1, [r7, #8]
 8001ef4:	430b      	orrs	r3, r1
 8001ef6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	699a      	ldr	r2, [r3, #24]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a2c      	ldr	r2, [pc, #176]	; (8001fc4 <UART_SetConfig+0x114>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d103      	bne.n	8001f20 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001f18:	f7ff fe6e 	bl	8001bf8 <HAL_RCC_GetPCLK2Freq>
 8001f1c:	60f8      	str	r0, [r7, #12]
 8001f1e:	e002      	b.n	8001f26 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001f20:	f7ff fe56 	bl	8001bd0 <HAL_RCC_GetPCLK1Freq>
 8001f24:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	009a      	lsls	r2, r3, #2
 8001f30:	441a      	add	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3c:	4a22      	ldr	r2, [pc, #136]	; (8001fc8 <UART_SetConfig+0x118>)
 8001f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f42:	095b      	lsrs	r3, r3, #5
 8001f44:	0119      	lsls	r1, r3, #4
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4413      	add	r3, r2
 8001f4e:	009a      	lsls	r2, r3, #2
 8001f50:	441a      	add	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f5c:	4b1a      	ldr	r3, [pc, #104]	; (8001fc8 <UART_SetConfig+0x118>)
 8001f5e:	fba3 0302 	umull	r0, r3, r3, r2
 8001f62:	095b      	lsrs	r3, r3, #5
 8001f64:	2064      	movs	r0, #100	; 0x64
 8001f66:	fb00 f303 	mul.w	r3, r0, r3
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	011b      	lsls	r3, r3, #4
 8001f6e:	3332      	adds	r3, #50	; 0x32
 8001f70:	4a15      	ldr	r2, [pc, #84]	; (8001fc8 <UART_SetConfig+0x118>)
 8001f72:	fba2 2303 	umull	r2, r3, r2, r3
 8001f76:	095b      	lsrs	r3, r3, #5
 8001f78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f7c:	4419      	add	r1, r3
 8001f7e:	68fa      	ldr	r2, [r7, #12]
 8001f80:	4613      	mov	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	009a      	lsls	r2, r3, #2
 8001f88:	441a      	add	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f94:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <UART_SetConfig+0x118>)
 8001f96:	fba3 0302 	umull	r0, r3, r3, r2
 8001f9a:	095b      	lsrs	r3, r3, #5
 8001f9c:	2064      	movs	r0, #100	; 0x64
 8001f9e:	fb00 f303 	mul.w	r3, r0, r3
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	011b      	lsls	r3, r3, #4
 8001fa6:	3332      	adds	r3, #50	; 0x32
 8001fa8:	4a07      	ldr	r2, [pc, #28]	; (8001fc8 <UART_SetConfig+0x118>)
 8001faa:	fba2 2303 	umull	r2, r3, r2, r3
 8001fae:	095b      	lsrs	r3, r3, #5
 8001fb0:	f003 020f 	and.w	r2, r3, #15
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	440a      	add	r2, r1
 8001fba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001fbc:	bf00      	nop
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40013800 	.word	0x40013800
 8001fc8:	51eb851f 	.word	0x51eb851f

08001fcc <__errno>:
 8001fcc:	4b01      	ldr	r3, [pc, #4]	; (8001fd4 <__errno+0x8>)
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	2000000c 	.word	0x2000000c

08001fd8 <__libc_init_array>:
 8001fd8:	b570      	push	{r4, r5, r6, lr}
 8001fda:	2500      	movs	r5, #0
 8001fdc:	4e0c      	ldr	r6, [pc, #48]	; (8002010 <__libc_init_array+0x38>)
 8001fde:	4c0d      	ldr	r4, [pc, #52]	; (8002014 <__libc_init_array+0x3c>)
 8001fe0:	1ba4      	subs	r4, r4, r6
 8001fe2:	10a4      	asrs	r4, r4, #2
 8001fe4:	42a5      	cmp	r5, r4
 8001fe6:	d109      	bne.n	8001ffc <__libc_init_array+0x24>
 8001fe8:	f002 fb48 	bl	800467c <_init>
 8001fec:	2500      	movs	r5, #0
 8001fee:	4e0a      	ldr	r6, [pc, #40]	; (8002018 <__libc_init_array+0x40>)
 8001ff0:	4c0a      	ldr	r4, [pc, #40]	; (800201c <__libc_init_array+0x44>)
 8001ff2:	1ba4      	subs	r4, r4, r6
 8001ff4:	10a4      	asrs	r4, r4, #2
 8001ff6:	42a5      	cmp	r5, r4
 8001ff8:	d105      	bne.n	8002006 <__libc_init_array+0x2e>
 8001ffa:	bd70      	pop	{r4, r5, r6, pc}
 8001ffc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002000:	4798      	blx	r3
 8002002:	3501      	adds	r5, #1
 8002004:	e7ee      	b.n	8001fe4 <__libc_init_array+0xc>
 8002006:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800200a:	4798      	blx	r3
 800200c:	3501      	adds	r5, #1
 800200e:	e7f2      	b.n	8001ff6 <__libc_init_array+0x1e>
 8002010:	080049b8 	.word	0x080049b8
 8002014:	080049b8 	.word	0x080049b8
 8002018:	080049b8 	.word	0x080049b8
 800201c:	080049bc 	.word	0x080049bc

08002020 <memset>:
 8002020:	4603      	mov	r3, r0
 8002022:	4402      	add	r2, r0
 8002024:	4293      	cmp	r3, r2
 8002026:	d100      	bne.n	800202a <memset+0xa>
 8002028:	4770      	bx	lr
 800202a:	f803 1b01 	strb.w	r1, [r3], #1
 800202e:	e7f9      	b.n	8002024 <memset+0x4>

08002030 <__cvt>:
 8002030:	2b00      	cmp	r3, #0
 8002032:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002036:	461e      	mov	r6, r3
 8002038:	bfbb      	ittet	lt
 800203a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800203e:	461e      	movlt	r6, r3
 8002040:	2300      	movge	r3, #0
 8002042:	232d      	movlt	r3, #45	; 0x2d
 8002044:	b088      	sub	sp, #32
 8002046:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8002048:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 800204c:	f027 0720 	bic.w	r7, r7, #32
 8002050:	2f46      	cmp	r7, #70	; 0x46
 8002052:	4614      	mov	r4, r2
 8002054:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002056:	700b      	strb	r3, [r1, #0]
 8002058:	d004      	beq.n	8002064 <__cvt+0x34>
 800205a:	2f45      	cmp	r7, #69	; 0x45
 800205c:	d100      	bne.n	8002060 <__cvt+0x30>
 800205e:	3501      	adds	r5, #1
 8002060:	2302      	movs	r3, #2
 8002062:	e000      	b.n	8002066 <__cvt+0x36>
 8002064:	2303      	movs	r3, #3
 8002066:	aa07      	add	r2, sp, #28
 8002068:	9204      	str	r2, [sp, #16]
 800206a:	aa06      	add	r2, sp, #24
 800206c:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002070:	e9cd 3500 	strd	r3, r5, [sp]
 8002074:	4622      	mov	r2, r4
 8002076:	4633      	mov	r3, r6
 8002078:	f000 fcd2 	bl	8002a20 <_dtoa_r>
 800207c:	2f47      	cmp	r7, #71	; 0x47
 800207e:	4680      	mov	r8, r0
 8002080:	d102      	bne.n	8002088 <__cvt+0x58>
 8002082:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002084:	07db      	lsls	r3, r3, #31
 8002086:	d526      	bpl.n	80020d6 <__cvt+0xa6>
 8002088:	2f46      	cmp	r7, #70	; 0x46
 800208a:	eb08 0905 	add.w	r9, r8, r5
 800208e:	d111      	bne.n	80020b4 <__cvt+0x84>
 8002090:	f898 3000 	ldrb.w	r3, [r8]
 8002094:	2b30      	cmp	r3, #48	; 0x30
 8002096:	d10a      	bne.n	80020ae <__cvt+0x7e>
 8002098:	2200      	movs	r2, #0
 800209a:	2300      	movs	r3, #0
 800209c:	4620      	mov	r0, r4
 800209e:	4631      	mov	r1, r6
 80020a0:	f7fe fc82 	bl	80009a8 <__aeabi_dcmpeq>
 80020a4:	b918      	cbnz	r0, 80020ae <__cvt+0x7e>
 80020a6:	f1c5 0501 	rsb	r5, r5, #1
 80020aa:	f8ca 5000 	str.w	r5, [sl]
 80020ae:	f8da 3000 	ldr.w	r3, [sl]
 80020b2:	4499      	add	r9, r3
 80020b4:	2200      	movs	r2, #0
 80020b6:	2300      	movs	r3, #0
 80020b8:	4620      	mov	r0, r4
 80020ba:	4631      	mov	r1, r6
 80020bc:	f7fe fc74 	bl	80009a8 <__aeabi_dcmpeq>
 80020c0:	b938      	cbnz	r0, 80020d2 <__cvt+0xa2>
 80020c2:	2230      	movs	r2, #48	; 0x30
 80020c4:	9b07      	ldr	r3, [sp, #28]
 80020c6:	454b      	cmp	r3, r9
 80020c8:	d205      	bcs.n	80020d6 <__cvt+0xa6>
 80020ca:	1c59      	adds	r1, r3, #1
 80020cc:	9107      	str	r1, [sp, #28]
 80020ce:	701a      	strb	r2, [r3, #0]
 80020d0:	e7f8      	b.n	80020c4 <__cvt+0x94>
 80020d2:	f8cd 901c 	str.w	r9, [sp, #28]
 80020d6:	4640      	mov	r0, r8
 80020d8:	9b07      	ldr	r3, [sp, #28]
 80020da:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80020dc:	eba3 0308 	sub.w	r3, r3, r8
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	b008      	add	sp, #32
 80020e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080020e8 <__exponent>:
 80020e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80020ea:	2900      	cmp	r1, #0
 80020ec:	bfb4      	ite	lt
 80020ee:	232d      	movlt	r3, #45	; 0x2d
 80020f0:	232b      	movge	r3, #43	; 0x2b
 80020f2:	4604      	mov	r4, r0
 80020f4:	bfb8      	it	lt
 80020f6:	4249      	neglt	r1, r1
 80020f8:	2909      	cmp	r1, #9
 80020fa:	f804 2b02 	strb.w	r2, [r4], #2
 80020fe:	7043      	strb	r3, [r0, #1]
 8002100:	dd21      	ble.n	8002146 <__exponent+0x5e>
 8002102:	f10d 0307 	add.w	r3, sp, #7
 8002106:	461f      	mov	r7, r3
 8002108:	260a      	movs	r6, #10
 800210a:	fb91 f5f6 	sdiv	r5, r1, r6
 800210e:	fb06 1115 	mls	r1, r6, r5, r1
 8002112:	2d09      	cmp	r5, #9
 8002114:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8002118:	f803 1c01 	strb.w	r1, [r3, #-1]
 800211c:	f103 32ff 	add.w	r2, r3, #4294967295
 8002120:	4629      	mov	r1, r5
 8002122:	dc09      	bgt.n	8002138 <__exponent+0x50>
 8002124:	3130      	adds	r1, #48	; 0x30
 8002126:	3b02      	subs	r3, #2
 8002128:	f802 1c01 	strb.w	r1, [r2, #-1]
 800212c:	42bb      	cmp	r3, r7
 800212e:	4622      	mov	r2, r4
 8002130:	d304      	bcc.n	800213c <__exponent+0x54>
 8002132:	1a10      	subs	r0, r2, r0
 8002134:	b003      	add	sp, #12
 8002136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002138:	4613      	mov	r3, r2
 800213a:	e7e6      	b.n	800210a <__exponent+0x22>
 800213c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002140:	f804 2b01 	strb.w	r2, [r4], #1
 8002144:	e7f2      	b.n	800212c <__exponent+0x44>
 8002146:	2330      	movs	r3, #48	; 0x30
 8002148:	4419      	add	r1, r3
 800214a:	7083      	strb	r3, [r0, #2]
 800214c:	1d02      	adds	r2, r0, #4
 800214e:	70c1      	strb	r1, [r0, #3]
 8002150:	e7ef      	b.n	8002132 <__exponent+0x4a>
	...

08002154 <_printf_float>:
 8002154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002158:	b091      	sub	sp, #68	; 0x44
 800215a:	460c      	mov	r4, r1
 800215c:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 800215e:	4693      	mov	fp, r2
 8002160:	461e      	mov	r6, r3
 8002162:	4605      	mov	r5, r0
 8002164:	f001 fada 	bl	800371c <_localeconv_r>
 8002168:	6803      	ldr	r3, [r0, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	9309      	str	r3, [sp, #36]	; 0x24
 800216e:	f7fd ffef 	bl	8000150 <strlen>
 8002172:	2300      	movs	r3, #0
 8002174:	930e      	str	r3, [sp, #56]	; 0x38
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	900a      	str	r0, [sp, #40]	; 0x28
 800217a:	3307      	adds	r3, #7
 800217c:	f023 0307 	bic.w	r3, r3, #7
 8002180:	f103 0208 	add.w	r2, r3, #8
 8002184:	f894 8018 	ldrb.w	r8, [r4, #24]
 8002188:	f8d4 a000 	ldr.w	sl, [r4]
 800218c:	603a      	str	r2, [r7, #0]
 800218e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002192:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002196:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800219a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800219e:	930b      	str	r3, [sp, #44]	; 0x2c
 80021a0:	f04f 32ff 	mov.w	r2, #4294967295
 80021a4:	4ba6      	ldr	r3, [pc, #664]	; (8002440 <_printf_float+0x2ec>)
 80021a6:	4638      	mov	r0, r7
 80021a8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80021aa:	f7fe fc2f 	bl	8000a0c <__aeabi_dcmpun>
 80021ae:	bb68      	cbnz	r0, 800220c <_printf_float+0xb8>
 80021b0:	f04f 32ff 	mov.w	r2, #4294967295
 80021b4:	4ba2      	ldr	r3, [pc, #648]	; (8002440 <_printf_float+0x2ec>)
 80021b6:	4638      	mov	r0, r7
 80021b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80021ba:	f7fe fc09 	bl	80009d0 <__aeabi_dcmple>
 80021be:	bb28      	cbnz	r0, 800220c <_printf_float+0xb8>
 80021c0:	2200      	movs	r2, #0
 80021c2:	2300      	movs	r3, #0
 80021c4:	4638      	mov	r0, r7
 80021c6:	4649      	mov	r1, r9
 80021c8:	f7fe fbf8 	bl	80009bc <__aeabi_dcmplt>
 80021cc:	b110      	cbz	r0, 80021d4 <_printf_float+0x80>
 80021ce:	232d      	movs	r3, #45	; 0x2d
 80021d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80021d4:	4f9b      	ldr	r7, [pc, #620]	; (8002444 <_printf_float+0x2f0>)
 80021d6:	4b9c      	ldr	r3, [pc, #624]	; (8002448 <_printf_float+0x2f4>)
 80021d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80021dc:	bf98      	it	ls
 80021de:	461f      	movls	r7, r3
 80021e0:	2303      	movs	r3, #3
 80021e2:	f04f 0900 	mov.w	r9, #0
 80021e6:	6123      	str	r3, [r4, #16]
 80021e8:	f02a 0304 	bic.w	r3, sl, #4
 80021ec:	6023      	str	r3, [r4, #0]
 80021ee:	9600      	str	r6, [sp, #0]
 80021f0:	465b      	mov	r3, fp
 80021f2:	aa0f      	add	r2, sp, #60	; 0x3c
 80021f4:	4621      	mov	r1, r4
 80021f6:	4628      	mov	r0, r5
 80021f8:	f000 f9e2 	bl	80025c0 <_printf_common>
 80021fc:	3001      	adds	r0, #1
 80021fe:	f040 8090 	bne.w	8002322 <_printf_float+0x1ce>
 8002202:	f04f 30ff 	mov.w	r0, #4294967295
 8002206:	b011      	add	sp, #68	; 0x44
 8002208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800220c:	463a      	mov	r2, r7
 800220e:	464b      	mov	r3, r9
 8002210:	4638      	mov	r0, r7
 8002212:	4649      	mov	r1, r9
 8002214:	f7fe fbfa 	bl	8000a0c <__aeabi_dcmpun>
 8002218:	b110      	cbz	r0, 8002220 <_printf_float+0xcc>
 800221a:	4f8c      	ldr	r7, [pc, #560]	; (800244c <_printf_float+0x2f8>)
 800221c:	4b8c      	ldr	r3, [pc, #560]	; (8002450 <_printf_float+0x2fc>)
 800221e:	e7db      	b.n	80021d8 <_printf_float+0x84>
 8002220:	6863      	ldr	r3, [r4, #4]
 8002222:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8002226:	1c59      	adds	r1, r3, #1
 8002228:	a80d      	add	r0, sp, #52	; 0x34
 800222a:	a90e      	add	r1, sp, #56	; 0x38
 800222c:	d140      	bne.n	80022b0 <_printf_float+0x15c>
 800222e:	2306      	movs	r3, #6
 8002230:	6063      	str	r3, [r4, #4]
 8002232:	f04f 0c00 	mov.w	ip, #0
 8002236:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 800223a:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800223e:	6863      	ldr	r3, [r4, #4]
 8002240:	6022      	str	r2, [r4, #0]
 8002242:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	463a      	mov	r2, r7
 800224a:	464b      	mov	r3, r9
 800224c:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8002250:	4628      	mov	r0, r5
 8002252:	f7ff feed 	bl	8002030 <__cvt>
 8002256:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 800225a:	2b47      	cmp	r3, #71	; 0x47
 800225c:	4607      	mov	r7, r0
 800225e:	d109      	bne.n	8002274 <_printf_float+0x120>
 8002260:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002262:	1cd8      	adds	r0, r3, #3
 8002264:	db02      	blt.n	800226c <_printf_float+0x118>
 8002266:	6862      	ldr	r2, [r4, #4]
 8002268:	4293      	cmp	r3, r2
 800226a:	dd47      	ble.n	80022fc <_printf_float+0x1a8>
 800226c:	f1a8 0802 	sub.w	r8, r8, #2
 8002270:	fa5f f888 	uxtb.w	r8, r8
 8002274:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8002278:	990d      	ldr	r1, [sp, #52]	; 0x34
 800227a:	d824      	bhi.n	80022c6 <_printf_float+0x172>
 800227c:	3901      	subs	r1, #1
 800227e:	4642      	mov	r2, r8
 8002280:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002284:	910d      	str	r1, [sp, #52]	; 0x34
 8002286:	f7ff ff2f 	bl	80020e8 <__exponent>
 800228a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800228c:	4681      	mov	r9, r0
 800228e:	1813      	adds	r3, r2, r0
 8002290:	2a01      	cmp	r2, #1
 8002292:	6123      	str	r3, [r4, #16]
 8002294:	dc02      	bgt.n	800229c <_printf_float+0x148>
 8002296:	6822      	ldr	r2, [r4, #0]
 8002298:	07d1      	lsls	r1, r2, #31
 800229a:	d501      	bpl.n	80022a0 <_printf_float+0x14c>
 800229c:	3301      	adds	r3, #1
 800229e:	6123      	str	r3, [r4, #16]
 80022a0:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d0a2      	beq.n	80021ee <_printf_float+0x9a>
 80022a8:	232d      	movs	r3, #45	; 0x2d
 80022aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80022ae:	e79e      	b.n	80021ee <_printf_float+0x9a>
 80022b0:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 80022b4:	f000 816e 	beq.w	8002594 <_printf_float+0x440>
 80022b8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80022bc:	d1b9      	bne.n	8002232 <_printf_float+0xde>
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1b7      	bne.n	8002232 <_printf_float+0xde>
 80022c2:	2301      	movs	r3, #1
 80022c4:	e7b4      	b.n	8002230 <_printf_float+0xdc>
 80022c6:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 80022ca:	d119      	bne.n	8002300 <_printf_float+0x1ac>
 80022cc:	2900      	cmp	r1, #0
 80022ce:	6863      	ldr	r3, [r4, #4]
 80022d0:	dd0c      	ble.n	80022ec <_printf_float+0x198>
 80022d2:	6121      	str	r1, [r4, #16]
 80022d4:	b913      	cbnz	r3, 80022dc <_printf_float+0x188>
 80022d6:	6822      	ldr	r2, [r4, #0]
 80022d8:	07d2      	lsls	r2, r2, #31
 80022da:	d502      	bpl.n	80022e2 <_printf_float+0x18e>
 80022dc:	3301      	adds	r3, #1
 80022de:	440b      	add	r3, r1
 80022e0:	6123      	str	r3, [r4, #16]
 80022e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80022e4:	f04f 0900 	mov.w	r9, #0
 80022e8:	65a3      	str	r3, [r4, #88]	; 0x58
 80022ea:	e7d9      	b.n	80022a0 <_printf_float+0x14c>
 80022ec:	b913      	cbnz	r3, 80022f4 <_printf_float+0x1a0>
 80022ee:	6822      	ldr	r2, [r4, #0]
 80022f0:	07d0      	lsls	r0, r2, #31
 80022f2:	d501      	bpl.n	80022f8 <_printf_float+0x1a4>
 80022f4:	3302      	adds	r3, #2
 80022f6:	e7f3      	b.n	80022e0 <_printf_float+0x18c>
 80022f8:	2301      	movs	r3, #1
 80022fa:	e7f1      	b.n	80022e0 <_printf_float+0x18c>
 80022fc:	f04f 0867 	mov.w	r8, #103	; 0x67
 8002300:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8002304:	4293      	cmp	r3, r2
 8002306:	db05      	blt.n	8002314 <_printf_float+0x1c0>
 8002308:	6822      	ldr	r2, [r4, #0]
 800230a:	6123      	str	r3, [r4, #16]
 800230c:	07d1      	lsls	r1, r2, #31
 800230e:	d5e8      	bpl.n	80022e2 <_printf_float+0x18e>
 8002310:	3301      	adds	r3, #1
 8002312:	e7e5      	b.n	80022e0 <_printf_float+0x18c>
 8002314:	2b00      	cmp	r3, #0
 8002316:	bfcc      	ite	gt
 8002318:	2301      	movgt	r3, #1
 800231a:	f1c3 0302 	rsble	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	e7de      	b.n	80022e0 <_printf_float+0x18c>
 8002322:	6823      	ldr	r3, [r4, #0]
 8002324:	055a      	lsls	r2, r3, #21
 8002326:	d407      	bmi.n	8002338 <_printf_float+0x1e4>
 8002328:	6923      	ldr	r3, [r4, #16]
 800232a:	463a      	mov	r2, r7
 800232c:	4659      	mov	r1, fp
 800232e:	4628      	mov	r0, r5
 8002330:	47b0      	blx	r6
 8002332:	3001      	adds	r0, #1
 8002334:	d129      	bne.n	800238a <_printf_float+0x236>
 8002336:	e764      	b.n	8002202 <_printf_float+0xae>
 8002338:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 800233c:	f240 80d7 	bls.w	80024ee <_printf_float+0x39a>
 8002340:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002344:	2200      	movs	r2, #0
 8002346:	2300      	movs	r3, #0
 8002348:	f7fe fb2e 	bl	80009a8 <__aeabi_dcmpeq>
 800234c:	b388      	cbz	r0, 80023b2 <_printf_float+0x25e>
 800234e:	2301      	movs	r3, #1
 8002350:	4a40      	ldr	r2, [pc, #256]	; (8002454 <_printf_float+0x300>)
 8002352:	4659      	mov	r1, fp
 8002354:	4628      	mov	r0, r5
 8002356:	47b0      	blx	r6
 8002358:	3001      	adds	r0, #1
 800235a:	f43f af52 	beq.w	8002202 <_printf_float+0xae>
 800235e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8002362:	429a      	cmp	r2, r3
 8002364:	db02      	blt.n	800236c <_printf_float+0x218>
 8002366:	6823      	ldr	r3, [r4, #0]
 8002368:	07d8      	lsls	r0, r3, #31
 800236a:	d50e      	bpl.n	800238a <_printf_float+0x236>
 800236c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002370:	4659      	mov	r1, fp
 8002372:	4628      	mov	r0, r5
 8002374:	47b0      	blx	r6
 8002376:	3001      	adds	r0, #1
 8002378:	f43f af43 	beq.w	8002202 <_printf_float+0xae>
 800237c:	2700      	movs	r7, #0
 800237e:	f104 081a 	add.w	r8, r4, #26
 8002382:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002384:	3b01      	subs	r3, #1
 8002386:	42bb      	cmp	r3, r7
 8002388:	dc09      	bgt.n	800239e <_printf_float+0x24a>
 800238a:	6823      	ldr	r3, [r4, #0]
 800238c:	079f      	lsls	r7, r3, #30
 800238e:	f100 80fd 	bmi.w	800258c <_printf_float+0x438>
 8002392:	68e0      	ldr	r0, [r4, #12]
 8002394:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002396:	4298      	cmp	r0, r3
 8002398:	bfb8      	it	lt
 800239a:	4618      	movlt	r0, r3
 800239c:	e733      	b.n	8002206 <_printf_float+0xb2>
 800239e:	2301      	movs	r3, #1
 80023a0:	4642      	mov	r2, r8
 80023a2:	4659      	mov	r1, fp
 80023a4:	4628      	mov	r0, r5
 80023a6:	47b0      	blx	r6
 80023a8:	3001      	adds	r0, #1
 80023aa:	f43f af2a 	beq.w	8002202 <_printf_float+0xae>
 80023ae:	3701      	adds	r7, #1
 80023b0:	e7e7      	b.n	8002382 <_printf_float+0x22e>
 80023b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	dc2b      	bgt.n	8002410 <_printf_float+0x2bc>
 80023b8:	2301      	movs	r3, #1
 80023ba:	4a26      	ldr	r2, [pc, #152]	; (8002454 <_printf_float+0x300>)
 80023bc:	4659      	mov	r1, fp
 80023be:	4628      	mov	r0, r5
 80023c0:	47b0      	blx	r6
 80023c2:	3001      	adds	r0, #1
 80023c4:	f43f af1d 	beq.w	8002202 <_printf_float+0xae>
 80023c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80023ca:	b923      	cbnz	r3, 80023d6 <_printf_float+0x282>
 80023cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80023ce:	b913      	cbnz	r3, 80023d6 <_printf_float+0x282>
 80023d0:	6823      	ldr	r3, [r4, #0]
 80023d2:	07d9      	lsls	r1, r3, #31
 80023d4:	d5d9      	bpl.n	800238a <_printf_float+0x236>
 80023d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80023da:	4659      	mov	r1, fp
 80023dc:	4628      	mov	r0, r5
 80023de:	47b0      	blx	r6
 80023e0:	3001      	adds	r0, #1
 80023e2:	f43f af0e 	beq.w	8002202 <_printf_float+0xae>
 80023e6:	f04f 0800 	mov.w	r8, #0
 80023ea:	f104 091a 	add.w	r9, r4, #26
 80023ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80023f0:	425b      	negs	r3, r3
 80023f2:	4543      	cmp	r3, r8
 80023f4:	dc01      	bgt.n	80023fa <_printf_float+0x2a6>
 80023f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80023f8:	e797      	b.n	800232a <_printf_float+0x1d6>
 80023fa:	2301      	movs	r3, #1
 80023fc:	464a      	mov	r2, r9
 80023fe:	4659      	mov	r1, fp
 8002400:	4628      	mov	r0, r5
 8002402:	47b0      	blx	r6
 8002404:	3001      	adds	r0, #1
 8002406:	f43f aefc 	beq.w	8002202 <_printf_float+0xae>
 800240a:	f108 0801 	add.w	r8, r8, #1
 800240e:	e7ee      	b.n	80023ee <_printf_float+0x29a>
 8002410:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002412:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002414:	429a      	cmp	r2, r3
 8002416:	bfa8      	it	ge
 8002418:	461a      	movge	r2, r3
 800241a:	2a00      	cmp	r2, #0
 800241c:	4690      	mov	r8, r2
 800241e:	dd07      	ble.n	8002430 <_printf_float+0x2dc>
 8002420:	4613      	mov	r3, r2
 8002422:	4659      	mov	r1, fp
 8002424:	463a      	mov	r2, r7
 8002426:	4628      	mov	r0, r5
 8002428:	47b0      	blx	r6
 800242a:	3001      	adds	r0, #1
 800242c:	f43f aee9 	beq.w	8002202 <_printf_float+0xae>
 8002430:	f104 031a 	add.w	r3, r4, #26
 8002434:	f04f 0a00 	mov.w	sl, #0
 8002438:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800243c:	930b      	str	r3, [sp, #44]	; 0x2c
 800243e:	e015      	b.n	800246c <_printf_float+0x318>
 8002440:	7fefffff 	.word	0x7fefffff
 8002444:	080046fc 	.word	0x080046fc
 8002448:	080046f8 	.word	0x080046f8
 800244c:	08004704 	.word	0x08004704
 8002450:	08004700 	.word	0x08004700
 8002454:	08004708 	.word	0x08004708
 8002458:	2301      	movs	r3, #1
 800245a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800245c:	4659      	mov	r1, fp
 800245e:	4628      	mov	r0, r5
 8002460:	47b0      	blx	r6
 8002462:	3001      	adds	r0, #1
 8002464:	f43f aecd 	beq.w	8002202 <_printf_float+0xae>
 8002468:	f10a 0a01 	add.w	sl, sl, #1
 800246c:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8002470:	eba9 0308 	sub.w	r3, r9, r8
 8002474:	4553      	cmp	r3, sl
 8002476:	dcef      	bgt.n	8002458 <_printf_float+0x304>
 8002478:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800247c:	429a      	cmp	r2, r3
 800247e:	444f      	add	r7, r9
 8002480:	db14      	blt.n	80024ac <_printf_float+0x358>
 8002482:	6823      	ldr	r3, [r4, #0]
 8002484:	07da      	lsls	r2, r3, #31
 8002486:	d411      	bmi.n	80024ac <_printf_float+0x358>
 8002488:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800248a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800248c:	eba3 0209 	sub.w	r2, r3, r9
 8002490:	eba3 0901 	sub.w	r9, r3, r1
 8002494:	4591      	cmp	r9, r2
 8002496:	bfa8      	it	ge
 8002498:	4691      	movge	r9, r2
 800249a:	f1b9 0f00 	cmp.w	r9, #0
 800249e:	dc0d      	bgt.n	80024bc <_printf_float+0x368>
 80024a0:	2700      	movs	r7, #0
 80024a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80024a6:	f104 081a 	add.w	r8, r4, #26
 80024aa:	e018      	b.n	80024de <_printf_float+0x38a>
 80024ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80024b0:	4659      	mov	r1, fp
 80024b2:	4628      	mov	r0, r5
 80024b4:	47b0      	blx	r6
 80024b6:	3001      	adds	r0, #1
 80024b8:	d1e6      	bne.n	8002488 <_printf_float+0x334>
 80024ba:	e6a2      	b.n	8002202 <_printf_float+0xae>
 80024bc:	464b      	mov	r3, r9
 80024be:	463a      	mov	r2, r7
 80024c0:	4659      	mov	r1, fp
 80024c2:	4628      	mov	r0, r5
 80024c4:	47b0      	blx	r6
 80024c6:	3001      	adds	r0, #1
 80024c8:	d1ea      	bne.n	80024a0 <_printf_float+0x34c>
 80024ca:	e69a      	b.n	8002202 <_printf_float+0xae>
 80024cc:	2301      	movs	r3, #1
 80024ce:	4642      	mov	r2, r8
 80024d0:	4659      	mov	r1, fp
 80024d2:	4628      	mov	r0, r5
 80024d4:	47b0      	blx	r6
 80024d6:	3001      	adds	r0, #1
 80024d8:	f43f ae93 	beq.w	8002202 <_printf_float+0xae>
 80024dc:	3701      	adds	r7, #1
 80024de:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80024e2:	1a9b      	subs	r3, r3, r2
 80024e4:	eba3 0309 	sub.w	r3, r3, r9
 80024e8:	42bb      	cmp	r3, r7
 80024ea:	dcef      	bgt.n	80024cc <_printf_float+0x378>
 80024ec:	e74d      	b.n	800238a <_printf_float+0x236>
 80024ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80024f0:	2a01      	cmp	r2, #1
 80024f2:	dc01      	bgt.n	80024f8 <_printf_float+0x3a4>
 80024f4:	07db      	lsls	r3, r3, #31
 80024f6:	d538      	bpl.n	800256a <_printf_float+0x416>
 80024f8:	2301      	movs	r3, #1
 80024fa:	463a      	mov	r2, r7
 80024fc:	4659      	mov	r1, fp
 80024fe:	4628      	mov	r0, r5
 8002500:	47b0      	blx	r6
 8002502:	3001      	adds	r0, #1
 8002504:	f43f ae7d 	beq.w	8002202 <_printf_float+0xae>
 8002508:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800250c:	4659      	mov	r1, fp
 800250e:	4628      	mov	r0, r5
 8002510:	47b0      	blx	r6
 8002512:	3001      	adds	r0, #1
 8002514:	f107 0701 	add.w	r7, r7, #1
 8002518:	f43f ae73 	beq.w	8002202 <_printf_float+0xae>
 800251c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002520:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002522:	2200      	movs	r2, #0
 8002524:	f103 38ff 	add.w	r8, r3, #4294967295
 8002528:	2300      	movs	r3, #0
 800252a:	f7fe fa3d 	bl	80009a8 <__aeabi_dcmpeq>
 800252e:	b9c0      	cbnz	r0, 8002562 <_printf_float+0x40e>
 8002530:	4643      	mov	r3, r8
 8002532:	463a      	mov	r2, r7
 8002534:	4659      	mov	r1, fp
 8002536:	4628      	mov	r0, r5
 8002538:	47b0      	blx	r6
 800253a:	3001      	adds	r0, #1
 800253c:	d10d      	bne.n	800255a <_printf_float+0x406>
 800253e:	e660      	b.n	8002202 <_printf_float+0xae>
 8002540:	2301      	movs	r3, #1
 8002542:	4642      	mov	r2, r8
 8002544:	4659      	mov	r1, fp
 8002546:	4628      	mov	r0, r5
 8002548:	47b0      	blx	r6
 800254a:	3001      	adds	r0, #1
 800254c:	f43f ae59 	beq.w	8002202 <_printf_float+0xae>
 8002550:	3701      	adds	r7, #1
 8002552:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002554:	3b01      	subs	r3, #1
 8002556:	42bb      	cmp	r3, r7
 8002558:	dcf2      	bgt.n	8002540 <_printf_float+0x3ec>
 800255a:	464b      	mov	r3, r9
 800255c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002560:	e6e4      	b.n	800232c <_printf_float+0x1d8>
 8002562:	2700      	movs	r7, #0
 8002564:	f104 081a 	add.w	r8, r4, #26
 8002568:	e7f3      	b.n	8002552 <_printf_float+0x3fe>
 800256a:	2301      	movs	r3, #1
 800256c:	e7e1      	b.n	8002532 <_printf_float+0x3de>
 800256e:	2301      	movs	r3, #1
 8002570:	4642      	mov	r2, r8
 8002572:	4659      	mov	r1, fp
 8002574:	4628      	mov	r0, r5
 8002576:	47b0      	blx	r6
 8002578:	3001      	adds	r0, #1
 800257a:	f43f ae42 	beq.w	8002202 <_printf_float+0xae>
 800257e:	3701      	adds	r7, #1
 8002580:	68e3      	ldr	r3, [r4, #12]
 8002582:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002584:	1a9b      	subs	r3, r3, r2
 8002586:	42bb      	cmp	r3, r7
 8002588:	dcf1      	bgt.n	800256e <_printf_float+0x41a>
 800258a:	e702      	b.n	8002392 <_printf_float+0x23e>
 800258c:	2700      	movs	r7, #0
 800258e:	f104 0819 	add.w	r8, r4, #25
 8002592:	e7f5      	b.n	8002580 <_printf_float+0x42c>
 8002594:	2b00      	cmp	r3, #0
 8002596:	f43f ae94 	beq.w	80022c2 <_printf_float+0x16e>
 800259a:	f04f 0c00 	mov.w	ip, #0
 800259e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80025a2:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 80025a6:	6022      	str	r2, [r4, #0]
 80025a8:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80025ac:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	463a      	mov	r2, r7
 80025b4:	464b      	mov	r3, r9
 80025b6:	4628      	mov	r0, r5
 80025b8:	f7ff fd3a 	bl	8002030 <__cvt>
 80025bc:	4607      	mov	r7, r0
 80025be:	e64f      	b.n	8002260 <_printf_float+0x10c>

080025c0 <_printf_common>:
 80025c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025c4:	4691      	mov	r9, r2
 80025c6:	461f      	mov	r7, r3
 80025c8:	688a      	ldr	r2, [r1, #8]
 80025ca:	690b      	ldr	r3, [r1, #16]
 80025cc:	4606      	mov	r6, r0
 80025ce:	4293      	cmp	r3, r2
 80025d0:	bfb8      	it	lt
 80025d2:	4613      	movlt	r3, r2
 80025d4:	f8c9 3000 	str.w	r3, [r9]
 80025d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80025dc:	460c      	mov	r4, r1
 80025de:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80025e2:	b112      	cbz	r2, 80025ea <_printf_common+0x2a>
 80025e4:	3301      	adds	r3, #1
 80025e6:	f8c9 3000 	str.w	r3, [r9]
 80025ea:	6823      	ldr	r3, [r4, #0]
 80025ec:	0699      	lsls	r1, r3, #26
 80025ee:	bf42      	ittt	mi
 80025f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80025f4:	3302      	addmi	r3, #2
 80025f6:	f8c9 3000 	strmi.w	r3, [r9]
 80025fa:	6825      	ldr	r5, [r4, #0]
 80025fc:	f015 0506 	ands.w	r5, r5, #6
 8002600:	d107      	bne.n	8002612 <_printf_common+0x52>
 8002602:	f104 0a19 	add.w	sl, r4, #25
 8002606:	68e3      	ldr	r3, [r4, #12]
 8002608:	f8d9 2000 	ldr.w	r2, [r9]
 800260c:	1a9b      	subs	r3, r3, r2
 800260e:	42ab      	cmp	r3, r5
 8002610:	dc29      	bgt.n	8002666 <_printf_common+0xa6>
 8002612:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002616:	6822      	ldr	r2, [r4, #0]
 8002618:	3300      	adds	r3, #0
 800261a:	bf18      	it	ne
 800261c:	2301      	movne	r3, #1
 800261e:	0692      	lsls	r2, r2, #26
 8002620:	d42e      	bmi.n	8002680 <_printf_common+0xc0>
 8002622:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002626:	4639      	mov	r1, r7
 8002628:	4630      	mov	r0, r6
 800262a:	47c0      	blx	r8
 800262c:	3001      	adds	r0, #1
 800262e:	d021      	beq.n	8002674 <_printf_common+0xb4>
 8002630:	6823      	ldr	r3, [r4, #0]
 8002632:	68e5      	ldr	r5, [r4, #12]
 8002634:	f003 0306 	and.w	r3, r3, #6
 8002638:	2b04      	cmp	r3, #4
 800263a:	bf18      	it	ne
 800263c:	2500      	movne	r5, #0
 800263e:	f8d9 2000 	ldr.w	r2, [r9]
 8002642:	f04f 0900 	mov.w	r9, #0
 8002646:	bf08      	it	eq
 8002648:	1aad      	subeq	r5, r5, r2
 800264a:	68a3      	ldr	r3, [r4, #8]
 800264c:	6922      	ldr	r2, [r4, #16]
 800264e:	bf08      	it	eq
 8002650:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002654:	4293      	cmp	r3, r2
 8002656:	bfc4      	itt	gt
 8002658:	1a9b      	subgt	r3, r3, r2
 800265a:	18ed      	addgt	r5, r5, r3
 800265c:	341a      	adds	r4, #26
 800265e:	454d      	cmp	r5, r9
 8002660:	d11a      	bne.n	8002698 <_printf_common+0xd8>
 8002662:	2000      	movs	r0, #0
 8002664:	e008      	b.n	8002678 <_printf_common+0xb8>
 8002666:	2301      	movs	r3, #1
 8002668:	4652      	mov	r2, sl
 800266a:	4639      	mov	r1, r7
 800266c:	4630      	mov	r0, r6
 800266e:	47c0      	blx	r8
 8002670:	3001      	adds	r0, #1
 8002672:	d103      	bne.n	800267c <_printf_common+0xbc>
 8002674:	f04f 30ff 	mov.w	r0, #4294967295
 8002678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800267c:	3501      	adds	r5, #1
 800267e:	e7c2      	b.n	8002606 <_printf_common+0x46>
 8002680:	2030      	movs	r0, #48	; 0x30
 8002682:	18e1      	adds	r1, r4, r3
 8002684:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002688:	1c5a      	adds	r2, r3, #1
 800268a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800268e:	4422      	add	r2, r4
 8002690:	3302      	adds	r3, #2
 8002692:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002696:	e7c4      	b.n	8002622 <_printf_common+0x62>
 8002698:	2301      	movs	r3, #1
 800269a:	4622      	mov	r2, r4
 800269c:	4639      	mov	r1, r7
 800269e:	4630      	mov	r0, r6
 80026a0:	47c0      	blx	r8
 80026a2:	3001      	adds	r0, #1
 80026a4:	d0e6      	beq.n	8002674 <_printf_common+0xb4>
 80026a6:	f109 0901 	add.w	r9, r9, #1
 80026aa:	e7d8      	b.n	800265e <_printf_common+0x9e>

080026ac <_printf_i>:
 80026ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80026b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80026b4:	460c      	mov	r4, r1
 80026b6:	7e09      	ldrb	r1, [r1, #24]
 80026b8:	b085      	sub	sp, #20
 80026ba:	296e      	cmp	r1, #110	; 0x6e
 80026bc:	4617      	mov	r7, r2
 80026be:	4606      	mov	r6, r0
 80026c0:	4698      	mov	r8, r3
 80026c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80026c4:	f000 80b3 	beq.w	800282e <_printf_i+0x182>
 80026c8:	d822      	bhi.n	8002710 <_printf_i+0x64>
 80026ca:	2963      	cmp	r1, #99	; 0x63
 80026cc:	d036      	beq.n	800273c <_printf_i+0x90>
 80026ce:	d80a      	bhi.n	80026e6 <_printf_i+0x3a>
 80026d0:	2900      	cmp	r1, #0
 80026d2:	f000 80b9 	beq.w	8002848 <_printf_i+0x19c>
 80026d6:	2958      	cmp	r1, #88	; 0x58
 80026d8:	f000 8083 	beq.w	80027e2 <_printf_i+0x136>
 80026dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80026e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80026e4:	e032      	b.n	800274c <_printf_i+0xa0>
 80026e6:	2964      	cmp	r1, #100	; 0x64
 80026e8:	d001      	beq.n	80026ee <_printf_i+0x42>
 80026ea:	2969      	cmp	r1, #105	; 0x69
 80026ec:	d1f6      	bne.n	80026dc <_printf_i+0x30>
 80026ee:	6820      	ldr	r0, [r4, #0]
 80026f0:	6813      	ldr	r3, [r2, #0]
 80026f2:	0605      	lsls	r5, r0, #24
 80026f4:	f103 0104 	add.w	r1, r3, #4
 80026f8:	d52a      	bpl.n	8002750 <_printf_i+0xa4>
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6011      	str	r1, [r2, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	da03      	bge.n	800270a <_printf_i+0x5e>
 8002702:	222d      	movs	r2, #45	; 0x2d
 8002704:	425b      	negs	r3, r3
 8002706:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800270a:	486f      	ldr	r0, [pc, #444]	; (80028c8 <_printf_i+0x21c>)
 800270c:	220a      	movs	r2, #10
 800270e:	e039      	b.n	8002784 <_printf_i+0xd8>
 8002710:	2973      	cmp	r1, #115	; 0x73
 8002712:	f000 809d 	beq.w	8002850 <_printf_i+0x1a4>
 8002716:	d808      	bhi.n	800272a <_printf_i+0x7e>
 8002718:	296f      	cmp	r1, #111	; 0x6f
 800271a:	d020      	beq.n	800275e <_printf_i+0xb2>
 800271c:	2970      	cmp	r1, #112	; 0x70
 800271e:	d1dd      	bne.n	80026dc <_printf_i+0x30>
 8002720:	6823      	ldr	r3, [r4, #0]
 8002722:	f043 0320 	orr.w	r3, r3, #32
 8002726:	6023      	str	r3, [r4, #0]
 8002728:	e003      	b.n	8002732 <_printf_i+0x86>
 800272a:	2975      	cmp	r1, #117	; 0x75
 800272c:	d017      	beq.n	800275e <_printf_i+0xb2>
 800272e:	2978      	cmp	r1, #120	; 0x78
 8002730:	d1d4      	bne.n	80026dc <_printf_i+0x30>
 8002732:	2378      	movs	r3, #120	; 0x78
 8002734:	4865      	ldr	r0, [pc, #404]	; (80028cc <_printf_i+0x220>)
 8002736:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800273a:	e055      	b.n	80027e8 <_printf_i+0x13c>
 800273c:	6813      	ldr	r3, [r2, #0]
 800273e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002742:	1d19      	adds	r1, r3, #4
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6011      	str	r1, [r2, #0]
 8002748:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800274c:	2301      	movs	r3, #1
 800274e:	e08c      	b.n	800286a <_printf_i+0x1be>
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002756:	6011      	str	r1, [r2, #0]
 8002758:	bf18      	it	ne
 800275a:	b21b      	sxthne	r3, r3
 800275c:	e7cf      	b.n	80026fe <_printf_i+0x52>
 800275e:	6813      	ldr	r3, [r2, #0]
 8002760:	6825      	ldr	r5, [r4, #0]
 8002762:	1d18      	adds	r0, r3, #4
 8002764:	6010      	str	r0, [r2, #0]
 8002766:	0628      	lsls	r0, r5, #24
 8002768:	d501      	bpl.n	800276e <_printf_i+0xc2>
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	e002      	b.n	8002774 <_printf_i+0xc8>
 800276e:	0668      	lsls	r0, r5, #25
 8002770:	d5fb      	bpl.n	800276a <_printf_i+0xbe>
 8002772:	881b      	ldrh	r3, [r3, #0]
 8002774:	296f      	cmp	r1, #111	; 0x6f
 8002776:	bf14      	ite	ne
 8002778:	220a      	movne	r2, #10
 800277a:	2208      	moveq	r2, #8
 800277c:	4852      	ldr	r0, [pc, #328]	; (80028c8 <_printf_i+0x21c>)
 800277e:	2100      	movs	r1, #0
 8002780:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002784:	6865      	ldr	r5, [r4, #4]
 8002786:	2d00      	cmp	r5, #0
 8002788:	60a5      	str	r5, [r4, #8]
 800278a:	f2c0 8095 	blt.w	80028b8 <_printf_i+0x20c>
 800278e:	6821      	ldr	r1, [r4, #0]
 8002790:	f021 0104 	bic.w	r1, r1, #4
 8002794:	6021      	str	r1, [r4, #0]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d13d      	bne.n	8002816 <_printf_i+0x16a>
 800279a:	2d00      	cmp	r5, #0
 800279c:	f040 808e 	bne.w	80028bc <_printf_i+0x210>
 80027a0:	4665      	mov	r5, ip
 80027a2:	2a08      	cmp	r2, #8
 80027a4:	d10b      	bne.n	80027be <_printf_i+0x112>
 80027a6:	6823      	ldr	r3, [r4, #0]
 80027a8:	07db      	lsls	r3, r3, #31
 80027aa:	d508      	bpl.n	80027be <_printf_i+0x112>
 80027ac:	6923      	ldr	r3, [r4, #16]
 80027ae:	6862      	ldr	r2, [r4, #4]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	bfde      	ittt	le
 80027b4:	2330      	movle	r3, #48	; 0x30
 80027b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80027ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 80027be:	ebac 0305 	sub.w	r3, ip, r5
 80027c2:	6123      	str	r3, [r4, #16]
 80027c4:	f8cd 8000 	str.w	r8, [sp]
 80027c8:	463b      	mov	r3, r7
 80027ca:	aa03      	add	r2, sp, #12
 80027cc:	4621      	mov	r1, r4
 80027ce:	4630      	mov	r0, r6
 80027d0:	f7ff fef6 	bl	80025c0 <_printf_common>
 80027d4:	3001      	adds	r0, #1
 80027d6:	d14d      	bne.n	8002874 <_printf_i+0x1c8>
 80027d8:	f04f 30ff 	mov.w	r0, #4294967295
 80027dc:	b005      	add	sp, #20
 80027de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80027e2:	4839      	ldr	r0, [pc, #228]	; (80028c8 <_printf_i+0x21c>)
 80027e4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80027e8:	6813      	ldr	r3, [r2, #0]
 80027ea:	6821      	ldr	r1, [r4, #0]
 80027ec:	1d1d      	adds	r5, r3, #4
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	6015      	str	r5, [r2, #0]
 80027f2:	060a      	lsls	r2, r1, #24
 80027f4:	d50b      	bpl.n	800280e <_printf_i+0x162>
 80027f6:	07ca      	lsls	r2, r1, #31
 80027f8:	bf44      	itt	mi
 80027fa:	f041 0120 	orrmi.w	r1, r1, #32
 80027fe:	6021      	strmi	r1, [r4, #0]
 8002800:	b91b      	cbnz	r3, 800280a <_printf_i+0x15e>
 8002802:	6822      	ldr	r2, [r4, #0]
 8002804:	f022 0220 	bic.w	r2, r2, #32
 8002808:	6022      	str	r2, [r4, #0]
 800280a:	2210      	movs	r2, #16
 800280c:	e7b7      	b.n	800277e <_printf_i+0xd2>
 800280e:	064d      	lsls	r5, r1, #25
 8002810:	bf48      	it	mi
 8002812:	b29b      	uxthmi	r3, r3
 8002814:	e7ef      	b.n	80027f6 <_printf_i+0x14a>
 8002816:	4665      	mov	r5, ip
 8002818:	fbb3 f1f2 	udiv	r1, r3, r2
 800281c:	fb02 3311 	mls	r3, r2, r1, r3
 8002820:	5cc3      	ldrb	r3, [r0, r3]
 8002822:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002826:	460b      	mov	r3, r1
 8002828:	2900      	cmp	r1, #0
 800282a:	d1f5      	bne.n	8002818 <_printf_i+0x16c>
 800282c:	e7b9      	b.n	80027a2 <_printf_i+0xf6>
 800282e:	6813      	ldr	r3, [r2, #0]
 8002830:	6825      	ldr	r5, [r4, #0]
 8002832:	1d18      	adds	r0, r3, #4
 8002834:	6961      	ldr	r1, [r4, #20]
 8002836:	6010      	str	r0, [r2, #0]
 8002838:	0628      	lsls	r0, r5, #24
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	d501      	bpl.n	8002842 <_printf_i+0x196>
 800283e:	6019      	str	r1, [r3, #0]
 8002840:	e002      	b.n	8002848 <_printf_i+0x19c>
 8002842:	066a      	lsls	r2, r5, #25
 8002844:	d5fb      	bpl.n	800283e <_printf_i+0x192>
 8002846:	8019      	strh	r1, [r3, #0]
 8002848:	2300      	movs	r3, #0
 800284a:	4665      	mov	r5, ip
 800284c:	6123      	str	r3, [r4, #16]
 800284e:	e7b9      	b.n	80027c4 <_printf_i+0x118>
 8002850:	6813      	ldr	r3, [r2, #0]
 8002852:	1d19      	adds	r1, r3, #4
 8002854:	6011      	str	r1, [r2, #0]
 8002856:	681d      	ldr	r5, [r3, #0]
 8002858:	6862      	ldr	r2, [r4, #4]
 800285a:	2100      	movs	r1, #0
 800285c:	4628      	mov	r0, r5
 800285e:	f000 ff73 	bl	8003748 <memchr>
 8002862:	b108      	cbz	r0, 8002868 <_printf_i+0x1bc>
 8002864:	1b40      	subs	r0, r0, r5
 8002866:	6060      	str	r0, [r4, #4]
 8002868:	6863      	ldr	r3, [r4, #4]
 800286a:	6123      	str	r3, [r4, #16]
 800286c:	2300      	movs	r3, #0
 800286e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002872:	e7a7      	b.n	80027c4 <_printf_i+0x118>
 8002874:	6923      	ldr	r3, [r4, #16]
 8002876:	462a      	mov	r2, r5
 8002878:	4639      	mov	r1, r7
 800287a:	4630      	mov	r0, r6
 800287c:	47c0      	blx	r8
 800287e:	3001      	adds	r0, #1
 8002880:	d0aa      	beq.n	80027d8 <_printf_i+0x12c>
 8002882:	6823      	ldr	r3, [r4, #0]
 8002884:	079b      	lsls	r3, r3, #30
 8002886:	d413      	bmi.n	80028b0 <_printf_i+0x204>
 8002888:	68e0      	ldr	r0, [r4, #12]
 800288a:	9b03      	ldr	r3, [sp, #12]
 800288c:	4298      	cmp	r0, r3
 800288e:	bfb8      	it	lt
 8002890:	4618      	movlt	r0, r3
 8002892:	e7a3      	b.n	80027dc <_printf_i+0x130>
 8002894:	2301      	movs	r3, #1
 8002896:	464a      	mov	r2, r9
 8002898:	4639      	mov	r1, r7
 800289a:	4630      	mov	r0, r6
 800289c:	47c0      	blx	r8
 800289e:	3001      	adds	r0, #1
 80028a0:	d09a      	beq.n	80027d8 <_printf_i+0x12c>
 80028a2:	3501      	adds	r5, #1
 80028a4:	68e3      	ldr	r3, [r4, #12]
 80028a6:	9a03      	ldr	r2, [sp, #12]
 80028a8:	1a9b      	subs	r3, r3, r2
 80028aa:	42ab      	cmp	r3, r5
 80028ac:	dcf2      	bgt.n	8002894 <_printf_i+0x1e8>
 80028ae:	e7eb      	b.n	8002888 <_printf_i+0x1dc>
 80028b0:	2500      	movs	r5, #0
 80028b2:	f104 0919 	add.w	r9, r4, #25
 80028b6:	e7f5      	b.n	80028a4 <_printf_i+0x1f8>
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1ac      	bne.n	8002816 <_printf_i+0x16a>
 80028bc:	7803      	ldrb	r3, [r0, #0]
 80028be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028c2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80028c6:	e76c      	b.n	80027a2 <_printf_i+0xf6>
 80028c8:	0800470a 	.word	0x0800470a
 80028cc:	0800471b 	.word	0x0800471b

080028d0 <iprintf>:
 80028d0:	b40f      	push	{r0, r1, r2, r3}
 80028d2:	4b0a      	ldr	r3, [pc, #40]	; (80028fc <iprintf+0x2c>)
 80028d4:	b513      	push	{r0, r1, r4, lr}
 80028d6:	681c      	ldr	r4, [r3, #0]
 80028d8:	b124      	cbz	r4, 80028e4 <iprintf+0x14>
 80028da:	69a3      	ldr	r3, [r4, #24]
 80028dc:	b913      	cbnz	r3, 80028e4 <iprintf+0x14>
 80028de:	4620      	mov	r0, r4
 80028e0:	f000 fe92 	bl	8003608 <__sinit>
 80028e4:	ab05      	add	r3, sp, #20
 80028e6:	9a04      	ldr	r2, [sp, #16]
 80028e8:	68a1      	ldr	r1, [r4, #8]
 80028ea:	4620      	mov	r0, r4
 80028ec:	9301      	str	r3, [sp, #4]
 80028ee:	f001 fafd 	bl	8003eec <_vfiprintf_r>
 80028f2:	b002      	add	sp, #8
 80028f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028f8:	b004      	add	sp, #16
 80028fa:	4770      	bx	lr
 80028fc:	2000000c 	.word	0x2000000c

08002900 <quorem>:
 8002900:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002904:	6903      	ldr	r3, [r0, #16]
 8002906:	690c      	ldr	r4, [r1, #16]
 8002908:	4680      	mov	r8, r0
 800290a:	42a3      	cmp	r3, r4
 800290c:	f2c0 8084 	blt.w	8002a18 <quorem+0x118>
 8002910:	3c01      	subs	r4, #1
 8002912:	f101 0714 	add.w	r7, r1, #20
 8002916:	f100 0614 	add.w	r6, r0, #20
 800291a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800291e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002922:	3501      	adds	r5, #1
 8002924:	fbb0 f5f5 	udiv	r5, r0, r5
 8002928:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800292c:	eb06 030c 	add.w	r3, r6, ip
 8002930:	eb07 090c 	add.w	r9, r7, ip
 8002934:	9301      	str	r3, [sp, #4]
 8002936:	b39d      	cbz	r5, 80029a0 <quorem+0xa0>
 8002938:	f04f 0a00 	mov.w	sl, #0
 800293c:	4638      	mov	r0, r7
 800293e:	46b6      	mov	lr, r6
 8002940:	46d3      	mov	fp, sl
 8002942:	f850 2b04 	ldr.w	r2, [r0], #4
 8002946:	b293      	uxth	r3, r2
 8002948:	fb05 a303 	mla	r3, r5, r3, sl
 800294c:	0c12      	lsrs	r2, r2, #16
 800294e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8002952:	fb05 a202 	mla	r2, r5, r2, sl
 8002956:	b29b      	uxth	r3, r3
 8002958:	ebab 0303 	sub.w	r3, fp, r3
 800295c:	f8de b000 	ldr.w	fp, [lr]
 8002960:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8002964:	fa1f fb8b 	uxth.w	fp, fp
 8002968:	445b      	add	r3, fp
 800296a:	fa1f fb82 	uxth.w	fp, r2
 800296e:	f8de 2000 	ldr.w	r2, [lr]
 8002972:	4581      	cmp	r9, r0
 8002974:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8002978:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800297c:	b29b      	uxth	r3, r3
 800297e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002982:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8002986:	f84e 3b04 	str.w	r3, [lr], #4
 800298a:	d2da      	bcs.n	8002942 <quorem+0x42>
 800298c:	f856 300c 	ldr.w	r3, [r6, ip]
 8002990:	b933      	cbnz	r3, 80029a0 <quorem+0xa0>
 8002992:	9b01      	ldr	r3, [sp, #4]
 8002994:	3b04      	subs	r3, #4
 8002996:	429e      	cmp	r6, r3
 8002998:	461a      	mov	r2, r3
 800299a:	d331      	bcc.n	8002a00 <quorem+0x100>
 800299c:	f8c8 4010 	str.w	r4, [r8, #16]
 80029a0:	4640      	mov	r0, r8
 80029a2:	f001 f8ff 	bl	8003ba4 <__mcmp>
 80029a6:	2800      	cmp	r0, #0
 80029a8:	db26      	blt.n	80029f8 <quorem+0xf8>
 80029aa:	4630      	mov	r0, r6
 80029ac:	f04f 0c00 	mov.w	ip, #0
 80029b0:	3501      	adds	r5, #1
 80029b2:	f857 1b04 	ldr.w	r1, [r7], #4
 80029b6:	f8d0 e000 	ldr.w	lr, [r0]
 80029ba:	b28b      	uxth	r3, r1
 80029bc:	ebac 0303 	sub.w	r3, ip, r3
 80029c0:	fa1f f28e 	uxth.w	r2, lr
 80029c4:	4413      	add	r3, r2
 80029c6:	0c0a      	lsrs	r2, r1, #16
 80029c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80029cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80029d6:	45b9      	cmp	r9, r7
 80029d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80029dc:	f840 3b04 	str.w	r3, [r0], #4
 80029e0:	d2e7      	bcs.n	80029b2 <quorem+0xb2>
 80029e2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80029e6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80029ea:	b92a      	cbnz	r2, 80029f8 <quorem+0xf8>
 80029ec:	3b04      	subs	r3, #4
 80029ee:	429e      	cmp	r6, r3
 80029f0:	461a      	mov	r2, r3
 80029f2:	d30b      	bcc.n	8002a0c <quorem+0x10c>
 80029f4:	f8c8 4010 	str.w	r4, [r8, #16]
 80029f8:	4628      	mov	r0, r5
 80029fa:	b003      	add	sp, #12
 80029fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a00:	6812      	ldr	r2, [r2, #0]
 8002a02:	3b04      	subs	r3, #4
 8002a04:	2a00      	cmp	r2, #0
 8002a06:	d1c9      	bne.n	800299c <quorem+0x9c>
 8002a08:	3c01      	subs	r4, #1
 8002a0a:	e7c4      	b.n	8002996 <quorem+0x96>
 8002a0c:	6812      	ldr	r2, [r2, #0]
 8002a0e:	3b04      	subs	r3, #4
 8002a10:	2a00      	cmp	r2, #0
 8002a12:	d1ef      	bne.n	80029f4 <quorem+0xf4>
 8002a14:	3c01      	subs	r4, #1
 8002a16:	e7ea      	b.n	80029ee <quorem+0xee>
 8002a18:	2000      	movs	r0, #0
 8002a1a:	e7ee      	b.n	80029fa <quorem+0xfa>
 8002a1c:	0000      	movs	r0, r0
	...

08002a20 <_dtoa_r>:
 8002a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a24:	4616      	mov	r6, r2
 8002a26:	461f      	mov	r7, r3
 8002a28:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8002a2a:	b095      	sub	sp, #84	; 0x54
 8002a2c:	4604      	mov	r4, r0
 8002a2e:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 8002a32:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8002a36:	b93d      	cbnz	r5, 8002a48 <_dtoa_r+0x28>
 8002a38:	2010      	movs	r0, #16
 8002a3a:	f000 fe7d 	bl	8003738 <malloc>
 8002a3e:	6260      	str	r0, [r4, #36]	; 0x24
 8002a40:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8002a44:	6005      	str	r5, [r0, #0]
 8002a46:	60c5      	str	r5, [r0, #12]
 8002a48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a4a:	6819      	ldr	r1, [r3, #0]
 8002a4c:	b151      	cbz	r1, 8002a64 <_dtoa_r+0x44>
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	2301      	movs	r3, #1
 8002a52:	4093      	lsls	r3, r2
 8002a54:	604a      	str	r2, [r1, #4]
 8002a56:	608b      	str	r3, [r1, #8]
 8002a58:	4620      	mov	r0, r4
 8002a5a:	f000 fec2 	bl	80037e2 <_Bfree>
 8002a5e:	2200      	movs	r2, #0
 8002a60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	1e3b      	subs	r3, r7, #0
 8002a66:	bfaf      	iteee	ge
 8002a68:	2300      	movge	r3, #0
 8002a6a:	2201      	movlt	r2, #1
 8002a6c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8002a70:	9303      	strlt	r3, [sp, #12]
 8002a72:	bfac      	ite	ge
 8002a74:	f8c8 3000 	strge.w	r3, [r8]
 8002a78:	f8c8 2000 	strlt.w	r2, [r8]
 8002a7c:	4bae      	ldr	r3, [pc, #696]	; (8002d38 <_dtoa_r+0x318>)
 8002a7e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8002a82:	ea33 0308 	bics.w	r3, r3, r8
 8002a86:	d11b      	bne.n	8002ac0 <_dtoa_r+0xa0>
 8002a88:	f242 730f 	movw	r3, #9999	; 0x270f
 8002a8c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002a8e:	6013      	str	r3, [r2, #0]
 8002a90:	9b02      	ldr	r3, [sp, #8]
 8002a92:	b923      	cbnz	r3, 8002a9e <_dtoa_r+0x7e>
 8002a94:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8002a98:	2800      	cmp	r0, #0
 8002a9a:	f000 8545 	beq.w	8003528 <_dtoa_r+0xb08>
 8002a9e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002aa0:	b953      	cbnz	r3, 8002ab8 <_dtoa_r+0x98>
 8002aa2:	4ba6      	ldr	r3, [pc, #664]	; (8002d3c <_dtoa_r+0x31c>)
 8002aa4:	e021      	b.n	8002aea <_dtoa_r+0xca>
 8002aa6:	4ba6      	ldr	r3, [pc, #664]	; (8002d40 <_dtoa_r+0x320>)
 8002aa8:	9306      	str	r3, [sp, #24]
 8002aaa:	3308      	adds	r3, #8
 8002aac:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002aae:	6013      	str	r3, [r2, #0]
 8002ab0:	9806      	ldr	r0, [sp, #24]
 8002ab2:	b015      	add	sp, #84	; 0x54
 8002ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ab8:	4ba0      	ldr	r3, [pc, #640]	; (8002d3c <_dtoa_r+0x31c>)
 8002aba:	9306      	str	r3, [sp, #24]
 8002abc:	3303      	adds	r3, #3
 8002abe:	e7f5      	b.n	8002aac <_dtoa_r+0x8c>
 8002ac0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	4630      	mov	r0, r6
 8002aca:	4639      	mov	r1, r7
 8002acc:	f7fd ff6c 	bl	80009a8 <__aeabi_dcmpeq>
 8002ad0:	4682      	mov	sl, r0
 8002ad2:	b160      	cbz	r0, 8002aee <_dtoa_r+0xce>
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002ad8:	6013      	str	r3, [r2, #0]
 8002ada:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 8520 	beq.w	8003522 <_dtoa_r+0xb02>
 8002ae2:	4b98      	ldr	r3, [pc, #608]	; (8002d44 <_dtoa_r+0x324>)
 8002ae4:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002ae6:	6013      	str	r3, [r2, #0]
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	9306      	str	r3, [sp, #24]
 8002aec:	e7e0      	b.n	8002ab0 <_dtoa_r+0x90>
 8002aee:	ab12      	add	r3, sp, #72	; 0x48
 8002af0:	9301      	str	r3, [sp, #4]
 8002af2:	ab13      	add	r3, sp, #76	; 0x4c
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	4632      	mov	r2, r6
 8002af8:	463b      	mov	r3, r7
 8002afa:	4620      	mov	r0, r4
 8002afc:	f001 f8ca 	bl	8003c94 <__d2b>
 8002b00:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8002b04:	4683      	mov	fp, r0
 8002b06:	2d00      	cmp	r5, #0
 8002b08:	d07d      	beq.n	8002c06 <_dtoa_r+0x1e6>
 8002b0a:	46b0      	mov	r8, r6
 8002b0c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8002b10:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8002b14:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8002b18:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8002b1c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8002b20:	2200      	movs	r2, #0
 8002b22:	4b89      	ldr	r3, [pc, #548]	; (8002d48 <_dtoa_r+0x328>)
 8002b24:	4640      	mov	r0, r8
 8002b26:	4649      	mov	r1, r9
 8002b28:	f7fd fb1e 	bl	8000168 <__aeabi_dsub>
 8002b2c:	a37c      	add	r3, pc, #496	; (adr r3, 8002d20 <_dtoa_r+0x300>)
 8002b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b32:	f7fd fcd1 	bl	80004d8 <__aeabi_dmul>
 8002b36:	a37c      	add	r3, pc, #496	; (adr r3, 8002d28 <_dtoa_r+0x308>)
 8002b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3c:	f7fd fb16 	bl	800016c <__adddf3>
 8002b40:	4606      	mov	r6, r0
 8002b42:	4628      	mov	r0, r5
 8002b44:	460f      	mov	r7, r1
 8002b46:	f7fd fc5d 	bl	8000404 <__aeabi_i2d>
 8002b4a:	a379      	add	r3, pc, #484	; (adr r3, 8002d30 <_dtoa_r+0x310>)
 8002b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b50:	f7fd fcc2 	bl	80004d8 <__aeabi_dmul>
 8002b54:	4602      	mov	r2, r0
 8002b56:	460b      	mov	r3, r1
 8002b58:	4630      	mov	r0, r6
 8002b5a:	4639      	mov	r1, r7
 8002b5c:	f7fd fb06 	bl	800016c <__adddf3>
 8002b60:	4606      	mov	r6, r0
 8002b62:	460f      	mov	r7, r1
 8002b64:	f7fd ff68 	bl	8000a38 <__aeabi_d2iz>
 8002b68:	2200      	movs	r2, #0
 8002b6a:	4682      	mov	sl, r0
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	4630      	mov	r0, r6
 8002b70:	4639      	mov	r1, r7
 8002b72:	f7fd ff23 	bl	80009bc <__aeabi_dcmplt>
 8002b76:	b148      	cbz	r0, 8002b8c <_dtoa_r+0x16c>
 8002b78:	4650      	mov	r0, sl
 8002b7a:	f7fd fc43 	bl	8000404 <__aeabi_i2d>
 8002b7e:	4632      	mov	r2, r6
 8002b80:	463b      	mov	r3, r7
 8002b82:	f7fd ff11 	bl	80009a8 <__aeabi_dcmpeq>
 8002b86:	b908      	cbnz	r0, 8002b8c <_dtoa_r+0x16c>
 8002b88:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002b8c:	f1ba 0f16 	cmp.w	sl, #22
 8002b90:	d85a      	bhi.n	8002c48 <_dtoa_r+0x228>
 8002b92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002b96:	496d      	ldr	r1, [pc, #436]	; (8002d4c <_dtoa_r+0x32c>)
 8002b98:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8002b9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002ba0:	f7fd ff2a 	bl	80009f8 <__aeabi_dcmpgt>
 8002ba4:	2800      	cmp	r0, #0
 8002ba6:	d051      	beq.n	8002c4c <_dtoa_r+0x22c>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002bae:	930d      	str	r3, [sp, #52]	; 0x34
 8002bb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8002bb2:	1b5d      	subs	r5, r3, r5
 8002bb4:	1e6b      	subs	r3, r5, #1
 8002bb6:	9307      	str	r3, [sp, #28]
 8002bb8:	bf43      	ittte	mi
 8002bba:	2300      	movmi	r3, #0
 8002bbc:	f1c5 0901 	rsbmi	r9, r5, #1
 8002bc0:	9307      	strmi	r3, [sp, #28]
 8002bc2:	f04f 0900 	movpl.w	r9, #0
 8002bc6:	f1ba 0f00 	cmp.w	sl, #0
 8002bca:	db41      	blt.n	8002c50 <_dtoa_r+0x230>
 8002bcc:	9b07      	ldr	r3, [sp, #28]
 8002bce:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8002bd2:	4453      	add	r3, sl
 8002bd4:	9307      	str	r3, [sp, #28]
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	9308      	str	r3, [sp, #32]
 8002bda:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002bdc:	2b09      	cmp	r3, #9
 8002bde:	f200 808f 	bhi.w	8002d00 <_dtoa_r+0x2e0>
 8002be2:	2b05      	cmp	r3, #5
 8002be4:	bfc4      	itt	gt
 8002be6:	3b04      	subgt	r3, #4
 8002be8:	931e      	strgt	r3, [sp, #120]	; 0x78
 8002bea:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8002bec:	bfc8      	it	gt
 8002bee:	2500      	movgt	r5, #0
 8002bf0:	f1a3 0302 	sub.w	r3, r3, #2
 8002bf4:	bfd8      	it	le
 8002bf6:	2501      	movle	r5, #1
 8002bf8:	2b03      	cmp	r3, #3
 8002bfa:	f200 808d 	bhi.w	8002d18 <_dtoa_r+0x2f8>
 8002bfe:	e8df f003 	tbb	[pc, r3]
 8002c02:	7d7b      	.short	0x7d7b
 8002c04:	6f2f      	.short	0x6f2f
 8002c06:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8002c0a:	441d      	add	r5, r3
 8002c0c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8002c10:	2820      	cmp	r0, #32
 8002c12:	dd13      	ble.n	8002c3c <_dtoa_r+0x21c>
 8002c14:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8002c18:	9b02      	ldr	r3, [sp, #8]
 8002c1a:	fa08 f800 	lsl.w	r8, r8, r0
 8002c1e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8002c22:	fa23 f000 	lsr.w	r0, r3, r0
 8002c26:	ea48 0000 	orr.w	r0, r8, r0
 8002c2a:	f7fd fbdb 	bl	80003e4 <__aeabi_ui2d>
 8002c2e:	2301      	movs	r3, #1
 8002c30:	4680      	mov	r8, r0
 8002c32:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8002c36:	3d01      	subs	r5, #1
 8002c38:	9310      	str	r3, [sp, #64]	; 0x40
 8002c3a:	e771      	b.n	8002b20 <_dtoa_r+0x100>
 8002c3c:	9b02      	ldr	r3, [sp, #8]
 8002c3e:	f1c0 0020 	rsb	r0, r0, #32
 8002c42:	fa03 f000 	lsl.w	r0, r3, r0
 8002c46:	e7f0      	b.n	8002c2a <_dtoa_r+0x20a>
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e7b0      	b.n	8002bae <_dtoa_r+0x18e>
 8002c4c:	900d      	str	r0, [sp, #52]	; 0x34
 8002c4e:	e7af      	b.n	8002bb0 <_dtoa_r+0x190>
 8002c50:	f1ca 0300 	rsb	r3, sl, #0
 8002c54:	9308      	str	r3, [sp, #32]
 8002c56:	2300      	movs	r3, #0
 8002c58:	eba9 090a 	sub.w	r9, r9, sl
 8002c5c:	930c      	str	r3, [sp, #48]	; 0x30
 8002c5e:	e7bc      	b.n	8002bda <_dtoa_r+0x1ba>
 8002c60:	2301      	movs	r3, #1
 8002c62:	9309      	str	r3, [sp, #36]	; 0x24
 8002c64:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	dd74      	ble.n	8002d54 <_dtoa_r+0x334>
 8002c6a:	4698      	mov	r8, r3
 8002c6c:	9304      	str	r3, [sp, #16]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8002c72:	6072      	str	r2, [r6, #4]
 8002c74:	2204      	movs	r2, #4
 8002c76:	f102 0014 	add.w	r0, r2, #20
 8002c7a:	4298      	cmp	r0, r3
 8002c7c:	6871      	ldr	r1, [r6, #4]
 8002c7e:	d96e      	bls.n	8002d5e <_dtoa_r+0x33e>
 8002c80:	4620      	mov	r0, r4
 8002c82:	f000 fd7a 	bl	800377a <_Balloc>
 8002c86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c88:	6030      	str	r0, [r6, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f1b8 0f0e 	cmp.w	r8, #14
 8002c90:	9306      	str	r3, [sp, #24]
 8002c92:	f200 80ed 	bhi.w	8002e70 <_dtoa_r+0x450>
 8002c96:	2d00      	cmp	r5, #0
 8002c98:	f000 80ea 	beq.w	8002e70 <_dtoa_r+0x450>
 8002c9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002ca0:	f1ba 0f00 	cmp.w	sl, #0
 8002ca4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8002ca8:	dd77      	ble.n	8002d9a <_dtoa_r+0x37a>
 8002caa:	4a28      	ldr	r2, [pc, #160]	; (8002d4c <_dtoa_r+0x32c>)
 8002cac:	f00a 030f 	and.w	r3, sl, #15
 8002cb0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8002cb4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002cb8:	06f0      	lsls	r0, r6, #27
 8002cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cbe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002cc2:	d568      	bpl.n	8002d96 <_dtoa_r+0x376>
 8002cc4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002cc8:	4b21      	ldr	r3, [pc, #132]	; (8002d50 <_dtoa_r+0x330>)
 8002cca:	2503      	movs	r5, #3
 8002ccc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002cd0:	f7fd fd2c 	bl	800072c <__aeabi_ddiv>
 8002cd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002cd8:	f006 060f 	and.w	r6, r6, #15
 8002cdc:	4f1c      	ldr	r7, [pc, #112]	; (8002d50 <_dtoa_r+0x330>)
 8002cde:	e04f      	b.n	8002d80 <_dtoa_r+0x360>
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	9309      	str	r3, [sp, #36]	; 0x24
 8002ce4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002ce6:	4453      	add	r3, sl
 8002ce8:	f103 0801 	add.w	r8, r3, #1
 8002cec:	9304      	str	r3, [sp, #16]
 8002cee:	4643      	mov	r3, r8
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	bfb8      	it	lt
 8002cf4:	2301      	movlt	r3, #1
 8002cf6:	e7ba      	b.n	8002c6e <_dtoa_r+0x24e>
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	e7b2      	b.n	8002c62 <_dtoa_r+0x242>
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	e7f0      	b.n	8002ce2 <_dtoa_r+0x2c2>
 8002d00:	2501      	movs	r5, #1
 8002d02:	2300      	movs	r3, #0
 8002d04:	9509      	str	r5, [sp, #36]	; 0x24
 8002d06:	931e      	str	r3, [sp, #120]	; 0x78
 8002d08:	f04f 33ff 	mov.w	r3, #4294967295
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	9304      	str	r3, [sp, #16]
 8002d10:	4698      	mov	r8, r3
 8002d12:	2312      	movs	r3, #18
 8002d14:	921f      	str	r2, [sp, #124]	; 0x7c
 8002d16:	e7aa      	b.n	8002c6e <_dtoa_r+0x24e>
 8002d18:	2301      	movs	r3, #1
 8002d1a:	9309      	str	r3, [sp, #36]	; 0x24
 8002d1c:	e7f4      	b.n	8002d08 <_dtoa_r+0x2e8>
 8002d1e:	bf00      	nop
 8002d20:	636f4361 	.word	0x636f4361
 8002d24:	3fd287a7 	.word	0x3fd287a7
 8002d28:	8b60c8b3 	.word	0x8b60c8b3
 8002d2c:	3fc68a28 	.word	0x3fc68a28
 8002d30:	509f79fb 	.word	0x509f79fb
 8002d34:	3fd34413 	.word	0x3fd34413
 8002d38:	7ff00000 	.word	0x7ff00000
 8002d3c:	08004735 	.word	0x08004735
 8002d40:	0800472c 	.word	0x0800472c
 8002d44:	08004709 	.word	0x08004709
 8002d48:	3ff80000 	.word	0x3ff80000
 8002d4c:	080047c8 	.word	0x080047c8
 8002d50:	080047a0 	.word	0x080047a0
 8002d54:	2301      	movs	r3, #1
 8002d56:	9304      	str	r3, [sp, #16]
 8002d58:	4698      	mov	r8, r3
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	e7da      	b.n	8002d14 <_dtoa_r+0x2f4>
 8002d5e:	3101      	adds	r1, #1
 8002d60:	6071      	str	r1, [r6, #4]
 8002d62:	0052      	lsls	r2, r2, #1
 8002d64:	e787      	b.n	8002c76 <_dtoa_r+0x256>
 8002d66:	07f1      	lsls	r1, r6, #31
 8002d68:	d508      	bpl.n	8002d7c <_dtoa_r+0x35c>
 8002d6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002d6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d72:	f7fd fbb1 	bl	80004d8 <__aeabi_dmul>
 8002d76:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002d7a:	3501      	adds	r5, #1
 8002d7c:	1076      	asrs	r6, r6, #1
 8002d7e:	3708      	adds	r7, #8
 8002d80:	2e00      	cmp	r6, #0
 8002d82:	d1f0      	bne.n	8002d66 <_dtoa_r+0x346>
 8002d84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002d88:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002d8c:	f7fd fcce 	bl	800072c <__aeabi_ddiv>
 8002d90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002d94:	e01b      	b.n	8002dce <_dtoa_r+0x3ae>
 8002d96:	2502      	movs	r5, #2
 8002d98:	e7a0      	b.n	8002cdc <_dtoa_r+0x2bc>
 8002d9a:	f000 80a4 	beq.w	8002ee6 <_dtoa_r+0x4c6>
 8002d9e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8002da2:	f1ca 0600 	rsb	r6, sl, #0
 8002da6:	4ba0      	ldr	r3, [pc, #640]	; (8003028 <_dtoa_r+0x608>)
 8002da8:	f006 020f 	and.w	r2, r6, #15
 8002dac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db4:	f7fd fb90 	bl	80004d8 <__aeabi_dmul>
 8002db8:	2502      	movs	r5, #2
 8002dba:	2300      	movs	r3, #0
 8002dbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002dc0:	4f9a      	ldr	r7, [pc, #616]	; (800302c <_dtoa_r+0x60c>)
 8002dc2:	1136      	asrs	r6, r6, #4
 8002dc4:	2e00      	cmp	r6, #0
 8002dc6:	f040 8083 	bne.w	8002ed0 <_dtoa_r+0x4b0>
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1e0      	bne.n	8002d90 <_dtoa_r+0x370>
 8002dce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 808a 	beq.w	8002eea <_dtoa_r+0x4ca>
 8002dd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002dda:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8002dde:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002de2:	2200      	movs	r2, #0
 8002de4:	4b92      	ldr	r3, [pc, #584]	; (8003030 <_dtoa_r+0x610>)
 8002de6:	f7fd fde9 	bl	80009bc <__aeabi_dcmplt>
 8002dea:	2800      	cmp	r0, #0
 8002dec:	d07d      	beq.n	8002eea <_dtoa_r+0x4ca>
 8002dee:	f1b8 0f00 	cmp.w	r8, #0
 8002df2:	d07a      	beq.n	8002eea <_dtoa_r+0x4ca>
 8002df4:	9b04      	ldr	r3, [sp, #16]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	dd36      	ble.n	8002e68 <_dtoa_r+0x448>
 8002dfa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002dfe:	2200      	movs	r2, #0
 8002e00:	4b8c      	ldr	r3, [pc, #560]	; (8003034 <_dtoa_r+0x614>)
 8002e02:	f7fd fb69 	bl	80004d8 <__aeabi_dmul>
 8002e06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002e0a:	9e04      	ldr	r6, [sp, #16]
 8002e0c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8002e10:	3501      	adds	r5, #1
 8002e12:	4628      	mov	r0, r5
 8002e14:	f7fd faf6 	bl	8000404 <__aeabi_i2d>
 8002e18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002e1c:	f7fd fb5c 	bl	80004d8 <__aeabi_dmul>
 8002e20:	2200      	movs	r2, #0
 8002e22:	4b85      	ldr	r3, [pc, #532]	; (8003038 <_dtoa_r+0x618>)
 8002e24:	f7fd f9a2 	bl	800016c <__adddf3>
 8002e28:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8002e2c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002e30:	950b      	str	r5, [sp, #44]	; 0x2c
 8002e32:	2e00      	cmp	r6, #0
 8002e34:	d15c      	bne.n	8002ef0 <_dtoa_r+0x4d0>
 8002e36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	4b7f      	ldr	r3, [pc, #508]	; (800303c <_dtoa_r+0x61c>)
 8002e3e:	f7fd f993 	bl	8000168 <__aeabi_dsub>
 8002e42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002e44:	462b      	mov	r3, r5
 8002e46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002e4a:	f7fd fdd5 	bl	80009f8 <__aeabi_dcmpgt>
 8002e4e:	2800      	cmp	r0, #0
 8002e50:	f040 8281 	bne.w	8003356 <_dtoa_r+0x936>
 8002e54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002e58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002e5a:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8002e5e:	f7fd fdad 	bl	80009bc <__aeabi_dcmplt>
 8002e62:	2800      	cmp	r0, #0
 8002e64:	f040 8275 	bne.w	8003352 <_dtoa_r+0x932>
 8002e68:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8002e6c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002e70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f2c0 814b 	blt.w	800310e <_dtoa_r+0x6ee>
 8002e78:	f1ba 0f0e 	cmp.w	sl, #14
 8002e7c:	f300 8147 	bgt.w	800310e <_dtoa_r+0x6ee>
 8002e80:	4b69      	ldr	r3, [pc, #420]	; (8003028 <_dtoa_r+0x608>)
 8002e82:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8002e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002e8e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f280 80d7 	bge.w	8003044 <_dtoa_r+0x624>
 8002e96:	f1b8 0f00 	cmp.w	r8, #0
 8002e9a:	f300 80d3 	bgt.w	8003044 <_dtoa_r+0x624>
 8002e9e:	f040 8257 	bne.w	8003350 <_dtoa_r+0x930>
 8002ea2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	4b64      	ldr	r3, [pc, #400]	; (800303c <_dtoa_r+0x61c>)
 8002eaa:	f7fd fb15 	bl	80004d8 <__aeabi_dmul>
 8002eae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002eb2:	f7fd fd97 	bl	80009e4 <__aeabi_dcmpge>
 8002eb6:	4646      	mov	r6, r8
 8002eb8:	4647      	mov	r7, r8
 8002eba:	2800      	cmp	r0, #0
 8002ebc:	f040 822d 	bne.w	800331a <_dtoa_r+0x8fa>
 8002ec0:	9b06      	ldr	r3, [sp, #24]
 8002ec2:	9a06      	ldr	r2, [sp, #24]
 8002ec4:	1c5d      	adds	r5, r3, #1
 8002ec6:	2331      	movs	r3, #49	; 0x31
 8002ec8:	f10a 0a01 	add.w	sl, sl, #1
 8002ecc:	7013      	strb	r3, [r2, #0]
 8002ece:	e228      	b.n	8003322 <_dtoa_r+0x902>
 8002ed0:	07f2      	lsls	r2, r6, #31
 8002ed2:	d505      	bpl.n	8002ee0 <_dtoa_r+0x4c0>
 8002ed4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ed8:	f7fd fafe 	bl	80004d8 <__aeabi_dmul>
 8002edc:	2301      	movs	r3, #1
 8002ede:	3501      	adds	r5, #1
 8002ee0:	1076      	asrs	r6, r6, #1
 8002ee2:	3708      	adds	r7, #8
 8002ee4:	e76e      	b.n	8002dc4 <_dtoa_r+0x3a4>
 8002ee6:	2502      	movs	r5, #2
 8002ee8:	e771      	b.n	8002dce <_dtoa_r+0x3ae>
 8002eea:	4657      	mov	r7, sl
 8002eec:	4646      	mov	r6, r8
 8002eee:	e790      	b.n	8002e12 <_dtoa_r+0x3f2>
 8002ef0:	4b4d      	ldr	r3, [pc, #308]	; (8003028 <_dtoa_r+0x608>)
 8002ef2:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8002ef6:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8002efa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d048      	beq.n	8002f92 <_dtoa_r+0x572>
 8002f00:	4602      	mov	r2, r0
 8002f02:	460b      	mov	r3, r1
 8002f04:	2000      	movs	r0, #0
 8002f06:	494e      	ldr	r1, [pc, #312]	; (8003040 <_dtoa_r+0x620>)
 8002f08:	f7fd fc10 	bl	800072c <__aeabi_ddiv>
 8002f0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002f10:	f7fd f92a 	bl	8000168 <__aeabi_dsub>
 8002f14:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002f18:	9d06      	ldr	r5, [sp, #24]
 8002f1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002f1e:	f7fd fd8b 	bl	8000a38 <__aeabi_d2iz>
 8002f22:	9011      	str	r0, [sp, #68]	; 0x44
 8002f24:	f7fd fa6e 	bl	8000404 <__aeabi_i2d>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	460b      	mov	r3, r1
 8002f2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002f30:	f7fd f91a 	bl	8000168 <__aeabi_dsub>
 8002f34:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002f36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002f3a:	3330      	adds	r3, #48	; 0x30
 8002f3c:	f805 3b01 	strb.w	r3, [r5], #1
 8002f40:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002f44:	f7fd fd3a 	bl	80009bc <__aeabi_dcmplt>
 8002f48:	2800      	cmp	r0, #0
 8002f4a:	d163      	bne.n	8003014 <_dtoa_r+0x5f4>
 8002f4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002f50:	2000      	movs	r0, #0
 8002f52:	4937      	ldr	r1, [pc, #220]	; (8003030 <_dtoa_r+0x610>)
 8002f54:	f7fd f908 	bl	8000168 <__aeabi_dsub>
 8002f58:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002f5c:	f7fd fd2e 	bl	80009bc <__aeabi_dcmplt>
 8002f60:	2800      	cmp	r0, #0
 8002f62:	f040 80b5 	bne.w	80030d0 <_dtoa_r+0x6b0>
 8002f66:	9b06      	ldr	r3, [sp, #24]
 8002f68:	1aeb      	subs	r3, r5, r3
 8002f6a:	429e      	cmp	r6, r3
 8002f6c:	f77f af7c 	ble.w	8002e68 <_dtoa_r+0x448>
 8002f70:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002f74:	2200      	movs	r2, #0
 8002f76:	4b2f      	ldr	r3, [pc, #188]	; (8003034 <_dtoa_r+0x614>)
 8002f78:	f7fd faae 	bl	80004d8 <__aeabi_dmul>
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002f82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002f86:	4b2b      	ldr	r3, [pc, #172]	; (8003034 <_dtoa_r+0x614>)
 8002f88:	f7fd faa6 	bl	80004d8 <__aeabi_dmul>
 8002f8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002f90:	e7c3      	b.n	8002f1a <_dtoa_r+0x4fa>
 8002f92:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002f96:	f7fd fa9f 	bl	80004d8 <__aeabi_dmul>
 8002f9a:	9b06      	ldr	r3, [sp, #24]
 8002f9c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002fa0:	199d      	adds	r5, r3, r6
 8002fa2:	461e      	mov	r6, r3
 8002fa4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002fa8:	f7fd fd46 	bl	8000a38 <__aeabi_d2iz>
 8002fac:	9011      	str	r0, [sp, #68]	; 0x44
 8002fae:	f7fd fa29 	bl	8000404 <__aeabi_i2d>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002fba:	f7fd f8d5 	bl	8000168 <__aeabi_dsub>
 8002fbe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002fc0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002fc4:	3330      	adds	r3, #48	; 0x30
 8002fc6:	f806 3b01 	strb.w	r3, [r6], #1
 8002fca:	42ae      	cmp	r6, r5
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	d124      	bne.n	800301c <_dtoa_r+0x5fc>
 8002fd2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8002fd6:	4b1a      	ldr	r3, [pc, #104]	; (8003040 <_dtoa_r+0x620>)
 8002fd8:	f7fd f8c8 	bl	800016c <__adddf3>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002fe4:	f7fd fd08 	bl	80009f8 <__aeabi_dcmpgt>
 8002fe8:	2800      	cmp	r0, #0
 8002fea:	d171      	bne.n	80030d0 <_dtoa_r+0x6b0>
 8002fec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8002ff0:	2000      	movs	r0, #0
 8002ff2:	4913      	ldr	r1, [pc, #76]	; (8003040 <_dtoa_r+0x620>)
 8002ff4:	f7fd f8b8 	bl	8000168 <__aeabi_dsub>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003000:	f7fd fcdc 	bl	80009bc <__aeabi_dcmplt>
 8003004:	2800      	cmp	r0, #0
 8003006:	f43f af2f 	beq.w	8002e68 <_dtoa_r+0x448>
 800300a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800300e:	1e6a      	subs	r2, r5, #1
 8003010:	2b30      	cmp	r3, #48	; 0x30
 8003012:	d001      	beq.n	8003018 <_dtoa_r+0x5f8>
 8003014:	46ba      	mov	sl, r7
 8003016:	e04a      	b.n	80030ae <_dtoa_r+0x68e>
 8003018:	4615      	mov	r5, r2
 800301a:	e7f6      	b.n	800300a <_dtoa_r+0x5ea>
 800301c:	4b05      	ldr	r3, [pc, #20]	; (8003034 <_dtoa_r+0x614>)
 800301e:	f7fd fa5b 	bl	80004d8 <__aeabi_dmul>
 8003022:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003026:	e7bd      	b.n	8002fa4 <_dtoa_r+0x584>
 8003028:	080047c8 	.word	0x080047c8
 800302c:	080047a0 	.word	0x080047a0
 8003030:	3ff00000 	.word	0x3ff00000
 8003034:	40240000 	.word	0x40240000
 8003038:	401c0000 	.word	0x401c0000
 800303c:	40140000 	.word	0x40140000
 8003040:	3fe00000 	.word	0x3fe00000
 8003044:	9d06      	ldr	r5, [sp, #24]
 8003046:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800304a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800304e:	4630      	mov	r0, r6
 8003050:	4639      	mov	r1, r7
 8003052:	f7fd fb6b 	bl	800072c <__aeabi_ddiv>
 8003056:	f7fd fcef 	bl	8000a38 <__aeabi_d2iz>
 800305a:	4681      	mov	r9, r0
 800305c:	f7fd f9d2 	bl	8000404 <__aeabi_i2d>
 8003060:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003064:	f7fd fa38 	bl	80004d8 <__aeabi_dmul>
 8003068:	4602      	mov	r2, r0
 800306a:	460b      	mov	r3, r1
 800306c:	4630      	mov	r0, r6
 800306e:	4639      	mov	r1, r7
 8003070:	f7fd f87a 	bl	8000168 <__aeabi_dsub>
 8003074:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8003078:	f805 6b01 	strb.w	r6, [r5], #1
 800307c:	9e06      	ldr	r6, [sp, #24]
 800307e:	4602      	mov	r2, r0
 8003080:	1bae      	subs	r6, r5, r6
 8003082:	45b0      	cmp	r8, r6
 8003084:	460b      	mov	r3, r1
 8003086:	d135      	bne.n	80030f4 <_dtoa_r+0x6d4>
 8003088:	f7fd f870 	bl	800016c <__adddf3>
 800308c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003090:	4606      	mov	r6, r0
 8003092:	460f      	mov	r7, r1
 8003094:	f7fd fcb0 	bl	80009f8 <__aeabi_dcmpgt>
 8003098:	b9c8      	cbnz	r0, 80030ce <_dtoa_r+0x6ae>
 800309a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800309e:	4630      	mov	r0, r6
 80030a0:	4639      	mov	r1, r7
 80030a2:	f7fd fc81 	bl	80009a8 <__aeabi_dcmpeq>
 80030a6:	b110      	cbz	r0, 80030ae <_dtoa_r+0x68e>
 80030a8:	f019 0f01 	tst.w	r9, #1
 80030ac:	d10f      	bne.n	80030ce <_dtoa_r+0x6ae>
 80030ae:	4659      	mov	r1, fp
 80030b0:	4620      	mov	r0, r4
 80030b2:	f000 fb96 	bl	80037e2 <_Bfree>
 80030b6:	2300      	movs	r3, #0
 80030b8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80030ba:	702b      	strb	r3, [r5, #0]
 80030bc:	f10a 0301 	add.w	r3, sl, #1
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f43f acf3 	beq.w	8002ab0 <_dtoa_r+0x90>
 80030ca:	601d      	str	r5, [r3, #0]
 80030cc:	e4f0      	b.n	8002ab0 <_dtoa_r+0x90>
 80030ce:	4657      	mov	r7, sl
 80030d0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80030d4:	1e6b      	subs	r3, r5, #1
 80030d6:	2a39      	cmp	r2, #57	; 0x39
 80030d8:	d106      	bne.n	80030e8 <_dtoa_r+0x6c8>
 80030da:	9a06      	ldr	r2, [sp, #24]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d107      	bne.n	80030f0 <_dtoa_r+0x6d0>
 80030e0:	2330      	movs	r3, #48	; 0x30
 80030e2:	7013      	strb	r3, [r2, #0]
 80030e4:	4613      	mov	r3, r2
 80030e6:	3701      	adds	r7, #1
 80030e8:	781a      	ldrb	r2, [r3, #0]
 80030ea:	3201      	adds	r2, #1
 80030ec:	701a      	strb	r2, [r3, #0]
 80030ee:	e791      	b.n	8003014 <_dtoa_r+0x5f4>
 80030f0:	461d      	mov	r5, r3
 80030f2:	e7ed      	b.n	80030d0 <_dtoa_r+0x6b0>
 80030f4:	2200      	movs	r2, #0
 80030f6:	4b99      	ldr	r3, [pc, #612]	; (800335c <_dtoa_r+0x93c>)
 80030f8:	f7fd f9ee 	bl	80004d8 <__aeabi_dmul>
 80030fc:	2200      	movs	r2, #0
 80030fe:	2300      	movs	r3, #0
 8003100:	4606      	mov	r6, r0
 8003102:	460f      	mov	r7, r1
 8003104:	f7fd fc50 	bl	80009a8 <__aeabi_dcmpeq>
 8003108:	2800      	cmp	r0, #0
 800310a:	d09e      	beq.n	800304a <_dtoa_r+0x62a>
 800310c:	e7cf      	b.n	80030ae <_dtoa_r+0x68e>
 800310e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003110:	2a00      	cmp	r2, #0
 8003112:	f000 8088 	beq.w	8003226 <_dtoa_r+0x806>
 8003116:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003118:	2a01      	cmp	r2, #1
 800311a:	dc6d      	bgt.n	80031f8 <_dtoa_r+0x7d8>
 800311c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800311e:	2a00      	cmp	r2, #0
 8003120:	d066      	beq.n	80031f0 <_dtoa_r+0x7d0>
 8003122:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8003126:	464d      	mov	r5, r9
 8003128:	9e08      	ldr	r6, [sp, #32]
 800312a:	9a07      	ldr	r2, [sp, #28]
 800312c:	2101      	movs	r1, #1
 800312e:	441a      	add	r2, r3
 8003130:	4620      	mov	r0, r4
 8003132:	4499      	add	r9, r3
 8003134:	9207      	str	r2, [sp, #28]
 8003136:	f000 fbf4 	bl	8003922 <__i2b>
 800313a:	4607      	mov	r7, r0
 800313c:	2d00      	cmp	r5, #0
 800313e:	dd0b      	ble.n	8003158 <_dtoa_r+0x738>
 8003140:	9b07      	ldr	r3, [sp, #28]
 8003142:	2b00      	cmp	r3, #0
 8003144:	dd08      	ble.n	8003158 <_dtoa_r+0x738>
 8003146:	42ab      	cmp	r3, r5
 8003148:	bfa8      	it	ge
 800314a:	462b      	movge	r3, r5
 800314c:	9a07      	ldr	r2, [sp, #28]
 800314e:	eba9 0903 	sub.w	r9, r9, r3
 8003152:	1aed      	subs	r5, r5, r3
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	9307      	str	r3, [sp, #28]
 8003158:	9b08      	ldr	r3, [sp, #32]
 800315a:	b1eb      	cbz	r3, 8003198 <_dtoa_r+0x778>
 800315c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800315e:	2b00      	cmp	r3, #0
 8003160:	d065      	beq.n	800322e <_dtoa_r+0x80e>
 8003162:	b18e      	cbz	r6, 8003188 <_dtoa_r+0x768>
 8003164:	4639      	mov	r1, r7
 8003166:	4632      	mov	r2, r6
 8003168:	4620      	mov	r0, r4
 800316a:	f000 fc79 	bl	8003a60 <__pow5mult>
 800316e:	465a      	mov	r2, fp
 8003170:	4601      	mov	r1, r0
 8003172:	4607      	mov	r7, r0
 8003174:	4620      	mov	r0, r4
 8003176:	f000 fbdd 	bl	8003934 <__multiply>
 800317a:	4659      	mov	r1, fp
 800317c:	900a      	str	r0, [sp, #40]	; 0x28
 800317e:	4620      	mov	r0, r4
 8003180:	f000 fb2f 	bl	80037e2 <_Bfree>
 8003184:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003186:	469b      	mov	fp, r3
 8003188:	9b08      	ldr	r3, [sp, #32]
 800318a:	1b9a      	subs	r2, r3, r6
 800318c:	d004      	beq.n	8003198 <_dtoa_r+0x778>
 800318e:	4659      	mov	r1, fp
 8003190:	4620      	mov	r0, r4
 8003192:	f000 fc65 	bl	8003a60 <__pow5mult>
 8003196:	4683      	mov	fp, r0
 8003198:	2101      	movs	r1, #1
 800319a:	4620      	mov	r0, r4
 800319c:	f000 fbc1 	bl	8003922 <__i2b>
 80031a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80031a2:	4606      	mov	r6, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 81c6 	beq.w	8003536 <_dtoa_r+0xb16>
 80031aa:	461a      	mov	r2, r3
 80031ac:	4601      	mov	r1, r0
 80031ae:	4620      	mov	r0, r4
 80031b0:	f000 fc56 	bl	8003a60 <__pow5mult>
 80031b4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80031b6:	4606      	mov	r6, r0
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	dc3e      	bgt.n	800323a <_dtoa_r+0x81a>
 80031bc:	9b02      	ldr	r3, [sp, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d137      	bne.n	8003232 <_dtoa_r+0x812>
 80031c2:	9b03      	ldr	r3, [sp, #12]
 80031c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d134      	bne.n	8003236 <_dtoa_r+0x816>
 80031cc:	9b03      	ldr	r3, [sp, #12]
 80031ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80031d2:	0d1b      	lsrs	r3, r3, #20
 80031d4:	051b      	lsls	r3, r3, #20
 80031d6:	b12b      	cbz	r3, 80031e4 <_dtoa_r+0x7c4>
 80031d8:	9b07      	ldr	r3, [sp, #28]
 80031da:	f109 0901 	add.w	r9, r9, #1
 80031de:	3301      	adds	r3, #1
 80031e0:	9307      	str	r3, [sp, #28]
 80031e2:	2301      	movs	r3, #1
 80031e4:	9308      	str	r3, [sp, #32]
 80031e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d128      	bne.n	800323e <_dtoa_r+0x81e>
 80031ec:	2001      	movs	r0, #1
 80031ee:	e02e      	b.n	800324e <_dtoa_r+0x82e>
 80031f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80031f2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80031f6:	e796      	b.n	8003126 <_dtoa_r+0x706>
 80031f8:	9b08      	ldr	r3, [sp, #32]
 80031fa:	f108 36ff 	add.w	r6, r8, #4294967295
 80031fe:	42b3      	cmp	r3, r6
 8003200:	bfb7      	itett	lt
 8003202:	9b08      	ldrlt	r3, [sp, #32]
 8003204:	1b9e      	subge	r6, r3, r6
 8003206:	1af2      	sublt	r2, r6, r3
 8003208:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800320a:	bfbf      	itttt	lt
 800320c:	9608      	strlt	r6, [sp, #32]
 800320e:	189b      	addlt	r3, r3, r2
 8003210:	930c      	strlt	r3, [sp, #48]	; 0x30
 8003212:	2600      	movlt	r6, #0
 8003214:	f1b8 0f00 	cmp.w	r8, #0
 8003218:	bfb9      	ittee	lt
 800321a:	eba9 0508 	sublt.w	r5, r9, r8
 800321e:	2300      	movlt	r3, #0
 8003220:	464d      	movge	r5, r9
 8003222:	4643      	movge	r3, r8
 8003224:	e781      	b.n	800312a <_dtoa_r+0x70a>
 8003226:	9e08      	ldr	r6, [sp, #32]
 8003228:	464d      	mov	r5, r9
 800322a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800322c:	e786      	b.n	800313c <_dtoa_r+0x71c>
 800322e:	9a08      	ldr	r2, [sp, #32]
 8003230:	e7ad      	b.n	800318e <_dtoa_r+0x76e>
 8003232:	2300      	movs	r3, #0
 8003234:	e7d6      	b.n	80031e4 <_dtoa_r+0x7c4>
 8003236:	9b02      	ldr	r3, [sp, #8]
 8003238:	e7d4      	b.n	80031e4 <_dtoa_r+0x7c4>
 800323a:	2300      	movs	r3, #0
 800323c:	9308      	str	r3, [sp, #32]
 800323e:	6933      	ldr	r3, [r6, #16]
 8003240:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003244:	6918      	ldr	r0, [r3, #16]
 8003246:	f000 fb1e 	bl	8003886 <__hi0bits>
 800324a:	f1c0 0020 	rsb	r0, r0, #32
 800324e:	9b07      	ldr	r3, [sp, #28]
 8003250:	4418      	add	r0, r3
 8003252:	f010 001f 	ands.w	r0, r0, #31
 8003256:	d047      	beq.n	80032e8 <_dtoa_r+0x8c8>
 8003258:	f1c0 0320 	rsb	r3, r0, #32
 800325c:	2b04      	cmp	r3, #4
 800325e:	dd3b      	ble.n	80032d8 <_dtoa_r+0x8b8>
 8003260:	9b07      	ldr	r3, [sp, #28]
 8003262:	f1c0 001c 	rsb	r0, r0, #28
 8003266:	4481      	add	r9, r0
 8003268:	4405      	add	r5, r0
 800326a:	4403      	add	r3, r0
 800326c:	9307      	str	r3, [sp, #28]
 800326e:	f1b9 0f00 	cmp.w	r9, #0
 8003272:	dd05      	ble.n	8003280 <_dtoa_r+0x860>
 8003274:	4659      	mov	r1, fp
 8003276:	464a      	mov	r2, r9
 8003278:	4620      	mov	r0, r4
 800327a:	f000 fc3f 	bl	8003afc <__lshift>
 800327e:	4683      	mov	fp, r0
 8003280:	9b07      	ldr	r3, [sp, #28]
 8003282:	2b00      	cmp	r3, #0
 8003284:	dd05      	ble.n	8003292 <_dtoa_r+0x872>
 8003286:	4631      	mov	r1, r6
 8003288:	461a      	mov	r2, r3
 800328a:	4620      	mov	r0, r4
 800328c:	f000 fc36 	bl	8003afc <__lshift>
 8003290:	4606      	mov	r6, r0
 8003292:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003294:	b353      	cbz	r3, 80032ec <_dtoa_r+0x8cc>
 8003296:	4631      	mov	r1, r6
 8003298:	4658      	mov	r0, fp
 800329a:	f000 fc83 	bl	8003ba4 <__mcmp>
 800329e:	2800      	cmp	r0, #0
 80032a0:	da24      	bge.n	80032ec <_dtoa_r+0x8cc>
 80032a2:	2300      	movs	r3, #0
 80032a4:	4659      	mov	r1, fp
 80032a6:	220a      	movs	r2, #10
 80032a8:	4620      	mov	r0, r4
 80032aa:	f000 fab1 	bl	8003810 <__multadd>
 80032ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80032b0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80032b4:	4683      	mov	fp, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f000 8144 	beq.w	8003544 <_dtoa_r+0xb24>
 80032bc:	2300      	movs	r3, #0
 80032be:	4639      	mov	r1, r7
 80032c0:	220a      	movs	r2, #10
 80032c2:	4620      	mov	r0, r4
 80032c4:	f000 faa4 	bl	8003810 <__multadd>
 80032c8:	9b04      	ldr	r3, [sp, #16]
 80032ca:	4607      	mov	r7, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	dc4d      	bgt.n	800336c <_dtoa_r+0x94c>
 80032d0:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	dd4a      	ble.n	800336c <_dtoa_r+0x94c>
 80032d6:	e011      	b.n	80032fc <_dtoa_r+0x8dc>
 80032d8:	d0c9      	beq.n	800326e <_dtoa_r+0x84e>
 80032da:	9a07      	ldr	r2, [sp, #28]
 80032dc:	331c      	adds	r3, #28
 80032de:	441a      	add	r2, r3
 80032e0:	4499      	add	r9, r3
 80032e2:	441d      	add	r5, r3
 80032e4:	4613      	mov	r3, r2
 80032e6:	e7c1      	b.n	800326c <_dtoa_r+0x84c>
 80032e8:	4603      	mov	r3, r0
 80032ea:	e7f6      	b.n	80032da <_dtoa_r+0x8ba>
 80032ec:	f1b8 0f00 	cmp.w	r8, #0
 80032f0:	dc36      	bgt.n	8003360 <_dtoa_r+0x940>
 80032f2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	dd33      	ble.n	8003360 <_dtoa_r+0x940>
 80032f8:	f8cd 8010 	str.w	r8, [sp, #16]
 80032fc:	9b04      	ldr	r3, [sp, #16]
 80032fe:	b963      	cbnz	r3, 800331a <_dtoa_r+0x8fa>
 8003300:	4631      	mov	r1, r6
 8003302:	2205      	movs	r2, #5
 8003304:	4620      	mov	r0, r4
 8003306:	f000 fa83 	bl	8003810 <__multadd>
 800330a:	4601      	mov	r1, r0
 800330c:	4606      	mov	r6, r0
 800330e:	4658      	mov	r0, fp
 8003310:	f000 fc48 	bl	8003ba4 <__mcmp>
 8003314:	2800      	cmp	r0, #0
 8003316:	f73f add3 	bgt.w	8002ec0 <_dtoa_r+0x4a0>
 800331a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800331c:	9d06      	ldr	r5, [sp, #24]
 800331e:	ea6f 0a03 	mvn.w	sl, r3
 8003322:	f04f 0900 	mov.w	r9, #0
 8003326:	4631      	mov	r1, r6
 8003328:	4620      	mov	r0, r4
 800332a:	f000 fa5a 	bl	80037e2 <_Bfree>
 800332e:	2f00      	cmp	r7, #0
 8003330:	f43f aebd 	beq.w	80030ae <_dtoa_r+0x68e>
 8003334:	f1b9 0f00 	cmp.w	r9, #0
 8003338:	d005      	beq.n	8003346 <_dtoa_r+0x926>
 800333a:	45b9      	cmp	r9, r7
 800333c:	d003      	beq.n	8003346 <_dtoa_r+0x926>
 800333e:	4649      	mov	r1, r9
 8003340:	4620      	mov	r0, r4
 8003342:	f000 fa4e 	bl	80037e2 <_Bfree>
 8003346:	4639      	mov	r1, r7
 8003348:	4620      	mov	r0, r4
 800334a:	f000 fa4a 	bl	80037e2 <_Bfree>
 800334e:	e6ae      	b.n	80030ae <_dtoa_r+0x68e>
 8003350:	2600      	movs	r6, #0
 8003352:	4637      	mov	r7, r6
 8003354:	e7e1      	b.n	800331a <_dtoa_r+0x8fa>
 8003356:	46ba      	mov	sl, r7
 8003358:	4637      	mov	r7, r6
 800335a:	e5b1      	b.n	8002ec0 <_dtoa_r+0x4a0>
 800335c:	40240000 	.word	0x40240000
 8003360:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003362:	f8cd 8010 	str.w	r8, [sp, #16]
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 80f3 	beq.w	8003552 <_dtoa_r+0xb32>
 800336c:	2d00      	cmp	r5, #0
 800336e:	dd05      	ble.n	800337c <_dtoa_r+0x95c>
 8003370:	4639      	mov	r1, r7
 8003372:	462a      	mov	r2, r5
 8003374:	4620      	mov	r0, r4
 8003376:	f000 fbc1 	bl	8003afc <__lshift>
 800337a:	4607      	mov	r7, r0
 800337c:	9b08      	ldr	r3, [sp, #32]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d04c      	beq.n	800341c <_dtoa_r+0x9fc>
 8003382:	6879      	ldr	r1, [r7, #4]
 8003384:	4620      	mov	r0, r4
 8003386:	f000 f9f8 	bl	800377a <_Balloc>
 800338a:	4605      	mov	r5, r0
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	f107 010c 	add.w	r1, r7, #12
 8003392:	3202      	adds	r2, #2
 8003394:	0092      	lsls	r2, r2, #2
 8003396:	300c      	adds	r0, #12
 8003398:	f000 f9e4 	bl	8003764 <memcpy>
 800339c:	2201      	movs	r2, #1
 800339e:	4629      	mov	r1, r5
 80033a0:	4620      	mov	r0, r4
 80033a2:	f000 fbab 	bl	8003afc <__lshift>
 80033a6:	46b9      	mov	r9, r7
 80033a8:	4607      	mov	r7, r0
 80033aa:	9b06      	ldr	r3, [sp, #24]
 80033ac:	9307      	str	r3, [sp, #28]
 80033ae:	9b02      	ldr	r3, [sp, #8]
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	9308      	str	r3, [sp, #32]
 80033b6:	4631      	mov	r1, r6
 80033b8:	4658      	mov	r0, fp
 80033ba:	f7ff faa1 	bl	8002900 <quorem>
 80033be:	4649      	mov	r1, r9
 80033c0:	4605      	mov	r5, r0
 80033c2:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80033c6:	4658      	mov	r0, fp
 80033c8:	f000 fbec 	bl	8003ba4 <__mcmp>
 80033cc:	463a      	mov	r2, r7
 80033ce:	9002      	str	r0, [sp, #8]
 80033d0:	4631      	mov	r1, r6
 80033d2:	4620      	mov	r0, r4
 80033d4:	f000 fc00 	bl	8003bd8 <__mdiff>
 80033d8:	68c3      	ldr	r3, [r0, #12]
 80033da:	4602      	mov	r2, r0
 80033dc:	bb03      	cbnz	r3, 8003420 <_dtoa_r+0xa00>
 80033de:	4601      	mov	r1, r0
 80033e0:	9009      	str	r0, [sp, #36]	; 0x24
 80033e2:	4658      	mov	r0, fp
 80033e4:	f000 fbde 	bl	8003ba4 <__mcmp>
 80033e8:	4603      	mov	r3, r0
 80033ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80033ec:	4611      	mov	r1, r2
 80033ee:	4620      	mov	r0, r4
 80033f0:	9309      	str	r3, [sp, #36]	; 0x24
 80033f2:	f000 f9f6 	bl	80037e2 <_Bfree>
 80033f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033f8:	b9a3      	cbnz	r3, 8003424 <_dtoa_r+0xa04>
 80033fa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80033fc:	b992      	cbnz	r2, 8003424 <_dtoa_r+0xa04>
 80033fe:	9a08      	ldr	r2, [sp, #32]
 8003400:	b982      	cbnz	r2, 8003424 <_dtoa_r+0xa04>
 8003402:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003406:	d029      	beq.n	800345c <_dtoa_r+0xa3c>
 8003408:	9b02      	ldr	r3, [sp, #8]
 800340a:	2b00      	cmp	r3, #0
 800340c:	dd01      	ble.n	8003412 <_dtoa_r+0x9f2>
 800340e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8003412:	9b07      	ldr	r3, [sp, #28]
 8003414:	1c5d      	adds	r5, r3, #1
 8003416:	f883 8000 	strb.w	r8, [r3]
 800341a:	e784      	b.n	8003326 <_dtoa_r+0x906>
 800341c:	4638      	mov	r0, r7
 800341e:	e7c2      	b.n	80033a6 <_dtoa_r+0x986>
 8003420:	2301      	movs	r3, #1
 8003422:	e7e3      	b.n	80033ec <_dtoa_r+0x9cc>
 8003424:	9a02      	ldr	r2, [sp, #8]
 8003426:	2a00      	cmp	r2, #0
 8003428:	db04      	blt.n	8003434 <_dtoa_r+0xa14>
 800342a:	d123      	bne.n	8003474 <_dtoa_r+0xa54>
 800342c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800342e:	bb0a      	cbnz	r2, 8003474 <_dtoa_r+0xa54>
 8003430:	9a08      	ldr	r2, [sp, #32]
 8003432:	b9fa      	cbnz	r2, 8003474 <_dtoa_r+0xa54>
 8003434:	2b00      	cmp	r3, #0
 8003436:	ddec      	ble.n	8003412 <_dtoa_r+0x9f2>
 8003438:	4659      	mov	r1, fp
 800343a:	2201      	movs	r2, #1
 800343c:	4620      	mov	r0, r4
 800343e:	f000 fb5d 	bl	8003afc <__lshift>
 8003442:	4631      	mov	r1, r6
 8003444:	4683      	mov	fp, r0
 8003446:	f000 fbad 	bl	8003ba4 <__mcmp>
 800344a:	2800      	cmp	r0, #0
 800344c:	dc03      	bgt.n	8003456 <_dtoa_r+0xa36>
 800344e:	d1e0      	bne.n	8003412 <_dtoa_r+0x9f2>
 8003450:	f018 0f01 	tst.w	r8, #1
 8003454:	d0dd      	beq.n	8003412 <_dtoa_r+0x9f2>
 8003456:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800345a:	d1d8      	bne.n	800340e <_dtoa_r+0x9ee>
 800345c:	9b07      	ldr	r3, [sp, #28]
 800345e:	9a07      	ldr	r2, [sp, #28]
 8003460:	1c5d      	adds	r5, r3, #1
 8003462:	2339      	movs	r3, #57	; 0x39
 8003464:	7013      	strb	r3, [r2, #0]
 8003466:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800346a:	1e6a      	subs	r2, r5, #1
 800346c:	2b39      	cmp	r3, #57	; 0x39
 800346e:	d04d      	beq.n	800350c <_dtoa_r+0xaec>
 8003470:	3301      	adds	r3, #1
 8003472:	e052      	b.n	800351a <_dtoa_r+0xafa>
 8003474:	9a07      	ldr	r2, [sp, #28]
 8003476:	2b00      	cmp	r3, #0
 8003478:	f102 0501 	add.w	r5, r2, #1
 800347c:	dd06      	ble.n	800348c <_dtoa_r+0xa6c>
 800347e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8003482:	d0eb      	beq.n	800345c <_dtoa_r+0xa3c>
 8003484:	f108 0801 	add.w	r8, r8, #1
 8003488:	9b07      	ldr	r3, [sp, #28]
 800348a:	e7c4      	b.n	8003416 <_dtoa_r+0x9f6>
 800348c:	9b06      	ldr	r3, [sp, #24]
 800348e:	9a04      	ldr	r2, [sp, #16]
 8003490:	1aeb      	subs	r3, r5, r3
 8003492:	4293      	cmp	r3, r2
 8003494:	f805 8c01 	strb.w	r8, [r5, #-1]
 8003498:	d021      	beq.n	80034de <_dtoa_r+0xabe>
 800349a:	4659      	mov	r1, fp
 800349c:	2300      	movs	r3, #0
 800349e:	220a      	movs	r2, #10
 80034a0:	4620      	mov	r0, r4
 80034a2:	f000 f9b5 	bl	8003810 <__multadd>
 80034a6:	45b9      	cmp	r9, r7
 80034a8:	4683      	mov	fp, r0
 80034aa:	f04f 0300 	mov.w	r3, #0
 80034ae:	f04f 020a 	mov.w	r2, #10
 80034b2:	4649      	mov	r1, r9
 80034b4:	4620      	mov	r0, r4
 80034b6:	d105      	bne.n	80034c4 <_dtoa_r+0xaa4>
 80034b8:	f000 f9aa 	bl	8003810 <__multadd>
 80034bc:	4681      	mov	r9, r0
 80034be:	4607      	mov	r7, r0
 80034c0:	9507      	str	r5, [sp, #28]
 80034c2:	e778      	b.n	80033b6 <_dtoa_r+0x996>
 80034c4:	f000 f9a4 	bl	8003810 <__multadd>
 80034c8:	4639      	mov	r1, r7
 80034ca:	4681      	mov	r9, r0
 80034cc:	2300      	movs	r3, #0
 80034ce:	220a      	movs	r2, #10
 80034d0:	4620      	mov	r0, r4
 80034d2:	f000 f99d 	bl	8003810 <__multadd>
 80034d6:	4607      	mov	r7, r0
 80034d8:	e7f2      	b.n	80034c0 <_dtoa_r+0xaa0>
 80034da:	f04f 0900 	mov.w	r9, #0
 80034de:	4659      	mov	r1, fp
 80034e0:	2201      	movs	r2, #1
 80034e2:	4620      	mov	r0, r4
 80034e4:	f000 fb0a 	bl	8003afc <__lshift>
 80034e8:	4631      	mov	r1, r6
 80034ea:	4683      	mov	fp, r0
 80034ec:	f000 fb5a 	bl	8003ba4 <__mcmp>
 80034f0:	2800      	cmp	r0, #0
 80034f2:	dcb8      	bgt.n	8003466 <_dtoa_r+0xa46>
 80034f4:	d102      	bne.n	80034fc <_dtoa_r+0xadc>
 80034f6:	f018 0f01 	tst.w	r8, #1
 80034fa:	d1b4      	bne.n	8003466 <_dtoa_r+0xa46>
 80034fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003500:	1e6a      	subs	r2, r5, #1
 8003502:	2b30      	cmp	r3, #48	; 0x30
 8003504:	f47f af0f 	bne.w	8003326 <_dtoa_r+0x906>
 8003508:	4615      	mov	r5, r2
 800350a:	e7f7      	b.n	80034fc <_dtoa_r+0xadc>
 800350c:	9b06      	ldr	r3, [sp, #24]
 800350e:	4293      	cmp	r3, r2
 8003510:	d105      	bne.n	800351e <_dtoa_r+0xafe>
 8003512:	2331      	movs	r3, #49	; 0x31
 8003514:	9a06      	ldr	r2, [sp, #24]
 8003516:	f10a 0a01 	add.w	sl, sl, #1
 800351a:	7013      	strb	r3, [r2, #0]
 800351c:	e703      	b.n	8003326 <_dtoa_r+0x906>
 800351e:	4615      	mov	r5, r2
 8003520:	e7a1      	b.n	8003466 <_dtoa_r+0xa46>
 8003522:	4b17      	ldr	r3, [pc, #92]	; (8003580 <_dtoa_r+0xb60>)
 8003524:	f7ff bae1 	b.w	8002aea <_dtoa_r+0xca>
 8003528:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800352a:	2b00      	cmp	r3, #0
 800352c:	f47f aabb 	bne.w	8002aa6 <_dtoa_r+0x86>
 8003530:	4b14      	ldr	r3, [pc, #80]	; (8003584 <_dtoa_r+0xb64>)
 8003532:	f7ff bada 	b.w	8002aea <_dtoa_r+0xca>
 8003536:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003538:	2b01      	cmp	r3, #1
 800353a:	f77f ae3f 	ble.w	80031bc <_dtoa_r+0x79c>
 800353e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003540:	9308      	str	r3, [sp, #32]
 8003542:	e653      	b.n	80031ec <_dtoa_r+0x7cc>
 8003544:	9b04      	ldr	r3, [sp, #16]
 8003546:	2b00      	cmp	r3, #0
 8003548:	dc03      	bgt.n	8003552 <_dtoa_r+0xb32>
 800354a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800354c:	2b02      	cmp	r3, #2
 800354e:	f73f aed5 	bgt.w	80032fc <_dtoa_r+0x8dc>
 8003552:	9d06      	ldr	r5, [sp, #24]
 8003554:	4631      	mov	r1, r6
 8003556:	4658      	mov	r0, fp
 8003558:	f7ff f9d2 	bl	8002900 <quorem>
 800355c:	9b06      	ldr	r3, [sp, #24]
 800355e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8003562:	f805 8b01 	strb.w	r8, [r5], #1
 8003566:	9a04      	ldr	r2, [sp, #16]
 8003568:	1aeb      	subs	r3, r5, r3
 800356a:	429a      	cmp	r2, r3
 800356c:	ddb5      	ble.n	80034da <_dtoa_r+0xaba>
 800356e:	4659      	mov	r1, fp
 8003570:	2300      	movs	r3, #0
 8003572:	220a      	movs	r2, #10
 8003574:	4620      	mov	r0, r4
 8003576:	f000 f94b 	bl	8003810 <__multadd>
 800357a:	4683      	mov	fp, r0
 800357c:	e7ea      	b.n	8003554 <_dtoa_r+0xb34>
 800357e:	bf00      	nop
 8003580:	08004708 	.word	0x08004708
 8003584:	0800472c 	.word	0x0800472c

08003588 <std>:
 8003588:	2300      	movs	r3, #0
 800358a:	b510      	push	{r4, lr}
 800358c:	4604      	mov	r4, r0
 800358e:	e9c0 3300 	strd	r3, r3, [r0]
 8003592:	6083      	str	r3, [r0, #8]
 8003594:	8181      	strh	r1, [r0, #12]
 8003596:	6643      	str	r3, [r0, #100]	; 0x64
 8003598:	81c2      	strh	r2, [r0, #14]
 800359a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800359e:	6183      	str	r3, [r0, #24]
 80035a0:	4619      	mov	r1, r3
 80035a2:	2208      	movs	r2, #8
 80035a4:	305c      	adds	r0, #92	; 0x5c
 80035a6:	f7fe fd3b 	bl	8002020 <memset>
 80035aa:	4b05      	ldr	r3, [pc, #20]	; (80035c0 <std+0x38>)
 80035ac:	6224      	str	r4, [r4, #32]
 80035ae:	6263      	str	r3, [r4, #36]	; 0x24
 80035b0:	4b04      	ldr	r3, [pc, #16]	; (80035c4 <std+0x3c>)
 80035b2:	62a3      	str	r3, [r4, #40]	; 0x28
 80035b4:	4b04      	ldr	r3, [pc, #16]	; (80035c8 <std+0x40>)
 80035b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80035b8:	4b04      	ldr	r3, [pc, #16]	; (80035cc <std+0x44>)
 80035ba:	6323      	str	r3, [r4, #48]	; 0x30
 80035bc:	bd10      	pop	{r4, pc}
 80035be:	bf00      	nop
 80035c0:	08004139 	.word	0x08004139
 80035c4:	0800415b 	.word	0x0800415b
 80035c8:	08004193 	.word	0x08004193
 80035cc:	080041b7 	.word	0x080041b7

080035d0 <_cleanup_r>:
 80035d0:	4901      	ldr	r1, [pc, #4]	; (80035d8 <_cleanup_r+0x8>)
 80035d2:	f000 b885 	b.w	80036e0 <_fwalk_reent>
 80035d6:	bf00      	nop
 80035d8:	08004491 	.word	0x08004491

080035dc <__sfmoreglue>:
 80035dc:	b570      	push	{r4, r5, r6, lr}
 80035de:	2568      	movs	r5, #104	; 0x68
 80035e0:	1e4a      	subs	r2, r1, #1
 80035e2:	4355      	muls	r5, r2
 80035e4:	460e      	mov	r6, r1
 80035e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80035ea:	f000 fbfd 	bl	8003de8 <_malloc_r>
 80035ee:	4604      	mov	r4, r0
 80035f0:	b140      	cbz	r0, 8003604 <__sfmoreglue+0x28>
 80035f2:	2100      	movs	r1, #0
 80035f4:	e9c0 1600 	strd	r1, r6, [r0]
 80035f8:	300c      	adds	r0, #12
 80035fa:	60a0      	str	r0, [r4, #8]
 80035fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003600:	f7fe fd0e 	bl	8002020 <memset>
 8003604:	4620      	mov	r0, r4
 8003606:	bd70      	pop	{r4, r5, r6, pc}

08003608 <__sinit>:
 8003608:	6983      	ldr	r3, [r0, #24]
 800360a:	b510      	push	{r4, lr}
 800360c:	4604      	mov	r4, r0
 800360e:	bb33      	cbnz	r3, 800365e <__sinit+0x56>
 8003610:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003614:	6503      	str	r3, [r0, #80]	; 0x50
 8003616:	4b12      	ldr	r3, [pc, #72]	; (8003660 <__sinit+0x58>)
 8003618:	4a12      	ldr	r2, [pc, #72]	; (8003664 <__sinit+0x5c>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6282      	str	r2, [r0, #40]	; 0x28
 800361e:	4298      	cmp	r0, r3
 8003620:	bf04      	itt	eq
 8003622:	2301      	moveq	r3, #1
 8003624:	6183      	streq	r3, [r0, #24]
 8003626:	f000 f81f 	bl	8003668 <__sfp>
 800362a:	6060      	str	r0, [r4, #4]
 800362c:	4620      	mov	r0, r4
 800362e:	f000 f81b 	bl	8003668 <__sfp>
 8003632:	60a0      	str	r0, [r4, #8]
 8003634:	4620      	mov	r0, r4
 8003636:	f000 f817 	bl	8003668 <__sfp>
 800363a:	2200      	movs	r2, #0
 800363c:	60e0      	str	r0, [r4, #12]
 800363e:	2104      	movs	r1, #4
 8003640:	6860      	ldr	r0, [r4, #4]
 8003642:	f7ff ffa1 	bl	8003588 <std>
 8003646:	2201      	movs	r2, #1
 8003648:	2109      	movs	r1, #9
 800364a:	68a0      	ldr	r0, [r4, #8]
 800364c:	f7ff ff9c 	bl	8003588 <std>
 8003650:	2202      	movs	r2, #2
 8003652:	2112      	movs	r1, #18
 8003654:	68e0      	ldr	r0, [r4, #12]
 8003656:	f7ff ff97 	bl	8003588 <std>
 800365a:	2301      	movs	r3, #1
 800365c:	61a3      	str	r3, [r4, #24]
 800365e:	bd10      	pop	{r4, pc}
 8003660:	080046f4 	.word	0x080046f4
 8003664:	080035d1 	.word	0x080035d1

08003668 <__sfp>:
 8003668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800366a:	4b1b      	ldr	r3, [pc, #108]	; (80036d8 <__sfp+0x70>)
 800366c:	4607      	mov	r7, r0
 800366e:	681e      	ldr	r6, [r3, #0]
 8003670:	69b3      	ldr	r3, [r6, #24]
 8003672:	b913      	cbnz	r3, 800367a <__sfp+0x12>
 8003674:	4630      	mov	r0, r6
 8003676:	f7ff ffc7 	bl	8003608 <__sinit>
 800367a:	3648      	adds	r6, #72	; 0x48
 800367c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003680:	3b01      	subs	r3, #1
 8003682:	d503      	bpl.n	800368c <__sfp+0x24>
 8003684:	6833      	ldr	r3, [r6, #0]
 8003686:	b133      	cbz	r3, 8003696 <__sfp+0x2e>
 8003688:	6836      	ldr	r6, [r6, #0]
 800368a:	e7f7      	b.n	800367c <__sfp+0x14>
 800368c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003690:	b16d      	cbz	r5, 80036ae <__sfp+0x46>
 8003692:	3468      	adds	r4, #104	; 0x68
 8003694:	e7f4      	b.n	8003680 <__sfp+0x18>
 8003696:	2104      	movs	r1, #4
 8003698:	4638      	mov	r0, r7
 800369a:	f7ff ff9f 	bl	80035dc <__sfmoreglue>
 800369e:	6030      	str	r0, [r6, #0]
 80036a0:	2800      	cmp	r0, #0
 80036a2:	d1f1      	bne.n	8003688 <__sfp+0x20>
 80036a4:	230c      	movs	r3, #12
 80036a6:	4604      	mov	r4, r0
 80036a8:	603b      	str	r3, [r7, #0]
 80036aa:	4620      	mov	r0, r4
 80036ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80036ae:	4b0b      	ldr	r3, [pc, #44]	; (80036dc <__sfp+0x74>)
 80036b0:	6665      	str	r5, [r4, #100]	; 0x64
 80036b2:	e9c4 5500 	strd	r5, r5, [r4]
 80036b6:	60a5      	str	r5, [r4, #8]
 80036b8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80036bc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80036c0:	2208      	movs	r2, #8
 80036c2:	4629      	mov	r1, r5
 80036c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80036c8:	f7fe fcaa 	bl	8002020 <memset>
 80036cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80036d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80036d4:	e7e9      	b.n	80036aa <__sfp+0x42>
 80036d6:	bf00      	nop
 80036d8:	080046f4 	.word	0x080046f4
 80036dc:	ffff0001 	.word	0xffff0001

080036e0 <_fwalk_reent>:
 80036e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80036e4:	4680      	mov	r8, r0
 80036e6:	4689      	mov	r9, r1
 80036e8:	2600      	movs	r6, #0
 80036ea:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80036ee:	b914      	cbnz	r4, 80036f6 <_fwalk_reent+0x16>
 80036f0:	4630      	mov	r0, r6
 80036f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036f6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80036fa:	3f01      	subs	r7, #1
 80036fc:	d501      	bpl.n	8003702 <_fwalk_reent+0x22>
 80036fe:	6824      	ldr	r4, [r4, #0]
 8003700:	e7f5      	b.n	80036ee <_fwalk_reent+0xe>
 8003702:	89ab      	ldrh	r3, [r5, #12]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d907      	bls.n	8003718 <_fwalk_reent+0x38>
 8003708:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800370c:	3301      	adds	r3, #1
 800370e:	d003      	beq.n	8003718 <_fwalk_reent+0x38>
 8003710:	4629      	mov	r1, r5
 8003712:	4640      	mov	r0, r8
 8003714:	47c8      	blx	r9
 8003716:	4306      	orrs	r6, r0
 8003718:	3568      	adds	r5, #104	; 0x68
 800371a:	e7ee      	b.n	80036fa <_fwalk_reent+0x1a>

0800371c <_localeconv_r>:
 800371c:	4b04      	ldr	r3, [pc, #16]	; (8003730 <_localeconv_r+0x14>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6a18      	ldr	r0, [r3, #32]
 8003722:	4b04      	ldr	r3, [pc, #16]	; (8003734 <_localeconv_r+0x18>)
 8003724:	2800      	cmp	r0, #0
 8003726:	bf08      	it	eq
 8003728:	4618      	moveq	r0, r3
 800372a:	30f0      	adds	r0, #240	; 0xf0
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	2000000c 	.word	0x2000000c
 8003734:	20000070 	.word	0x20000070

08003738 <malloc>:
 8003738:	4b02      	ldr	r3, [pc, #8]	; (8003744 <malloc+0xc>)
 800373a:	4601      	mov	r1, r0
 800373c:	6818      	ldr	r0, [r3, #0]
 800373e:	f000 bb53 	b.w	8003de8 <_malloc_r>
 8003742:	bf00      	nop
 8003744:	2000000c 	.word	0x2000000c

08003748 <memchr>:
 8003748:	b510      	push	{r4, lr}
 800374a:	b2c9      	uxtb	r1, r1
 800374c:	4402      	add	r2, r0
 800374e:	4290      	cmp	r0, r2
 8003750:	4603      	mov	r3, r0
 8003752:	d101      	bne.n	8003758 <memchr+0x10>
 8003754:	2300      	movs	r3, #0
 8003756:	e003      	b.n	8003760 <memchr+0x18>
 8003758:	781c      	ldrb	r4, [r3, #0]
 800375a:	3001      	adds	r0, #1
 800375c:	428c      	cmp	r4, r1
 800375e:	d1f6      	bne.n	800374e <memchr+0x6>
 8003760:	4618      	mov	r0, r3
 8003762:	bd10      	pop	{r4, pc}

08003764 <memcpy>:
 8003764:	b510      	push	{r4, lr}
 8003766:	1e43      	subs	r3, r0, #1
 8003768:	440a      	add	r2, r1
 800376a:	4291      	cmp	r1, r2
 800376c:	d100      	bne.n	8003770 <memcpy+0xc>
 800376e:	bd10      	pop	{r4, pc}
 8003770:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003774:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003778:	e7f7      	b.n	800376a <memcpy+0x6>

0800377a <_Balloc>:
 800377a:	b570      	push	{r4, r5, r6, lr}
 800377c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800377e:	4604      	mov	r4, r0
 8003780:	460e      	mov	r6, r1
 8003782:	b93d      	cbnz	r5, 8003794 <_Balloc+0x1a>
 8003784:	2010      	movs	r0, #16
 8003786:	f7ff ffd7 	bl	8003738 <malloc>
 800378a:	6260      	str	r0, [r4, #36]	; 0x24
 800378c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003790:	6005      	str	r5, [r0, #0]
 8003792:	60c5      	str	r5, [r0, #12]
 8003794:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003796:	68eb      	ldr	r3, [r5, #12]
 8003798:	b183      	cbz	r3, 80037bc <_Balloc+0x42>
 800379a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80037a2:	b9b8      	cbnz	r0, 80037d4 <_Balloc+0x5a>
 80037a4:	2101      	movs	r1, #1
 80037a6:	fa01 f506 	lsl.w	r5, r1, r6
 80037aa:	1d6a      	adds	r2, r5, #5
 80037ac:	0092      	lsls	r2, r2, #2
 80037ae:	4620      	mov	r0, r4
 80037b0:	f000 fabf 	bl	8003d32 <_calloc_r>
 80037b4:	b160      	cbz	r0, 80037d0 <_Balloc+0x56>
 80037b6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80037ba:	e00e      	b.n	80037da <_Balloc+0x60>
 80037bc:	2221      	movs	r2, #33	; 0x21
 80037be:	2104      	movs	r1, #4
 80037c0:	4620      	mov	r0, r4
 80037c2:	f000 fab6 	bl	8003d32 <_calloc_r>
 80037c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80037c8:	60e8      	str	r0, [r5, #12]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1e4      	bne.n	800379a <_Balloc+0x20>
 80037d0:	2000      	movs	r0, #0
 80037d2:	bd70      	pop	{r4, r5, r6, pc}
 80037d4:	6802      	ldr	r2, [r0, #0]
 80037d6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80037da:	2300      	movs	r3, #0
 80037dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80037e0:	e7f7      	b.n	80037d2 <_Balloc+0x58>

080037e2 <_Bfree>:
 80037e2:	b570      	push	{r4, r5, r6, lr}
 80037e4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80037e6:	4606      	mov	r6, r0
 80037e8:	460d      	mov	r5, r1
 80037ea:	b93c      	cbnz	r4, 80037fc <_Bfree+0x1a>
 80037ec:	2010      	movs	r0, #16
 80037ee:	f7ff ffa3 	bl	8003738 <malloc>
 80037f2:	6270      	str	r0, [r6, #36]	; 0x24
 80037f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80037f8:	6004      	str	r4, [r0, #0]
 80037fa:	60c4      	str	r4, [r0, #12]
 80037fc:	b13d      	cbz	r5, 800380e <_Bfree+0x2c>
 80037fe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003800:	686a      	ldr	r2, [r5, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003808:	6029      	str	r1, [r5, #0]
 800380a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800380e:	bd70      	pop	{r4, r5, r6, pc}

08003810 <__multadd>:
 8003810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003814:	461f      	mov	r7, r3
 8003816:	4606      	mov	r6, r0
 8003818:	460c      	mov	r4, r1
 800381a:	2300      	movs	r3, #0
 800381c:	690d      	ldr	r5, [r1, #16]
 800381e:	f101 0c14 	add.w	ip, r1, #20
 8003822:	f8dc 0000 	ldr.w	r0, [ip]
 8003826:	3301      	adds	r3, #1
 8003828:	b281      	uxth	r1, r0
 800382a:	fb02 7101 	mla	r1, r2, r1, r7
 800382e:	0c00      	lsrs	r0, r0, #16
 8003830:	0c0f      	lsrs	r7, r1, #16
 8003832:	fb02 7000 	mla	r0, r2, r0, r7
 8003836:	b289      	uxth	r1, r1
 8003838:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800383c:	429d      	cmp	r5, r3
 800383e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8003842:	f84c 1b04 	str.w	r1, [ip], #4
 8003846:	dcec      	bgt.n	8003822 <__multadd+0x12>
 8003848:	b1d7      	cbz	r7, 8003880 <__multadd+0x70>
 800384a:	68a3      	ldr	r3, [r4, #8]
 800384c:	42ab      	cmp	r3, r5
 800384e:	dc12      	bgt.n	8003876 <__multadd+0x66>
 8003850:	6861      	ldr	r1, [r4, #4]
 8003852:	4630      	mov	r0, r6
 8003854:	3101      	adds	r1, #1
 8003856:	f7ff ff90 	bl	800377a <_Balloc>
 800385a:	4680      	mov	r8, r0
 800385c:	6922      	ldr	r2, [r4, #16]
 800385e:	f104 010c 	add.w	r1, r4, #12
 8003862:	3202      	adds	r2, #2
 8003864:	0092      	lsls	r2, r2, #2
 8003866:	300c      	adds	r0, #12
 8003868:	f7ff ff7c 	bl	8003764 <memcpy>
 800386c:	4621      	mov	r1, r4
 800386e:	4630      	mov	r0, r6
 8003870:	f7ff ffb7 	bl	80037e2 <_Bfree>
 8003874:	4644      	mov	r4, r8
 8003876:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800387a:	3501      	adds	r5, #1
 800387c:	615f      	str	r7, [r3, #20]
 800387e:	6125      	str	r5, [r4, #16]
 8003880:	4620      	mov	r0, r4
 8003882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003886 <__hi0bits>:
 8003886:	0c02      	lsrs	r2, r0, #16
 8003888:	0412      	lsls	r2, r2, #16
 800388a:	4603      	mov	r3, r0
 800388c:	b9b2      	cbnz	r2, 80038bc <__hi0bits+0x36>
 800388e:	0403      	lsls	r3, r0, #16
 8003890:	2010      	movs	r0, #16
 8003892:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8003896:	bf04      	itt	eq
 8003898:	021b      	lsleq	r3, r3, #8
 800389a:	3008      	addeq	r0, #8
 800389c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80038a0:	bf04      	itt	eq
 80038a2:	011b      	lsleq	r3, r3, #4
 80038a4:	3004      	addeq	r0, #4
 80038a6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80038aa:	bf04      	itt	eq
 80038ac:	009b      	lsleq	r3, r3, #2
 80038ae:	3002      	addeq	r0, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	db06      	blt.n	80038c2 <__hi0bits+0x3c>
 80038b4:	005b      	lsls	r3, r3, #1
 80038b6:	d503      	bpl.n	80038c0 <__hi0bits+0x3a>
 80038b8:	3001      	adds	r0, #1
 80038ba:	4770      	bx	lr
 80038bc:	2000      	movs	r0, #0
 80038be:	e7e8      	b.n	8003892 <__hi0bits+0xc>
 80038c0:	2020      	movs	r0, #32
 80038c2:	4770      	bx	lr

080038c4 <__lo0bits>:
 80038c4:	6803      	ldr	r3, [r0, #0]
 80038c6:	4601      	mov	r1, r0
 80038c8:	f013 0207 	ands.w	r2, r3, #7
 80038cc:	d00b      	beq.n	80038e6 <__lo0bits+0x22>
 80038ce:	07da      	lsls	r2, r3, #31
 80038d0:	d423      	bmi.n	800391a <__lo0bits+0x56>
 80038d2:	0798      	lsls	r0, r3, #30
 80038d4:	bf49      	itett	mi
 80038d6:	085b      	lsrmi	r3, r3, #1
 80038d8:	089b      	lsrpl	r3, r3, #2
 80038da:	2001      	movmi	r0, #1
 80038dc:	600b      	strmi	r3, [r1, #0]
 80038de:	bf5c      	itt	pl
 80038e0:	600b      	strpl	r3, [r1, #0]
 80038e2:	2002      	movpl	r0, #2
 80038e4:	4770      	bx	lr
 80038e6:	b298      	uxth	r0, r3
 80038e8:	b9a8      	cbnz	r0, 8003916 <__lo0bits+0x52>
 80038ea:	2010      	movs	r0, #16
 80038ec:	0c1b      	lsrs	r3, r3, #16
 80038ee:	f013 0fff 	tst.w	r3, #255	; 0xff
 80038f2:	bf04      	itt	eq
 80038f4:	0a1b      	lsreq	r3, r3, #8
 80038f6:	3008      	addeq	r0, #8
 80038f8:	071a      	lsls	r2, r3, #28
 80038fa:	bf04      	itt	eq
 80038fc:	091b      	lsreq	r3, r3, #4
 80038fe:	3004      	addeq	r0, #4
 8003900:	079a      	lsls	r2, r3, #30
 8003902:	bf04      	itt	eq
 8003904:	089b      	lsreq	r3, r3, #2
 8003906:	3002      	addeq	r0, #2
 8003908:	07da      	lsls	r2, r3, #31
 800390a:	d402      	bmi.n	8003912 <__lo0bits+0x4e>
 800390c:	085b      	lsrs	r3, r3, #1
 800390e:	d006      	beq.n	800391e <__lo0bits+0x5a>
 8003910:	3001      	adds	r0, #1
 8003912:	600b      	str	r3, [r1, #0]
 8003914:	4770      	bx	lr
 8003916:	4610      	mov	r0, r2
 8003918:	e7e9      	b.n	80038ee <__lo0bits+0x2a>
 800391a:	2000      	movs	r0, #0
 800391c:	4770      	bx	lr
 800391e:	2020      	movs	r0, #32
 8003920:	4770      	bx	lr

08003922 <__i2b>:
 8003922:	b510      	push	{r4, lr}
 8003924:	460c      	mov	r4, r1
 8003926:	2101      	movs	r1, #1
 8003928:	f7ff ff27 	bl	800377a <_Balloc>
 800392c:	2201      	movs	r2, #1
 800392e:	6144      	str	r4, [r0, #20]
 8003930:	6102      	str	r2, [r0, #16]
 8003932:	bd10      	pop	{r4, pc}

08003934 <__multiply>:
 8003934:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003938:	4614      	mov	r4, r2
 800393a:	690a      	ldr	r2, [r1, #16]
 800393c:	6923      	ldr	r3, [r4, #16]
 800393e:	4688      	mov	r8, r1
 8003940:	429a      	cmp	r2, r3
 8003942:	bfbe      	ittt	lt
 8003944:	460b      	movlt	r3, r1
 8003946:	46a0      	movlt	r8, r4
 8003948:	461c      	movlt	r4, r3
 800394a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800394e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8003952:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8003956:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800395a:	eb07 0609 	add.w	r6, r7, r9
 800395e:	42b3      	cmp	r3, r6
 8003960:	bfb8      	it	lt
 8003962:	3101      	addlt	r1, #1
 8003964:	f7ff ff09 	bl	800377a <_Balloc>
 8003968:	f100 0514 	add.w	r5, r0, #20
 800396c:	462b      	mov	r3, r5
 800396e:	2200      	movs	r2, #0
 8003970:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8003974:	4573      	cmp	r3, lr
 8003976:	d316      	bcc.n	80039a6 <__multiply+0x72>
 8003978:	f104 0214 	add.w	r2, r4, #20
 800397c:	f108 0114 	add.w	r1, r8, #20
 8003980:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8003984:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8003988:	9300      	str	r3, [sp, #0]
 800398a:	9b00      	ldr	r3, [sp, #0]
 800398c:	9201      	str	r2, [sp, #4]
 800398e:	4293      	cmp	r3, r2
 8003990:	d80c      	bhi.n	80039ac <__multiply+0x78>
 8003992:	2e00      	cmp	r6, #0
 8003994:	dd03      	ble.n	800399e <__multiply+0x6a>
 8003996:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800399a:	2b00      	cmp	r3, #0
 800399c:	d05d      	beq.n	8003a5a <__multiply+0x126>
 800399e:	6106      	str	r6, [r0, #16]
 80039a0:	b003      	add	sp, #12
 80039a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039a6:	f843 2b04 	str.w	r2, [r3], #4
 80039aa:	e7e3      	b.n	8003974 <__multiply+0x40>
 80039ac:	f8b2 b000 	ldrh.w	fp, [r2]
 80039b0:	f1bb 0f00 	cmp.w	fp, #0
 80039b4:	d023      	beq.n	80039fe <__multiply+0xca>
 80039b6:	4689      	mov	r9, r1
 80039b8:	46ac      	mov	ip, r5
 80039ba:	f04f 0800 	mov.w	r8, #0
 80039be:	f859 4b04 	ldr.w	r4, [r9], #4
 80039c2:	f8dc a000 	ldr.w	sl, [ip]
 80039c6:	b2a3      	uxth	r3, r4
 80039c8:	fa1f fa8a 	uxth.w	sl, sl
 80039cc:	fb0b a303 	mla	r3, fp, r3, sl
 80039d0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80039d4:	f8dc 4000 	ldr.w	r4, [ip]
 80039d8:	4443      	add	r3, r8
 80039da:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80039de:	fb0b 840a 	mla	r4, fp, sl, r8
 80039e2:	46e2      	mov	sl, ip
 80039e4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80039ee:	454f      	cmp	r7, r9
 80039f0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80039f4:	f84a 3b04 	str.w	r3, [sl], #4
 80039f8:	d82b      	bhi.n	8003a52 <__multiply+0x11e>
 80039fa:	f8cc 8004 	str.w	r8, [ip, #4]
 80039fe:	9b01      	ldr	r3, [sp, #4]
 8003a00:	3204      	adds	r2, #4
 8003a02:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8003a06:	f1ba 0f00 	cmp.w	sl, #0
 8003a0a:	d020      	beq.n	8003a4e <__multiply+0x11a>
 8003a0c:	4689      	mov	r9, r1
 8003a0e:	46a8      	mov	r8, r5
 8003a10:	f04f 0b00 	mov.w	fp, #0
 8003a14:	682b      	ldr	r3, [r5, #0]
 8003a16:	f8b9 c000 	ldrh.w	ip, [r9]
 8003a1a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	fb0a 440c 	mla	r4, sl, ip, r4
 8003a24:	46c4      	mov	ip, r8
 8003a26:	445c      	add	r4, fp
 8003a28:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8003a2c:	f84c 3b04 	str.w	r3, [ip], #4
 8003a30:	f859 3b04 	ldr.w	r3, [r9], #4
 8003a34:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8003a38:	0c1b      	lsrs	r3, r3, #16
 8003a3a:	fb0a b303 	mla	r3, sl, r3, fp
 8003a3e:	454f      	cmp	r7, r9
 8003a40:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8003a44:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8003a48:	d805      	bhi.n	8003a56 <__multiply+0x122>
 8003a4a:	f8c8 3004 	str.w	r3, [r8, #4]
 8003a4e:	3504      	adds	r5, #4
 8003a50:	e79b      	b.n	800398a <__multiply+0x56>
 8003a52:	46d4      	mov	ip, sl
 8003a54:	e7b3      	b.n	80039be <__multiply+0x8a>
 8003a56:	46e0      	mov	r8, ip
 8003a58:	e7dd      	b.n	8003a16 <__multiply+0xe2>
 8003a5a:	3e01      	subs	r6, #1
 8003a5c:	e799      	b.n	8003992 <__multiply+0x5e>
	...

08003a60 <__pow5mult>:
 8003a60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a64:	4615      	mov	r5, r2
 8003a66:	f012 0203 	ands.w	r2, r2, #3
 8003a6a:	4606      	mov	r6, r0
 8003a6c:	460f      	mov	r7, r1
 8003a6e:	d007      	beq.n	8003a80 <__pow5mult+0x20>
 8003a70:	4c21      	ldr	r4, [pc, #132]	; (8003af8 <__pow5mult+0x98>)
 8003a72:	3a01      	subs	r2, #1
 8003a74:	2300      	movs	r3, #0
 8003a76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8003a7a:	f7ff fec9 	bl	8003810 <__multadd>
 8003a7e:	4607      	mov	r7, r0
 8003a80:	10ad      	asrs	r5, r5, #2
 8003a82:	d035      	beq.n	8003af0 <__pow5mult+0x90>
 8003a84:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8003a86:	b93c      	cbnz	r4, 8003a98 <__pow5mult+0x38>
 8003a88:	2010      	movs	r0, #16
 8003a8a:	f7ff fe55 	bl	8003738 <malloc>
 8003a8e:	6270      	str	r0, [r6, #36]	; 0x24
 8003a90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003a94:	6004      	str	r4, [r0, #0]
 8003a96:	60c4      	str	r4, [r0, #12]
 8003a98:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8003a9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8003aa0:	b94c      	cbnz	r4, 8003ab6 <__pow5mult+0x56>
 8003aa2:	f240 2171 	movw	r1, #625	; 0x271
 8003aa6:	4630      	mov	r0, r6
 8003aa8:	f7ff ff3b 	bl	8003922 <__i2b>
 8003aac:	2300      	movs	r3, #0
 8003aae:	4604      	mov	r4, r0
 8003ab0:	f8c8 0008 	str.w	r0, [r8, #8]
 8003ab4:	6003      	str	r3, [r0, #0]
 8003ab6:	f04f 0800 	mov.w	r8, #0
 8003aba:	07eb      	lsls	r3, r5, #31
 8003abc:	d50a      	bpl.n	8003ad4 <__pow5mult+0x74>
 8003abe:	4639      	mov	r1, r7
 8003ac0:	4622      	mov	r2, r4
 8003ac2:	4630      	mov	r0, r6
 8003ac4:	f7ff ff36 	bl	8003934 <__multiply>
 8003ac8:	4681      	mov	r9, r0
 8003aca:	4639      	mov	r1, r7
 8003acc:	4630      	mov	r0, r6
 8003ace:	f7ff fe88 	bl	80037e2 <_Bfree>
 8003ad2:	464f      	mov	r7, r9
 8003ad4:	106d      	asrs	r5, r5, #1
 8003ad6:	d00b      	beq.n	8003af0 <__pow5mult+0x90>
 8003ad8:	6820      	ldr	r0, [r4, #0]
 8003ada:	b938      	cbnz	r0, 8003aec <__pow5mult+0x8c>
 8003adc:	4622      	mov	r2, r4
 8003ade:	4621      	mov	r1, r4
 8003ae0:	4630      	mov	r0, r6
 8003ae2:	f7ff ff27 	bl	8003934 <__multiply>
 8003ae6:	6020      	str	r0, [r4, #0]
 8003ae8:	f8c0 8000 	str.w	r8, [r0]
 8003aec:	4604      	mov	r4, r0
 8003aee:	e7e4      	b.n	8003aba <__pow5mult+0x5a>
 8003af0:	4638      	mov	r0, r7
 8003af2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003af6:	bf00      	nop
 8003af8:	08004890 	.word	0x08004890

08003afc <__lshift>:
 8003afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b00:	460c      	mov	r4, r1
 8003b02:	4607      	mov	r7, r0
 8003b04:	4616      	mov	r6, r2
 8003b06:	6923      	ldr	r3, [r4, #16]
 8003b08:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8003b0c:	eb0a 0903 	add.w	r9, sl, r3
 8003b10:	6849      	ldr	r1, [r1, #4]
 8003b12:	68a3      	ldr	r3, [r4, #8]
 8003b14:	f109 0501 	add.w	r5, r9, #1
 8003b18:	42ab      	cmp	r3, r5
 8003b1a:	db32      	blt.n	8003b82 <__lshift+0x86>
 8003b1c:	4638      	mov	r0, r7
 8003b1e:	f7ff fe2c 	bl	800377a <_Balloc>
 8003b22:	2300      	movs	r3, #0
 8003b24:	4680      	mov	r8, r0
 8003b26:	461a      	mov	r2, r3
 8003b28:	f100 0114 	add.w	r1, r0, #20
 8003b2c:	4553      	cmp	r3, sl
 8003b2e:	db2b      	blt.n	8003b88 <__lshift+0x8c>
 8003b30:	6920      	ldr	r0, [r4, #16]
 8003b32:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003b36:	f104 0314 	add.w	r3, r4, #20
 8003b3a:	f016 021f 	ands.w	r2, r6, #31
 8003b3e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8003b42:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8003b46:	d025      	beq.n	8003b94 <__lshift+0x98>
 8003b48:	2000      	movs	r0, #0
 8003b4a:	f1c2 0e20 	rsb	lr, r2, #32
 8003b4e:	468a      	mov	sl, r1
 8003b50:	681e      	ldr	r6, [r3, #0]
 8003b52:	4096      	lsls	r6, r2
 8003b54:	4330      	orrs	r0, r6
 8003b56:	f84a 0b04 	str.w	r0, [sl], #4
 8003b5a:	f853 0b04 	ldr.w	r0, [r3], #4
 8003b5e:	459c      	cmp	ip, r3
 8003b60:	fa20 f00e 	lsr.w	r0, r0, lr
 8003b64:	d814      	bhi.n	8003b90 <__lshift+0x94>
 8003b66:	6048      	str	r0, [r1, #4]
 8003b68:	b108      	cbz	r0, 8003b6e <__lshift+0x72>
 8003b6a:	f109 0502 	add.w	r5, r9, #2
 8003b6e:	3d01      	subs	r5, #1
 8003b70:	4638      	mov	r0, r7
 8003b72:	f8c8 5010 	str.w	r5, [r8, #16]
 8003b76:	4621      	mov	r1, r4
 8003b78:	f7ff fe33 	bl	80037e2 <_Bfree>
 8003b7c:	4640      	mov	r0, r8
 8003b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b82:	3101      	adds	r1, #1
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	e7c7      	b.n	8003b18 <__lshift+0x1c>
 8003b88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003b8c:	3301      	adds	r3, #1
 8003b8e:	e7cd      	b.n	8003b2c <__lshift+0x30>
 8003b90:	4651      	mov	r1, sl
 8003b92:	e7dc      	b.n	8003b4e <__lshift+0x52>
 8003b94:	3904      	subs	r1, #4
 8003b96:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b9a:	459c      	cmp	ip, r3
 8003b9c:	f841 2f04 	str.w	r2, [r1, #4]!
 8003ba0:	d8f9      	bhi.n	8003b96 <__lshift+0x9a>
 8003ba2:	e7e4      	b.n	8003b6e <__lshift+0x72>

08003ba4 <__mcmp>:
 8003ba4:	6903      	ldr	r3, [r0, #16]
 8003ba6:	690a      	ldr	r2, [r1, #16]
 8003ba8:	b530      	push	{r4, r5, lr}
 8003baa:	1a9b      	subs	r3, r3, r2
 8003bac:	d10c      	bne.n	8003bc8 <__mcmp+0x24>
 8003bae:	0092      	lsls	r2, r2, #2
 8003bb0:	3014      	adds	r0, #20
 8003bb2:	3114      	adds	r1, #20
 8003bb4:	1884      	adds	r4, r0, r2
 8003bb6:	4411      	add	r1, r2
 8003bb8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8003bbc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003bc0:	4295      	cmp	r5, r2
 8003bc2:	d003      	beq.n	8003bcc <__mcmp+0x28>
 8003bc4:	d305      	bcc.n	8003bd2 <__mcmp+0x2e>
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	4618      	mov	r0, r3
 8003bca:	bd30      	pop	{r4, r5, pc}
 8003bcc:	42a0      	cmp	r0, r4
 8003bce:	d3f3      	bcc.n	8003bb8 <__mcmp+0x14>
 8003bd0:	e7fa      	b.n	8003bc8 <__mcmp+0x24>
 8003bd2:	f04f 33ff 	mov.w	r3, #4294967295
 8003bd6:	e7f7      	b.n	8003bc8 <__mcmp+0x24>

08003bd8 <__mdiff>:
 8003bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bdc:	460d      	mov	r5, r1
 8003bde:	4607      	mov	r7, r0
 8003be0:	4611      	mov	r1, r2
 8003be2:	4628      	mov	r0, r5
 8003be4:	4614      	mov	r4, r2
 8003be6:	f7ff ffdd 	bl	8003ba4 <__mcmp>
 8003bea:	1e06      	subs	r6, r0, #0
 8003bec:	d108      	bne.n	8003c00 <__mdiff+0x28>
 8003bee:	4631      	mov	r1, r6
 8003bf0:	4638      	mov	r0, r7
 8003bf2:	f7ff fdc2 	bl	800377a <_Balloc>
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8003bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c00:	bfa4      	itt	ge
 8003c02:	4623      	movge	r3, r4
 8003c04:	462c      	movge	r4, r5
 8003c06:	4638      	mov	r0, r7
 8003c08:	6861      	ldr	r1, [r4, #4]
 8003c0a:	bfa6      	itte	ge
 8003c0c:	461d      	movge	r5, r3
 8003c0e:	2600      	movge	r6, #0
 8003c10:	2601      	movlt	r6, #1
 8003c12:	f7ff fdb2 	bl	800377a <_Balloc>
 8003c16:	f04f 0e00 	mov.w	lr, #0
 8003c1a:	60c6      	str	r6, [r0, #12]
 8003c1c:	692b      	ldr	r3, [r5, #16]
 8003c1e:	6926      	ldr	r6, [r4, #16]
 8003c20:	f104 0214 	add.w	r2, r4, #20
 8003c24:	f105 0914 	add.w	r9, r5, #20
 8003c28:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8003c2c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8003c30:	f100 0114 	add.w	r1, r0, #20
 8003c34:	f852 ab04 	ldr.w	sl, [r2], #4
 8003c38:	f859 5b04 	ldr.w	r5, [r9], #4
 8003c3c:	fa1f f38a 	uxth.w	r3, sl
 8003c40:	4473      	add	r3, lr
 8003c42:	b2ac      	uxth	r4, r5
 8003c44:	1b1b      	subs	r3, r3, r4
 8003c46:	0c2c      	lsrs	r4, r5, #16
 8003c48:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8003c4c:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8003c56:	45c8      	cmp	r8, r9
 8003c58:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8003c5c:	4694      	mov	ip, r2
 8003c5e:	f841 4b04 	str.w	r4, [r1], #4
 8003c62:	d8e7      	bhi.n	8003c34 <__mdiff+0x5c>
 8003c64:	45bc      	cmp	ip, r7
 8003c66:	d304      	bcc.n	8003c72 <__mdiff+0x9a>
 8003c68:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8003c6c:	b183      	cbz	r3, 8003c90 <__mdiff+0xb8>
 8003c6e:	6106      	str	r6, [r0, #16]
 8003c70:	e7c4      	b.n	8003bfc <__mdiff+0x24>
 8003c72:	f85c 4b04 	ldr.w	r4, [ip], #4
 8003c76:	b2a2      	uxth	r2, r4
 8003c78:	4472      	add	r2, lr
 8003c7a:	1413      	asrs	r3, r2, #16
 8003c7c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8003c80:	b292      	uxth	r2, r2
 8003c82:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8003c86:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8003c8a:	f841 2b04 	str.w	r2, [r1], #4
 8003c8e:	e7e9      	b.n	8003c64 <__mdiff+0x8c>
 8003c90:	3e01      	subs	r6, #1
 8003c92:	e7e9      	b.n	8003c68 <__mdiff+0x90>

08003c94 <__d2b>:
 8003c94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003c98:	461c      	mov	r4, r3
 8003c9a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	4690      	mov	r8, r2
 8003ca2:	f7ff fd6a 	bl	800377a <_Balloc>
 8003ca6:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8003caa:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8003cae:	4607      	mov	r7, r0
 8003cb0:	bb34      	cbnz	r4, 8003d00 <__d2b+0x6c>
 8003cb2:	9201      	str	r2, [sp, #4]
 8003cb4:	f1b8 0200 	subs.w	r2, r8, #0
 8003cb8:	d027      	beq.n	8003d0a <__d2b+0x76>
 8003cba:	a802      	add	r0, sp, #8
 8003cbc:	f840 2d08 	str.w	r2, [r0, #-8]!
 8003cc0:	f7ff fe00 	bl	80038c4 <__lo0bits>
 8003cc4:	9900      	ldr	r1, [sp, #0]
 8003cc6:	b1f0      	cbz	r0, 8003d06 <__d2b+0x72>
 8003cc8:	9a01      	ldr	r2, [sp, #4]
 8003cca:	f1c0 0320 	rsb	r3, r0, #32
 8003cce:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd2:	430b      	orrs	r3, r1
 8003cd4:	40c2      	lsrs	r2, r0
 8003cd6:	617b      	str	r3, [r7, #20]
 8003cd8:	9201      	str	r2, [sp, #4]
 8003cda:	9b01      	ldr	r3, [sp, #4]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	bf14      	ite	ne
 8003ce0:	2102      	movne	r1, #2
 8003ce2:	2101      	moveq	r1, #1
 8003ce4:	61bb      	str	r3, [r7, #24]
 8003ce6:	6139      	str	r1, [r7, #16]
 8003ce8:	b1c4      	cbz	r4, 8003d1c <__d2b+0x88>
 8003cea:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8003cee:	4404      	add	r4, r0
 8003cf0:	6034      	str	r4, [r6, #0]
 8003cf2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8003cf6:	6028      	str	r0, [r5, #0]
 8003cf8:	4638      	mov	r0, r7
 8003cfa:	b002      	add	sp, #8
 8003cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d00:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003d04:	e7d5      	b.n	8003cb2 <__d2b+0x1e>
 8003d06:	6179      	str	r1, [r7, #20]
 8003d08:	e7e7      	b.n	8003cda <__d2b+0x46>
 8003d0a:	a801      	add	r0, sp, #4
 8003d0c:	f7ff fdda 	bl	80038c4 <__lo0bits>
 8003d10:	2101      	movs	r1, #1
 8003d12:	9b01      	ldr	r3, [sp, #4]
 8003d14:	6139      	str	r1, [r7, #16]
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	3020      	adds	r0, #32
 8003d1a:	e7e5      	b.n	8003ce8 <__d2b+0x54>
 8003d1c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8003d20:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8003d24:	6030      	str	r0, [r6, #0]
 8003d26:	6918      	ldr	r0, [r3, #16]
 8003d28:	f7ff fdad 	bl	8003886 <__hi0bits>
 8003d2c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8003d30:	e7e1      	b.n	8003cf6 <__d2b+0x62>

08003d32 <_calloc_r>:
 8003d32:	b538      	push	{r3, r4, r5, lr}
 8003d34:	fb02 f401 	mul.w	r4, r2, r1
 8003d38:	4621      	mov	r1, r4
 8003d3a:	f000 f855 	bl	8003de8 <_malloc_r>
 8003d3e:	4605      	mov	r5, r0
 8003d40:	b118      	cbz	r0, 8003d4a <_calloc_r+0x18>
 8003d42:	4622      	mov	r2, r4
 8003d44:	2100      	movs	r1, #0
 8003d46:	f7fe f96b 	bl	8002020 <memset>
 8003d4a:	4628      	mov	r0, r5
 8003d4c:	bd38      	pop	{r3, r4, r5, pc}
	...

08003d50 <_free_r>:
 8003d50:	b538      	push	{r3, r4, r5, lr}
 8003d52:	4605      	mov	r5, r0
 8003d54:	2900      	cmp	r1, #0
 8003d56:	d043      	beq.n	8003de0 <_free_r+0x90>
 8003d58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d5c:	1f0c      	subs	r4, r1, #4
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	bfb8      	it	lt
 8003d62:	18e4      	addlt	r4, r4, r3
 8003d64:	f000 fc46 	bl	80045f4 <__malloc_lock>
 8003d68:	4a1e      	ldr	r2, [pc, #120]	; (8003de4 <_free_r+0x94>)
 8003d6a:	6813      	ldr	r3, [r2, #0]
 8003d6c:	4610      	mov	r0, r2
 8003d6e:	b933      	cbnz	r3, 8003d7e <_free_r+0x2e>
 8003d70:	6063      	str	r3, [r4, #4]
 8003d72:	6014      	str	r4, [r2, #0]
 8003d74:	4628      	mov	r0, r5
 8003d76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d7a:	f000 bc3c 	b.w	80045f6 <__malloc_unlock>
 8003d7e:	42a3      	cmp	r3, r4
 8003d80:	d90b      	bls.n	8003d9a <_free_r+0x4a>
 8003d82:	6821      	ldr	r1, [r4, #0]
 8003d84:	1862      	adds	r2, r4, r1
 8003d86:	4293      	cmp	r3, r2
 8003d88:	bf01      	itttt	eq
 8003d8a:	681a      	ldreq	r2, [r3, #0]
 8003d8c:	685b      	ldreq	r3, [r3, #4]
 8003d8e:	1852      	addeq	r2, r2, r1
 8003d90:	6022      	streq	r2, [r4, #0]
 8003d92:	6063      	str	r3, [r4, #4]
 8003d94:	6004      	str	r4, [r0, #0]
 8003d96:	e7ed      	b.n	8003d74 <_free_r+0x24>
 8003d98:	4613      	mov	r3, r2
 8003d9a:	685a      	ldr	r2, [r3, #4]
 8003d9c:	b10a      	cbz	r2, 8003da2 <_free_r+0x52>
 8003d9e:	42a2      	cmp	r2, r4
 8003da0:	d9fa      	bls.n	8003d98 <_free_r+0x48>
 8003da2:	6819      	ldr	r1, [r3, #0]
 8003da4:	1858      	adds	r0, r3, r1
 8003da6:	42a0      	cmp	r0, r4
 8003da8:	d10b      	bne.n	8003dc2 <_free_r+0x72>
 8003daa:	6820      	ldr	r0, [r4, #0]
 8003dac:	4401      	add	r1, r0
 8003dae:	1858      	adds	r0, r3, r1
 8003db0:	4282      	cmp	r2, r0
 8003db2:	6019      	str	r1, [r3, #0]
 8003db4:	d1de      	bne.n	8003d74 <_free_r+0x24>
 8003db6:	6810      	ldr	r0, [r2, #0]
 8003db8:	6852      	ldr	r2, [r2, #4]
 8003dba:	4401      	add	r1, r0
 8003dbc:	6019      	str	r1, [r3, #0]
 8003dbe:	605a      	str	r2, [r3, #4]
 8003dc0:	e7d8      	b.n	8003d74 <_free_r+0x24>
 8003dc2:	d902      	bls.n	8003dca <_free_r+0x7a>
 8003dc4:	230c      	movs	r3, #12
 8003dc6:	602b      	str	r3, [r5, #0]
 8003dc8:	e7d4      	b.n	8003d74 <_free_r+0x24>
 8003dca:	6820      	ldr	r0, [r4, #0]
 8003dcc:	1821      	adds	r1, r4, r0
 8003dce:	428a      	cmp	r2, r1
 8003dd0:	bf01      	itttt	eq
 8003dd2:	6811      	ldreq	r1, [r2, #0]
 8003dd4:	6852      	ldreq	r2, [r2, #4]
 8003dd6:	1809      	addeq	r1, r1, r0
 8003dd8:	6021      	streq	r1, [r4, #0]
 8003dda:	6062      	str	r2, [r4, #4]
 8003ddc:	605c      	str	r4, [r3, #4]
 8003dde:	e7c9      	b.n	8003d74 <_free_r+0x24>
 8003de0:	bd38      	pop	{r3, r4, r5, pc}
 8003de2:	bf00      	nop
 8003de4:	200001fc 	.word	0x200001fc

08003de8 <_malloc_r>:
 8003de8:	b570      	push	{r4, r5, r6, lr}
 8003dea:	1ccd      	adds	r5, r1, #3
 8003dec:	f025 0503 	bic.w	r5, r5, #3
 8003df0:	3508      	adds	r5, #8
 8003df2:	2d0c      	cmp	r5, #12
 8003df4:	bf38      	it	cc
 8003df6:	250c      	movcc	r5, #12
 8003df8:	2d00      	cmp	r5, #0
 8003dfa:	4606      	mov	r6, r0
 8003dfc:	db01      	blt.n	8003e02 <_malloc_r+0x1a>
 8003dfe:	42a9      	cmp	r1, r5
 8003e00:	d903      	bls.n	8003e0a <_malloc_r+0x22>
 8003e02:	230c      	movs	r3, #12
 8003e04:	6033      	str	r3, [r6, #0]
 8003e06:	2000      	movs	r0, #0
 8003e08:	bd70      	pop	{r4, r5, r6, pc}
 8003e0a:	f000 fbf3 	bl	80045f4 <__malloc_lock>
 8003e0e:	4a21      	ldr	r2, [pc, #132]	; (8003e94 <_malloc_r+0xac>)
 8003e10:	6814      	ldr	r4, [r2, #0]
 8003e12:	4621      	mov	r1, r4
 8003e14:	b991      	cbnz	r1, 8003e3c <_malloc_r+0x54>
 8003e16:	4c20      	ldr	r4, [pc, #128]	; (8003e98 <_malloc_r+0xb0>)
 8003e18:	6823      	ldr	r3, [r4, #0]
 8003e1a:	b91b      	cbnz	r3, 8003e24 <_malloc_r+0x3c>
 8003e1c:	4630      	mov	r0, r6
 8003e1e:	f000 f97b 	bl	8004118 <_sbrk_r>
 8003e22:	6020      	str	r0, [r4, #0]
 8003e24:	4629      	mov	r1, r5
 8003e26:	4630      	mov	r0, r6
 8003e28:	f000 f976 	bl	8004118 <_sbrk_r>
 8003e2c:	1c43      	adds	r3, r0, #1
 8003e2e:	d124      	bne.n	8003e7a <_malloc_r+0x92>
 8003e30:	230c      	movs	r3, #12
 8003e32:	4630      	mov	r0, r6
 8003e34:	6033      	str	r3, [r6, #0]
 8003e36:	f000 fbde 	bl	80045f6 <__malloc_unlock>
 8003e3a:	e7e4      	b.n	8003e06 <_malloc_r+0x1e>
 8003e3c:	680b      	ldr	r3, [r1, #0]
 8003e3e:	1b5b      	subs	r3, r3, r5
 8003e40:	d418      	bmi.n	8003e74 <_malloc_r+0x8c>
 8003e42:	2b0b      	cmp	r3, #11
 8003e44:	d90f      	bls.n	8003e66 <_malloc_r+0x7e>
 8003e46:	600b      	str	r3, [r1, #0]
 8003e48:	18cc      	adds	r4, r1, r3
 8003e4a:	50cd      	str	r5, [r1, r3]
 8003e4c:	4630      	mov	r0, r6
 8003e4e:	f000 fbd2 	bl	80045f6 <__malloc_unlock>
 8003e52:	f104 000b 	add.w	r0, r4, #11
 8003e56:	1d23      	adds	r3, r4, #4
 8003e58:	f020 0007 	bic.w	r0, r0, #7
 8003e5c:	1ac3      	subs	r3, r0, r3
 8003e5e:	d0d3      	beq.n	8003e08 <_malloc_r+0x20>
 8003e60:	425a      	negs	r2, r3
 8003e62:	50e2      	str	r2, [r4, r3]
 8003e64:	e7d0      	b.n	8003e08 <_malloc_r+0x20>
 8003e66:	684b      	ldr	r3, [r1, #4]
 8003e68:	428c      	cmp	r4, r1
 8003e6a:	bf16      	itet	ne
 8003e6c:	6063      	strne	r3, [r4, #4]
 8003e6e:	6013      	streq	r3, [r2, #0]
 8003e70:	460c      	movne	r4, r1
 8003e72:	e7eb      	b.n	8003e4c <_malloc_r+0x64>
 8003e74:	460c      	mov	r4, r1
 8003e76:	6849      	ldr	r1, [r1, #4]
 8003e78:	e7cc      	b.n	8003e14 <_malloc_r+0x2c>
 8003e7a:	1cc4      	adds	r4, r0, #3
 8003e7c:	f024 0403 	bic.w	r4, r4, #3
 8003e80:	42a0      	cmp	r0, r4
 8003e82:	d005      	beq.n	8003e90 <_malloc_r+0xa8>
 8003e84:	1a21      	subs	r1, r4, r0
 8003e86:	4630      	mov	r0, r6
 8003e88:	f000 f946 	bl	8004118 <_sbrk_r>
 8003e8c:	3001      	adds	r0, #1
 8003e8e:	d0cf      	beq.n	8003e30 <_malloc_r+0x48>
 8003e90:	6025      	str	r5, [r4, #0]
 8003e92:	e7db      	b.n	8003e4c <_malloc_r+0x64>
 8003e94:	200001fc 	.word	0x200001fc
 8003e98:	20000200 	.word	0x20000200

08003e9c <__sfputc_r>:
 8003e9c:	6893      	ldr	r3, [r2, #8]
 8003e9e:	b410      	push	{r4}
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	6093      	str	r3, [r2, #8]
 8003ea6:	da07      	bge.n	8003eb8 <__sfputc_r+0x1c>
 8003ea8:	6994      	ldr	r4, [r2, #24]
 8003eaa:	42a3      	cmp	r3, r4
 8003eac:	db01      	blt.n	8003eb2 <__sfputc_r+0x16>
 8003eae:	290a      	cmp	r1, #10
 8003eb0:	d102      	bne.n	8003eb8 <__sfputc_r+0x1c>
 8003eb2:	bc10      	pop	{r4}
 8003eb4:	f000 b984 	b.w	80041c0 <__swbuf_r>
 8003eb8:	6813      	ldr	r3, [r2, #0]
 8003eba:	1c58      	adds	r0, r3, #1
 8003ebc:	6010      	str	r0, [r2, #0]
 8003ebe:	7019      	strb	r1, [r3, #0]
 8003ec0:	4608      	mov	r0, r1
 8003ec2:	bc10      	pop	{r4}
 8003ec4:	4770      	bx	lr

08003ec6 <__sfputs_r>:
 8003ec6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ec8:	4606      	mov	r6, r0
 8003eca:	460f      	mov	r7, r1
 8003ecc:	4614      	mov	r4, r2
 8003ece:	18d5      	adds	r5, r2, r3
 8003ed0:	42ac      	cmp	r4, r5
 8003ed2:	d101      	bne.n	8003ed8 <__sfputs_r+0x12>
 8003ed4:	2000      	movs	r0, #0
 8003ed6:	e007      	b.n	8003ee8 <__sfputs_r+0x22>
 8003ed8:	463a      	mov	r2, r7
 8003eda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ede:	4630      	mov	r0, r6
 8003ee0:	f7ff ffdc 	bl	8003e9c <__sfputc_r>
 8003ee4:	1c43      	adds	r3, r0, #1
 8003ee6:	d1f3      	bne.n	8003ed0 <__sfputs_r+0xa>
 8003ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003eec <_vfiprintf_r>:
 8003eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ef0:	460c      	mov	r4, r1
 8003ef2:	b09d      	sub	sp, #116	; 0x74
 8003ef4:	4617      	mov	r7, r2
 8003ef6:	461d      	mov	r5, r3
 8003ef8:	4606      	mov	r6, r0
 8003efa:	b118      	cbz	r0, 8003f04 <_vfiprintf_r+0x18>
 8003efc:	6983      	ldr	r3, [r0, #24]
 8003efe:	b90b      	cbnz	r3, 8003f04 <_vfiprintf_r+0x18>
 8003f00:	f7ff fb82 	bl	8003608 <__sinit>
 8003f04:	4b7c      	ldr	r3, [pc, #496]	; (80040f8 <_vfiprintf_r+0x20c>)
 8003f06:	429c      	cmp	r4, r3
 8003f08:	d158      	bne.n	8003fbc <_vfiprintf_r+0xd0>
 8003f0a:	6874      	ldr	r4, [r6, #4]
 8003f0c:	89a3      	ldrh	r3, [r4, #12]
 8003f0e:	0718      	lsls	r0, r3, #28
 8003f10:	d55e      	bpl.n	8003fd0 <_vfiprintf_r+0xe4>
 8003f12:	6923      	ldr	r3, [r4, #16]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d05b      	beq.n	8003fd0 <_vfiprintf_r+0xe4>
 8003f18:	2300      	movs	r3, #0
 8003f1a:	9309      	str	r3, [sp, #36]	; 0x24
 8003f1c:	2320      	movs	r3, #32
 8003f1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f22:	2330      	movs	r3, #48	; 0x30
 8003f24:	f04f 0b01 	mov.w	fp, #1
 8003f28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f2c:	9503      	str	r5, [sp, #12]
 8003f2e:	46b8      	mov	r8, r7
 8003f30:	4645      	mov	r5, r8
 8003f32:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003f36:	b10b      	cbz	r3, 8003f3c <_vfiprintf_r+0x50>
 8003f38:	2b25      	cmp	r3, #37	; 0x25
 8003f3a:	d154      	bne.n	8003fe6 <_vfiprintf_r+0xfa>
 8003f3c:	ebb8 0a07 	subs.w	sl, r8, r7
 8003f40:	d00b      	beq.n	8003f5a <_vfiprintf_r+0x6e>
 8003f42:	4653      	mov	r3, sl
 8003f44:	463a      	mov	r2, r7
 8003f46:	4621      	mov	r1, r4
 8003f48:	4630      	mov	r0, r6
 8003f4a:	f7ff ffbc 	bl	8003ec6 <__sfputs_r>
 8003f4e:	3001      	adds	r0, #1
 8003f50:	f000 80c2 	beq.w	80040d8 <_vfiprintf_r+0x1ec>
 8003f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f56:	4453      	add	r3, sl
 8003f58:	9309      	str	r3, [sp, #36]	; 0x24
 8003f5a:	f898 3000 	ldrb.w	r3, [r8]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 80ba 	beq.w	80040d8 <_vfiprintf_r+0x1ec>
 8003f64:	2300      	movs	r3, #0
 8003f66:	f04f 32ff 	mov.w	r2, #4294967295
 8003f6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f6e:	9304      	str	r3, [sp, #16]
 8003f70:	9307      	str	r3, [sp, #28]
 8003f72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f76:	931a      	str	r3, [sp, #104]	; 0x68
 8003f78:	46a8      	mov	r8, r5
 8003f7a:	2205      	movs	r2, #5
 8003f7c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003f80:	485e      	ldr	r0, [pc, #376]	; (80040fc <_vfiprintf_r+0x210>)
 8003f82:	f7ff fbe1 	bl	8003748 <memchr>
 8003f86:	9b04      	ldr	r3, [sp, #16]
 8003f88:	bb78      	cbnz	r0, 8003fea <_vfiprintf_r+0xfe>
 8003f8a:	06d9      	lsls	r1, r3, #27
 8003f8c:	bf44      	itt	mi
 8003f8e:	2220      	movmi	r2, #32
 8003f90:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003f94:	071a      	lsls	r2, r3, #28
 8003f96:	bf44      	itt	mi
 8003f98:	222b      	movmi	r2, #43	; 0x2b
 8003f9a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003f9e:	782a      	ldrb	r2, [r5, #0]
 8003fa0:	2a2a      	cmp	r2, #42	; 0x2a
 8003fa2:	d02a      	beq.n	8003ffa <_vfiprintf_r+0x10e>
 8003fa4:	46a8      	mov	r8, r5
 8003fa6:	2000      	movs	r0, #0
 8003fa8:	250a      	movs	r5, #10
 8003faa:	9a07      	ldr	r2, [sp, #28]
 8003fac:	4641      	mov	r1, r8
 8003fae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fb2:	3b30      	subs	r3, #48	; 0x30
 8003fb4:	2b09      	cmp	r3, #9
 8003fb6:	d969      	bls.n	800408c <_vfiprintf_r+0x1a0>
 8003fb8:	b360      	cbz	r0, 8004014 <_vfiprintf_r+0x128>
 8003fba:	e024      	b.n	8004006 <_vfiprintf_r+0x11a>
 8003fbc:	4b50      	ldr	r3, [pc, #320]	; (8004100 <_vfiprintf_r+0x214>)
 8003fbe:	429c      	cmp	r4, r3
 8003fc0:	d101      	bne.n	8003fc6 <_vfiprintf_r+0xda>
 8003fc2:	68b4      	ldr	r4, [r6, #8]
 8003fc4:	e7a2      	b.n	8003f0c <_vfiprintf_r+0x20>
 8003fc6:	4b4f      	ldr	r3, [pc, #316]	; (8004104 <_vfiprintf_r+0x218>)
 8003fc8:	429c      	cmp	r4, r3
 8003fca:	bf08      	it	eq
 8003fcc:	68f4      	ldreq	r4, [r6, #12]
 8003fce:	e79d      	b.n	8003f0c <_vfiprintf_r+0x20>
 8003fd0:	4621      	mov	r1, r4
 8003fd2:	4630      	mov	r0, r6
 8003fd4:	f000 f958 	bl	8004288 <__swsetup_r>
 8003fd8:	2800      	cmp	r0, #0
 8003fda:	d09d      	beq.n	8003f18 <_vfiprintf_r+0x2c>
 8003fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003fe0:	b01d      	add	sp, #116	; 0x74
 8003fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fe6:	46a8      	mov	r8, r5
 8003fe8:	e7a2      	b.n	8003f30 <_vfiprintf_r+0x44>
 8003fea:	4a44      	ldr	r2, [pc, #272]	; (80040fc <_vfiprintf_r+0x210>)
 8003fec:	4645      	mov	r5, r8
 8003fee:	1a80      	subs	r0, r0, r2
 8003ff0:	fa0b f000 	lsl.w	r0, fp, r0
 8003ff4:	4318      	orrs	r0, r3
 8003ff6:	9004      	str	r0, [sp, #16]
 8003ff8:	e7be      	b.n	8003f78 <_vfiprintf_r+0x8c>
 8003ffa:	9a03      	ldr	r2, [sp, #12]
 8003ffc:	1d11      	adds	r1, r2, #4
 8003ffe:	6812      	ldr	r2, [r2, #0]
 8004000:	9103      	str	r1, [sp, #12]
 8004002:	2a00      	cmp	r2, #0
 8004004:	db01      	blt.n	800400a <_vfiprintf_r+0x11e>
 8004006:	9207      	str	r2, [sp, #28]
 8004008:	e004      	b.n	8004014 <_vfiprintf_r+0x128>
 800400a:	4252      	negs	r2, r2
 800400c:	f043 0302 	orr.w	r3, r3, #2
 8004010:	9207      	str	r2, [sp, #28]
 8004012:	9304      	str	r3, [sp, #16]
 8004014:	f898 3000 	ldrb.w	r3, [r8]
 8004018:	2b2e      	cmp	r3, #46	; 0x2e
 800401a:	d10e      	bne.n	800403a <_vfiprintf_r+0x14e>
 800401c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004020:	2b2a      	cmp	r3, #42	; 0x2a
 8004022:	d138      	bne.n	8004096 <_vfiprintf_r+0x1aa>
 8004024:	9b03      	ldr	r3, [sp, #12]
 8004026:	f108 0802 	add.w	r8, r8, #2
 800402a:	1d1a      	adds	r2, r3, #4
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	9203      	str	r2, [sp, #12]
 8004030:	2b00      	cmp	r3, #0
 8004032:	bfb8      	it	lt
 8004034:	f04f 33ff 	movlt.w	r3, #4294967295
 8004038:	9305      	str	r3, [sp, #20]
 800403a:	4d33      	ldr	r5, [pc, #204]	; (8004108 <_vfiprintf_r+0x21c>)
 800403c:	2203      	movs	r2, #3
 800403e:	f898 1000 	ldrb.w	r1, [r8]
 8004042:	4628      	mov	r0, r5
 8004044:	f7ff fb80 	bl	8003748 <memchr>
 8004048:	b140      	cbz	r0, 800405c <_vfiprintf_r+0x170>
 800404a:	2340      	movs	r3, #64	; 0x40
 800404c:	1b40      	subs	r0, r0, r5
 800404e:	fa03 f000 	lsl.w	r0, r3, r0
 8004052:	9b04      	ldr	r3, [sp, #16]
 8004054:	f108 0801 	add.w	r8, r8, #1
 8004058:	4303      	orrs	r3, r0
 800405a:	9304      	str	r3, [sp, #16]
 800405c:	f898 1000 	ldrb.w	r1, [r8]
 8004060:	2206      	movs	r2, #6
 8004062:	482a      	ldr	r0, [pc, #168]	; (800410c <_vfiprintf_r+0x220>)
 8004064:	f108 0701 	add.w	r7, r8, #1
 8004068:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800406c:	f7ff fb6c 	bl	8003748 <memchr>
 8004070:	2800      	cmp	r0, #0
 8004072:	d037      	beq.n	80040e4 <_vfiprintf_r+0x1f8>
 8004074:	4b26      	ldr	r3, [pc, #152]	; (8004110 <_vfiprintf_r+0x224>)
 8004076:	bb1b      	cbnz	r3, 80040c0 <_vfiprintf_r+0x1d4>
 8004078:	9b03      	ldr	r3, [sp, #12]
 800407a:	3307      	adds	r3, #7
 800407c:	f023 0307 	bic.w	r3, r3, #7
 8004080:	3308      	adds	r3, #8
 8004082:	9303      	str	r3, [sp, #12]
 8004084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004086:	444b      	add	r3, r9
 8004088:	9309      	str	r3, [sp, #36]	; 0x24
 800408a:	e750      	b.n	8003f2e <_vfiprintf_r+0x42>
 800408c:	fb05 3202 	mla	r2, r5, r2, r3
 8004090:	2001      	movs	r0, #1
 8004092:	4688      	mov	r8, r1
 8004094:	e78a      	b.n	8003fac <_vfiprintf_r+0xc0>
 8004096:	2300      	movs	r3, #0
 8004098:	250a      	movs	r5, #10
 800409a:	4619      	mov	r1, r3
 800409c:	f108 0801 	add.w	r8, r8, #1
 80040a0:	9305      	str	r3, [sp, #20]
 80040a2:	4640      	mov	r0, r8
 80040a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80040a8:	3a30      	subs	r2, #48	; 0x30
 80040aa:	2a09      	cmp	r2, #9
 80040ac:	d903      	bls.n	80040b6 <_vfiprintf_r+0x1ca>
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d0c3      	beq.n	800403a <_vfiprintf_r+0x14e>
 80040b2:	9105      	str	r1, [sp, #20]
 80040b4:	e7c1      	b.n	800403a <_vfiprintf_r+0x14e>
 80040b6:	fb05 2101 	mla	r1, r5, r1, r2
 80040ba:	2301      	movs	r3, #1
 80040bc:	4680      	mov	r8, r0
 80040be:	e7f0      	b.n	80040a2 <_vfiprintf_r+0x1b6>
 80040c0:	ab03      	add	r3, sp, #12
 80040c2:	9300      	str	r3, [sp, #0]
 80040c4:	4622      	mov	r2, r4
 80040c6:	4b13      	ldr	r3, [pc, #76]	; (8004114 <_vfiprintf_r+0x228>)
 80040c8:	a904      	add	r1, sp, #16
 80040ca:	4630      	mov	r0, r6
 80040cc:	f7fe f842 	bl	8002154 <_printf_float>
 80040d0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80040d4:	4681      	mov	r9, r0
 80040d6:	d1d5      	bne.n	8004084 <_vfiprintf_r+0x198>
 80040d8:	89a3      	ldrh	r3, [r4, #12]
 80040da:	065b      	lsls	r3, r3, #25
 80040dc:	f53f af7e 	bmi.w	8003fdc <_vfiprintf_r+0xf0>
 80040e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80040e2:	e77d      	b.n	8003fe0 <_vfiprintf_r+0xf4>
 80040e4:	ab03      	add	r3, sp, #12
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	4622      	mov	r2, r4
 80040ea:	4b0a      	ldr	r3, [pc, #40]	; (8004114 <_vfiprintf_r+0x228>)
 80040ec:	a904      	add	r1, sp, #16
 80040ee:	4630      	mov	r0, r6
 80040f0:	f7fe fadc 	bl	80026ac <_printf_i>
 80040f4:	e7ec      	b.n	80040d0 <_vfiprintf_r+0x1e4>
 80040f6:	bf00      	nop
 80040f8:	0800475c 	.word	0x0800475c
 80040fc:	0800489c 	.word	0x0800489c
 8004100:	0800477c 	.word	0x0800477c
 8004104:	0800473c 	.word	0x0800473c
 8004108:	080048a2 	.word	0x080048a2
 800410c:	080048a6 	.word	0x080048a6
 8004110:	08002155 	.word	0x08002155
 8004114:	08003ec7 	.word	0x08003ec7

08004118 <_sbrk_r>:
 8004118:	b538      	push	{r3, r4, r5, lr}
 800411a:	2300      	movs	r3, #0
 800411c:	4c05      	ldr	r4, [pc, #20]	; (8004134 <_sbrk_r+0x1c>)
 800411e:	4605      	mov	r5, r0
 8004120:	4608      	mov	r0, r1
 8004122:	6023      	str	r3, [r4, #0]
 8004124:	f7fc fe62 	bl	8000dec <_sbrk>
 8004128:	1c43      	adds	r3, r0, #1
 800412a:	d102      	bne.n	8004132 <_sbrk_r+0x1a>
 800412c:	6823      	ldr	r3, [r4, #0]
 800412e:	b103      	cbz	r3, 8004132 <_sbrk_r+0x1a>
 8004130:	602b      	str	r3, [r5, #0]
 8004132:	bd38      	pop	{r3, r4, r5, pc}
 8004134:	2000024c 	.word	0x2000024c

08004138 <__sread>:
 8004138:	b510      	push	{r4, lr}
 800413a:	460c      	mov	r4, r1
 800413c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004140:	f000 fa5a 	bl	80045f8 <_read_r>
 8004144:	2800      	cmp	r0, #0
 8004146:	bfab      	itete	ge
 8004148:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800414a:	89a3      	ldrhlt	r3, [r4, #12]
 800414c:	181b      	addge	r3, r3, r0
 800414e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004152:	bfac      	ite	ge
 8004154:	6563      	strge	r3, [r4, #84]	; 0x54
 8004156:	81a3      	strhlt	r3, [r4, #12]
 8004158:	bd10      	pop	{r4, pc}

0800415a <__swrite>:
 800415a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800415e:	461f      	mov	r7, r3
 8004160:	898b      	ldrh	r3, [r1, #12]
 8004162:	4605      	mov	r5, r0
 8004164:	05db      	lsls	r3, r3, #23
 8004166:	460c      	mov	r4, r1
 8004168:	4616      	mov	r6, r2
 800416a:	d505      	bpl.n	8004178 <__swrite+0x1e>
 800416c:	2302      	movs	r3, #2
 800416e:	2200      	movs	r2, #0
 8004170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004174:	f000 f9b6 	bl	80044e4 <_lseek_r>
 8004178:	89a3      	ldrh	r3, [r4, #12]
 800417a:	4632      	mov	r2, r6
 800417c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004180:	81a3      	strh	r3, [r4, #12]
 8004182:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004186:	463b      	mov	r3, r7
 8004188:	4628      	mov	r0, r5
 800418a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800418e:	f000 b869 	b.w	8004264 <_write_r>

08004192 <__sseek>:
 8004192:	b510      	push	{r4, lr}
 8004194:	460c      	mov	r4, r1
 8004196:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800419a:	f000 f9a3 	bl	80044e4 <_lseek_r>
 800419e:	1c43      	adds	r3, r0, #1
 80041a0:	89a3      	ldrh	r3, [r4, #12]
 80041a2:	bf15      	itete	ne
 80041a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80041a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80041aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80041ae:	81a3      	strheq	r3, [r4, #12]
 80041b0:	bf18      	it	ne
 80041b2:	81a3      	strhne	r3, [r4, #12]
 80041b4:	bd10      	pop	{r4, pc}

080041b6 <__sclose>:
 80041b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041ba:	f000 b8d3 	b.w	8004364 <_close_r>
	...

080041c0 <__swbuf_r>:
 80041c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c2:	460e      	mov	r6, r1
 80041c4:	4614      	mov	r4, r2
 80041c6:	4605      	mov	r5, r0
 80041c8:	b118      	cbz	r0, 80041d2 <__swbuf_r+0x12>
 80041ca:	6983      	ldr	r3, [r0, #24]
 80041cc:	b90b      	cbnz	r3, 80041d2 <__swbuf_r+0x12>
 80041ce:	f7ff fa1b 	bl	8003608 <__sinit>
 80041d2:	4b21      	ldr	r3, [pc, #132]	; (8004258 <__swbuf_r+0x98>)
 80041d4:	429c      	cmp	r4, r3
 80041d6:	d12a      	bne.n	800422e <__swbuf_r+0x6e>
 80041d8:	686c      	ldr	r4, [r5, #4]
 80041da:	69a3      	ldr	r3, [r4, #24]
 80041dc:	60a3      	str	r3, [r4, #8]
 80041de:	89a3      	ldrh	r3, [r4, #12]
 80041e0:	071a      	lsls	r2, r3, #28
 80041e2:	d52e      	bpl.n	8004242 <__swbuf_r+0x82>
 80041e4:	6923      	ldr	r3, [r4, #16]
 80041e6:	b363      	cbz	r3, 8004242 <__swbuf_r+0x82>
 80041e8:	6923      	ldr	r3, [r4, #16]
 80041ea:	6820      	ldr	r0, [r4, #0]
 80041ec:	b2f6      	uxtb	r6, r6
 80041ee:	1ac0      	subs	r0, r0, r3
 80041f0:	6963      	ldr	r3, [r4, #20]
 80041f2:	4637      	mov	r7, r6
 80041f4:	4283      	cmp	r3, r0
 80041f6:	dc04      	bgt.n	8004202 <__swbuf_r+0x42>
 80041f8:	4621      	mov	r1, r4
 80041fa:	4628      	mov	r0, r5
 80041fc:	f000 f948 	bl	8004490 <_fflush_r>
 8004200:	bb28      	cbnz	r0, 800424e <__swbuf_r+0x8e>
 8004202:	68a3      	ldr	r3, [r4, #8]
 8004204:	3001      	adds	r0, #1
 8004206:	3b01      	subs	r3, #1
 8004208:	60a3      	str	r3, [r4, #8]
 800420a:	6823      	ldr	r3, [r4, #0]
 800420c:	1c5a      	adds	r2, r3, #1
 800420e:	6022      	str	r2, [r4, #0]
 8004210:	701e      	strb	r6, [r3, #0]
 8004212:	6963      	ldr	r3, [r4, #20]
 8004214:	4283      	cmp	r3, r0
 8004216:	d004      	beq.n	8004222 <__swbuf_r+0x62>
 8004218:	89a3      	ldrh	r3, [r4, #12]
 800421a:	07db      	lsls	r3, r3, #31
 800421c:	d519      	bpl.n	8004252 <__swbuf_r+0x92>
 800421e:	2e0a      	cmp	r6, #10
 8004220:	d117      	bne.n	8004252 <__swbuf_r+0x92>
 8004222:	4621      	mov	r1, r4
 8004224:	4628      	mov	r0, r5
 8004226:	f000 f933 	bl	8004490 <_fflush_r>
 800422a:	b190      	cbz	r0, 8004252 <__swbuf_r+0x92>
 800422c:	e00f      	b.n	800424e <__swbuf_r+0x8e>
 800422e:	4b0b      	ldr	r3, [pc, #44]	; (800425c <__swbuf_r+0x9c>)
 8004230:	429c      	cmp	r4, r3
 8004232:	d101      	bne.n	8004238 <__swbuf_r+0x78>
 8004234:	68ac      	ldr	r4, [r5, #8]
 8004236:	e7d0      	b.n	80041da <__swbuf_r+0x1a>
 8004238:	4b09      	ldr	r3, [pc, #36]	; (8004260 <__swbuf_r+0xa0>)
 800423a:	429c      	cmp	r4, r3
 800423c:	bf08      	it	eq
 800423e:	68ec      	ldreq	r4, [r5, #12]
 8004240:	e7cb      	b.n	80041da <__swbuf_r+0x1a>
 8004242:	4621      	mov	r1, r4
 8004244:	4628      	mov	r0, r5
 8004246:	f000 f81f 	bl	8004288 <__swsetup_r>
 800424a:	2800      	cmp	r0, #0
 800424c:	d0cc      	beq.n	80041e8 <__swbuf_r+0x28>
 800424e:	f04f 37ff 	mov.w	r7, #4294967295
 8004252:	4638      	mov	r0, r7
 8004254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004256:	bf00      	nop
 8004258:	0800475c 	.word	0x0800475c
 800425c:	0800477c 	.word	0x0800477c
 8004260:	0800473c 	.word	0x0800473c

08004264 <_write_r>:
 8004264:	b538      	push	{r3, r4, r5, lr}
 8004266:	4605      	mov	r5, r0
 8004268:	4608      	mov	r0, r1
 800426a:	4611      	mov	r1, r2
 800426c:	2200      	movs	r2, #0
 800426e:	4c05      	ldr	r4, [pc, #20]	; (8004284 <_write_r+0x20>)
 8004270:	6022      	str	r2, [r4, #0]
 8004272:	461a      	mov	r2, r3
 8004274:	f7fc fc08 	bl	8000a88 <_write>
 8004278:	1c43      	adds	r3, r0, #1
 800427a:	d102      	bne.n	8004282 <_write_r+0x1e>
 800427c:	6823      	ldr	r3, [r4, #0]
 800427e:	b103      	cbz	r3, 8004282 <_write_r+0x1e>
 8004280:	602b      	str	r3, [r5, #0]
 8004282:	bd38      	pop	{r3, r4, r5, pc}
 8004284:	2000024c 	.word	0x2000024c

08004288 <__swsetup_r>:
 8004288:	4b32      	ldr	r3, [pc, #200]	; (8004354 <__swsetup_r+0xcc>)
 800428a:	b570      	push	{r4, r5, r6, lr}
 800428c:	681d      	ldr	r5, [r3, #0]
 800428e:	4606      	mov	r6, r0
 8004290:	460c      	mov	r4, r1
 8004292:	b125      	cbz	r5, 800429e <__swsetup_r+0x16>
 8004294:	69ab      	ldr	r3, [r5, #24]
 8004296:	b913      	cbnz	r3, 800429e <__swsetup_r+0x16>
 8004298:	4628      	mov	r0, r5
 800429a:	f7ff f9b5 	bl	8003608 <__sinit>
 800429e:	4b2e      	ldr	r3, [pc, #184]	; (8004358 <__swsetup_r+0xd0>)
 80042a0:	429c      	cmp	r4, r3
 80042a2:	d10f      	bne.n	80042c4 <__swsetup_r+0x3c>
 80042a4:	686c      	ldr	r4, [r5, #4]
 80042a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	0715      	lsls	r5, r2, #28
 80042ae:	d42c      	bmi.n	800430a <__swsetup_r+0x82>
 80042b0:	06d0      	lsls	r0, r2, #27
 80042b2:	d411      	bmi.n	80042d8 <__swsetup_r+0x50>
 80042b4:	2209      	movs	r2, #9
 80042b6:	6032      	str	r2, [r6, #0]
 80042b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042bc:	81a3      	strh	r3, [r4, #12]
 80042be:	f04f 30ff 	mov.w	r0, #4294967295
 80042c2:	e03e      	b.n	8004342 <__swsetup_r+0xba>
 80042c4:	4b25      	ldr	r3, [pc, #148]	; (800435c <__swsetup_r+0xd4>)
 80042c6:	429c      	cmp	r4, r3
 80042c8:	d101      	bne.n	80042ce <__swsetup_r+0x46>
 80042ca:	68ac      	ldr	r4, [r5, #8]
 80042cc:	e7eb      	b.n	80042a6 <__swsetup_r+0x1e>
 80042ce:	4b24      	ldr	r3, [pc, #144]	; (8004360 <__swsetup_r+0xd8>)
 80042d0:	429c      	cmp	r4, r3
 80042d2:	bf08      	it	eq
 80042d4:	68ec      	ldreq	r4, [r5, #12]
 80042d6:	e7e6      	b.n	80042a6 <__swsetup_r+0x1e>
 80042d8:	0751      	lsls	r1, r2, #29
 80042da:	d512      	bpl.n	8004302 <__swsetup_r+0x7a>
 80042dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042de:	b141      	cbz	r1, 80042f2 <__swsetup_r+0x6a>
 80042e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80042e4:	4299      	cmp	r1, r3
 80042e6:	d002      	beq.n	80042ee <__swsetup_r+0x66>
 80042e8:	4630      	mov	r0, r6
 80042ea:	f7ff fd31 	bl	8003d50 <_free_r>
 80042ee:	2300      	movs	r3, #0
 80042f0:	6363      	str	r3, [r4, #52]	; 0x34
 80042f2:	89a3      	ldrh	r3, [r4, #12]
 80042f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80042f8:	81a3      	strh	r3, [r4, #12]
 80042fa:	2300      	movs	r3, #0
 80042fc:	6063      	str	r3, [r4, #4]
 80042fe:	6923      	ldr	r3, [r4, #16]
 8004300:	6023      	str	r3, [r4, #0]
 8004302:	89a3      	ldrh	r3, [r4, #12]
 8004304:	f043 0308 	orr.w	r3, r3, #8
 8004308:	81a3      	strh	r3, [r4, #12]
 800430a:	6923      	ldr	r3, [r4, #16]
 800430c:	b94b      	cbnz	r3, 8004322 <__swsetup_r+0x9a>
 800430e:	89a3      	ldrh	r3, [r4, #12]
 8004310:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004314:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004318:	d003      	beq.n	8004322 <__swsetup_r+0x9a>
 800431a:	4621      	mov	r1, r4
 800431c:	4630      	mov	r0, r6
 800431e:	f000 f917 	bl	8004550 <__smakebuf_r>
 8004322:	89a2      	ldrh	r2, [r4, #12]
 8004324:	f012 0301 	ands.w	r3, r2, #1
 8004328:	d00c      	beq.n	8004344 <__swsetup_r+0xbc>
 800432a:	2300      	movs	r3, #0
 800432c:	60a3      	str	r3, [r4, #8]
 800432e:	6963      	ldr	r3, [r4, #20]
 8004330:	425b      	negs	r3, r3
 8004332:	61a3      	str	r3, [r4, #24]
 8004334:	6923      	ldr	r3, [r4, #16]
 8004336:	b953      	cbnz	r3, 800434e <__swsetup_r+0xc6>
 8004338:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800433c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004340:	d1ba      	bne.n	80042b8 <__swsetup_r+0x30>
 8004342:	bd70      	pop	{r4, r5, r6, pc}
 8004344:	0792      	lsls	r2, r2, #30
 8004346:	bf58      	it	pl
 8004348:	6963      	ldrpl	r3, [r4, #20]
 800434a:	60a3      	str	r3, [r4, #8]
 800434c:	e7f2      	b.n	8004334 <__swsetup_r+0xac>
 800434e:	2000      	movs	r0, #0
 8004350:	e7f7      	b.n	8004342 <__swsetup_r+0xba>
 8004352:	bf00      	nop
 8004354:	2000000c 	.word	0x2000000c
 8004358:	0800475c 	.word	0x0800475c
 800435c:	0800477c 	.word	0x0800477c
 8004360:	0800473c 	.word	0x0800473c

08004364 <_close_r>:
 8004364:	b538      	push	{r3, r4, r5, lr}
 8004366:	2300      	movs	r3, #0
 8004368:	4c05      	ldr	r4, [pc, #20]	; (8004380 <_close_r+0x1c>)
 800436a:	4605      	mov	r5, r0
 800436c:	4608      	mov	r0, r1
 800436e:	6023      	str	r3, [r4, #0]
 8004370:	f7fc fd0c 	bl	8000d8c <_close>
 8004374:	1c43      	adds	r3, r0, #1
 8004376:	d102      	bne.n	800437e <_close_r+0x1a>
 8004378:	6823      	ldr	r3, [r4, #0]
 800437a:	b103      	cbz	r3, 800437e <_close_r+0x1a>
 800437c:	602b      	str	r3, [r5, #0]
 800437e:	bd38      	pop	{r3, r4, r5, pc}
 8004380:	2000024c 	.word	0x2000024c

08004384 <__sflush_r>:
 8004384:	898a      	ldrh	r2, [r1, #12]
 8004386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800438a:	4605      	mov	r5, r0
 800438c:	0710      	lsls	r0, r2, #28
 800438e:	460c      	mov	r4, r1
 8004390:	d458      	bmi.n	8004444 <__sflush_r+0xc0>
 8004392:	684b      	ldr	r3, [r1, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	dc05      	bgt.n	80043a4 <__sflush_r+0x20>
 8004398:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800439a:	2b00      	cmp	r3, #0
 800439c:	dc02      	bgt.n	80043a4 <__sflush_r+0x20>
 800439e:	2000      	movs	r0, #0
 80043a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043a6:	2e00      	cmp	r6, #0
 80043a8:	d0f9      	beq.n	800439e <__sflush_r+0x1a>
 80043aa:	2300      	movs	r3, #0
 80043ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80043b0:	682f      	ldr	r7, [r5, #0]
 80043b2:	6a21      	ldr	r1, [r4, #32]
 80043b4:	602b      	str	r3, [r5, #0]
 80043b6:	d032      	beq.n	800441e <__sflush_r+0x9a>
 80043b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80043ba:	89a3      	ldrh	r3, [r4, #12]
 80043bc:	075a      	lsls	r2, r3, #29
 80043be:	d505      	bpl.n	80043cc <__sflush_r+0x48>
 80043c0:	6863      	ldr	r3, [r4, #4]
 80043c2:	1ac0      	subs	r0, r0, r3
 80043c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80043c6:	b10b      	cbz	r3, 80043cc <__sflush_r+0x48>
 80043c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80043ca:	1ac0      	subs	r0, r0, r3
 80043cc:	2300      	movs	r3, #0
 80043ce:	4602      	mov	r2, r0
 80043d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80043d2:	6a21      	ldr	r1, [r4, #32]
 80043d4:	4628      	mov	r0, r5
 80043d6:	47b0      	blx	r6
 80043d8:	1c43      	adds	r3, r0, #1
 80043da:	89a3      	ldrh	r3, [r4, #12]
 80043dc:	d106      	bne.n	80043ec <__sflush_r+0x68>
 80043de:	6829      	ldr	r1, [r5, #0]
 80043e0:	291d      	cmp	r1, #29
 80043e2:	d848      	bhi.n	8004476 <__sflush_r+0xf2>
 80043e4:	4a29      	ldr	r2, [pc, #164]	; (800448c <__sflush_r+0x108>)
 80043e6:	40ca      	lsrs	r2, r1
 80043e8:	07d6      	lsls	r6, r2, #31
 80043ea:	d544      	bpl.n	8004476 <__sflush_r+0xf2>
 80043ec:	2200      	movs	r2, #0
 80043ee:	6062      	str	r2, [r4, #4]
 80043f0:	6922      	ldr	r2, [r4, #16]
 80043f2:	04d9      	lsls	r1, r3, #19
 80043f4:	6022      	str	r2, [r4, #0]
 80043f6:	d504      	bpl.n	8004402 <__sflush_r+0x7e>
 80043f8:	1c42      	adds	r2, r0, #1
 80043fa:	d101      	bne.n	8004400 <__sflush_r+0x7c>
 80043fc:	682b      	ldr	r3, [r5, #0]
 80043fe:	b903      	cbnz	r3, 8004402 <__sflush_r+0x7e>
 8004400:	6560      	str	r0, [r4, #84]	; 0x54
 8004402:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004404:	602f      	str	r7, [r5, #0]
 8004406:	2900      	cmp	r1, #0
 8004408:	d0c9      	beq.n	800439e <__sflush_r+0x1a>
 800440a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800440e:	4299      	cmp	r1, r3
 8004410:	d002      	beq.n	8004418 <__sflush_r+0x94>
 8004412:	4628      	mov	r0, r5
 8004414:	f7ff fc9c 	bl	8003d50 <_free_r>
 8004418:	2000      	movs	r0, #0
 800441a:	6360      	str	r0, [r4, #52]	; 0x34
 800441c:	e7c0      	b.n	80043a0 <__sflush_r+0x1c>
 800441e:	2301      	movs	r3, #1
 8004420:	4628      	mov	r0, r5
 8004422:	47b0      	blx	r6
 8004424:	1c41      	adds	r1, r0, #1
 8004426:	d1c8      	bne.n	80043ba <__sflush_r+0x36>
 8004428:	682b      	ldr	r3, [r5, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d0c5      	beq.n	80043ba <__sflush_r+0x36>
 800442e:	2b1d      	cmp	r3, #29
 8004430:	d001      	beq.n	8004436 <__sflush_r+0xb2>
 8004432:	2b16      	cmp	r3, #22
 8004434:	d101      	bne.n	800443a <__sflush_r+0xb6>
 8004436:	602f      	str	r7, [r5, #0]
 8004438:	e7b1      	b.n	800439e <__sflush_r+0x1a>
 800443a:	89a3      	ldrh	r3, [r4, #12]
 800443c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004440:	81a3      	strh	r3, [r4, #12]
 8004442:	e7ad      	b.n	80043a0 <__sflush_r+0x1c>
 8004444:	690f      	ldr	r7, [r1, #16]
 8004446:	2f00      	cmp	r7, #0
 8004448:	d0a9      	beq.n	800439e <__sflush_r+0x1a>
 800444a:	0793      	lsls	r3, r2, #30
 800444c:	bf18      	it	ne
 800444e:	2300      	movne	r3, #0
 8004450:	680e      	ldr	r6, [r1, #0]
 8004452:	bf08      	it	eq
 8004454:	694b      	ldreq	r3, [r1, #20]
 8004456:	eba6 0807 	sub.w	r8, r6, r7
 800445a:	600f      	str	r7, [r1, #0]
 800445c:	608b      	str	r3, [r1, #8]
 800445e:	f1b8 0f00 	cmp.w	r8, #0
 8004462:	dd9c      	ble.n	800439e <__sflush_r+0x1a>
 8004464:	4643      	mov	r3, r8
 8004466:	463a      	mov	r2, r7
 8004468:	6a21      	ldr	r1, [r4, #32]
 800446a:	4628      	mov	r0, r5
 800446c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800446e:	47b0      	blx	r6
 8004470:	2800      	cmp	r0, #0
 8004472:	dc06      	bgt.n	8004482 <__sflush_r+0xfe>
 8004474:	89a3      	ldrh	r3, [r4, #12]
 8004476:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800447a:	81a3      	strh	r3, [r4, #12]
 800447c:	f04f 30ff 	mov.w	r0, #4294967295
 8004480:	e78e      	b.n	80043a0 <__sflush_r+0x1c>
 8004482:	4407      	add	r7, r0
 8004484:	eba8 0800 	sub.w	r8, r8, r0
 8004488:	e7e9      	b.n	800445e <__sflush_r+0xda>
 800448a:	bf00      	nop
 800448c:	20400001 	.word	0x20400001

08004490 <_fflush_r>:
 8004490:	b538      	push	{r3, r4, r5, lr}
 8004492:	690b      	ldr	r3, [r1, #16]
 8004494:	4605      	mov	r5, r0
 8004496:	460c      	mov	r4, r1
 8004498:	b1db      	cbz	r3, 80044d2 <_fflush_r+0x42>
 800449a:	b118      	cbz	r0, 80044a4 <_fflush_r+0x14>
 800449c:	6983      	ldr	r3, [r0, #24]
 800449e:	b90b      	cbnz	r3, 80044a4 <_fflush_r+0x14>
 80044a0:	f7ff f8b2 	bl	8003608 <__sinit>
 80044a4:	4b0c      	ldr	r3, [pc, #48]	; (80044d8 <_fflush_r+0x48>)
 80044a6:	429c      	cmp	r4, r3
 80044a8:	d109      	bne.n	80044be <_fflush_r+0x2e>
 80044aa:	686c      	ldr	r4, [r5, #4]
 80044ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044b0:	b17b      	cbz	r3, 80044d2 <_fflush_r+0x42>
 80044b2:	4621      	mov	r1, r4
 80044b4:	4628      	mov	r0, r5
 80044b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044ba:	f7ff bf63 	b.w	8004384 <__sflush_r>
 80044be:	4b07      	ldr	r3, [pc, #28]	; (80044dc <_fflush_r+0x4c>)
 80044c0:	429c      	cmp	r4, r3
 80044c2:	d101      	bne.n	80044c8 <_fflush_r+0x38>
 80044c4:	68ac      	ldr	r4, [r5, #8]
 80044c6:	e7f1      	b.n	80044ac <_fflush_r+0x1c>
 80044c8:	4b05      	ldr	r3, [pc, #20]	; (80044e0 <_fflush_r+0x50>)
 80044ca:	429c      	cmp	r4, r3
 80044cc:	bf08      	it	eq
 80044ce:	68ec      	ldreq	r4, [r5, #12]
 80044d0:	e7ec      	b.n	80044ac <_fflush_r+0x1c>
 80044d2:	2000      	movs	r0, #0
 80044d4:	bd38      	pop	{r3, r4, r5, pc}
 80044d6:	bf00      	nop
 80044d8:	0800475c 	.word	0x0800475c
 80044dc:	0800477c 	.word	0x0800477c
 80044e0:	0800473c 	.word	0x0800473c

080044e4 <_lseek_r>:
 80044e4:	b538      	push	{r3, r4, r5, lr}
 80044e6:	4605      	mov	r5, r0
 80044e8:	4608      	mov	r0, r1
 80044ea:	4611      	mov	r1, r2
 80044ec:	2200      	movs	r2, #0
 80044ee:	4c05      	ldr	r4, [pc, #20]	; (8004504 <_lseek_r+0x20>)
 80044f0:	6022      	str	r2, [r4, #0]
 80044f2:	461a      	mov	r2, r3
 80044f4:	f7fc fc6e 	bl	8000dd4 <_lseek>
 80044f8:	1c43      	adds	r3, r0, #1
 80044fa:	d102      	bne.n	8004502 <_lseek_r+0x1e>
 80044fc:	6823      	ldr	r3, [r4, #0]
 80044fe:	b103      	cbz	r3, 8004502 <_lseek_r+0x1e>
 8004500:	602b      	str	r3, [r5, #0]
 8004502:	bd38      	pop	{r3, r4, r5, pc}
 8004504:	2000024c 	.word	0x2000024c

08004508 <__swhatbuf_r>:
 8004508:	b570      	push	{r4, r5, r6, lr}
 800450a:	460e      	mov	r6, r1
 800450c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004510:	b096      	sub	sp, #88	; 0x58
 8004512:	2900      	cmp	r1, #0
 8004514:	4614      	mov	r4, r2
 8004516:	461d      	mov	r5, r3
 8004518:	da07      	bge.n	800452a <__swhatbuf_r+0x22>
 800451a:	2300      	movs	r3, #0
 800451c:	602b      	str	r3, [r5, #0]
 800451e:	89b3      	ldrh	r3, [r6, #12]
 8004520:	061a      	lsls	r2, r3, #24
 8004522:	d410      	bmi.n	8004546 <__swhatbuf_r+0x3e>
 8004524:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004528:	e00e      	b.n	8004548 <__swhatbuf_r+0x40>
 800452a:	466a      	mov	r2, sp
 800452c:	f000 f884 	bl	8004638 <_fstat_r>
 8004530:	2800      	cmp	r0, #0
 8004532:	dbf2      	blt.n	800451a <__swhatbuf_r+0x12>
 8004534:	9a01      	ldr	r2, [sp, #4]
 8004536:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800453a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800453e:	425a      	negs	r2, r3
 8004540:	415a      	adcs	r2, r3
 8004542:	602a      	str	r2, [r5, #0]
 8004544:	e7ee      	b.n	8004524 <__swhatbuf_r+0x1c>
 8004546:	2340      	movs	r3, #64	; 0x40
 8004548:	2000      	movs	r0, #0
 800454a:	6023      	str	r3, [r4, #0]
 800454c:	b016      	add	sp, #88	; 0x58
 800454e:	bd70      	pop	{r4, r5, r6, pc}

08004550 <__smakebuf_r>:
 8004550:	898b      	ldrh	r3, [r1, #12]
 8004552:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004554:	079d      	lsls	r5, r3, #30
 8004556:	4606      	mov	r6, r0
 8004558:	460c      	mov	r4, r1
 800455a:	d507      	bpl.n	800456c <__smakebuf_r+0x1c>
 800455c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004560:	6023      	str	r3, [r4, #0]
 8004562:	6123      	str	r3, [r4, #16]
 8004564:	2301      	movs	r3, #1
 8004566:	6163      	str	r3, [r4, #20]
 8004568:	b002      	add	sp, #8
 800456a:	bd70      	pop	{r4, r5, r6, pc}
 800456c:	ab01      	add	r3, sp, #4
 800456e:	466a      	mov	r2, sp
 8004570:	f7ff ffca 	bl	8004508 <__swhatbuf_r>
 8004574:	9900      	ldr	r1, [sp, #0]
 8004576:	4605      	mov	r5, r0
 8004578:	4630      	mov	r0, r6
 800457a:	f7ff fc35 	bl	8003de8 <_malloc_r>
 800457e:	b948      	cbnz	r0, 8004594 <__smakebuf_r+0x44>
 8004580:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004584:	059a      	lsls	r2, r3, #22
 8004586:	d4ef      	bmi.n	8004568 <__smakebuf_r+0x18>
 8004588:	f023 0303 	bic.w	r3, r3, #3
 800458c:	f043 0302 	orr.w	r3, r3, #2
 8004590:	81a3      	strh	r3, [r4, #12]
 8004592:	e7e3      	b.n	800455c <__smakebuf_r+0xc>
 8004594:	4b0d      	ldr	r3, [pc, #52]	; (80045cc <__smakebuf_r+0x7c>)
 8004596:	62b3      	str	r3, [r6, #40]	; 0x28
 8004598:	89a3      	ldrh	r3, [r4, #12]
 800459a:	6020      	str	r0, [r4, #0]
 800459c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045a0:	81a3      	strh	r3, [r4, #12]
 80045a2:	9b00      	ldr	r3, [sp, #0]
 80045a4:	6120      	str	r0, [r4, #16]
 80045a6:	6163      	str	r3, [r4, #20]
 80045a8:	9b01      	ldr	r3, [sp, #4]
 80045aa:	b15b      	cbz	r3, 80045c4 <__smakebuf_r+0x74>
 80045ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045b0:	4630      	mov	r0, r6
 80045b2:	f000 f853 	bl	800465c <_isatty_r>
 80045b6:	b128      	cbz	r0, 80045c4 <__smakebuf_r+0x74>
 80045b8:	89a3      	ldrh	r3, [r4, #12]
 80045ba:	f023 0303 	bic.w	r3, r3, #3
 80045be:	f043 0301 	orr.w	r3, r3, #1
 80045c2:	81a3      	strh	r3, [r4, #12]
 80045c4:	89a3      	ldrh	r3, [r4, #12]
 80045c6:	431d      	orrs	r5, r3
 80045c8:	81a5      	strh	r5, [r4, #12]
 80045ca:	e7cd      	b.n	8004568 <__smakebuf_r+0x18>
 80045cc:	080035d1 	.word	0x080035d1

080045d0 <__ascii_mbtowc>:
 80045d0:	b082      	sub	sp, #8
 80045d2:	b901      	cbnz	r1, 80045d6 <__ascii_mbtowc+0x6>
 80045d4:	a901      	add	r1, sp, #4
 80045d6:	b142      	cbz	r2, 80045ea <__ascii_mbtowc+0x1a>
 80045d8:	b14b      	cbz	r3, 80045ee <__ascii_mbtowc+0x1e>
 80045da:	7813      	ldrb	r3, [r2, #0]
 80045dc:	600b      	str	r3, [r1, #0]
 80045de:	7812      	ldrb	r2, [r2, #0]
 80045e0:	1c10      	adds	r0, r2, #0
 80045e2:	bf18      	it	ne
 80045e4:	2001      	movne	r0, #1
 80045e6:	b002      	add	sp, #8
 80045e8:	4770      	bx	lr
 80045ea:	4610      	mov	r0, r2
 80045ec:	e7fb      	b.n	80045e6 <__ascii_mbtowc+0x16>
 80045ee:	f06f 0001 	mvn.w	r0, #1
 80045f2:	e7f8      	b.n	80045e6 <__ascii_mbtowc+0x16>

080045f4 <__malloc_lock>:
 80045f4:	4770      	bx	lr

080045f6 <__malloc_unlock>:
 80045f6:	4770      	bx	lr

080045f8 <_read_r>:
 80045f8:	b538      	push	{r3, r4, r5, lr}
 80045fa:	4605      	mov	r5, r0
 80045fc:	4608      	mov	r0, r1
 80045fe:	4611      	mov	r1, r2
 8004600:	2200      	movs	r2, #0
 8004602:	4c05      	ldr	r4, [pc, #20]	; (8004618 <_read_r+0x20>)
 8004604:	6022      	str	r2, [r4, #0]
 8004606:	461a      	mov	r2, r3
 8004608:	f7fc fba3 	bl	8000d52 <_read>
 800460c:	1c43      	adds	r3, r0, #1
 800460e:	d102      	bne.n	8004616 <_read_r+0x1e>
 8004610:	6823      	ldr	r3, [r4, #0]
 8004612:	b103      	cbz	r3, 8004616 <_read_r+0x1e>
 8004614:	602b      	str	r3, [r5, #0]
 8004616:	bd38      	pop	{r3, r4, r5, pc}
 8004618:	2000024c 	.word	0x2000024c

0800461c <__ascii_wctomb>:
 800461c:	b149      	cbz	r1, 8004632 <__ascii_wctomb+0x16>
 800461e:	2aff      	cmp	r2, #255	; 0xff
 8004620:	bf8b      	itete	hi
 8004622:	238a      	movhi	r3, #138	; 0x8a
 8004624:	700a      	strbls	r2, [r1, #0]
 8004626:	6003      	strhi	r3, [r0, #0]
 8004628:	2001      	movls	r0, #1
 800462a:	bf88      	it	hi
 800462c:	f04f 30ff 	movhi.w	r0, #4294967295
 8004630:	4770      	bx	lr
 8004632:	4608      	mov	r0, r1
 8004634:	4770      	bx	lr
	...

08004638 <_fstat_r>:
 8004638:	b538      	push	{r3, r4, r5, lr}
 800463a:	2300      	movs	r3, #0
 800463c:	4c06      	ldr	r4, [pc, #24]	; (8004658 <_fstat_r+0x20>)
 800463e:	4605      	mov	r5, r0
 8004640:	4608      	mov	r0, r1
 8004642:	4611      	mov	r1, r2
 8004644:	6023      	str	r3, [r4, #0]
 8004646:	f7fc fbac 	bl	8000da2 <_fstat>
 800464a:	1c43      	adds	r3, r0, #1
 800464c:	d102      	bne.n	8004654 <_fstat_r+0x1c>
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	b103      	cbz	r3, 8004654 <_fstat_r+0x1c>
 8004652:	602b      	str	r3, [r5, #0]
 8004654:	bd38      	pop	{r3, r4, r5, pc}
 8004656:	bf00      	nop
 8004658:	2000024c 	.word	0x2000024c

0800465c <_isatty_r>:
 800465c:	b538      	push	{r3, r4, r5, lr}
 800465e:	2300      	movs	r3, #0
 8004660:	4c05      	ldr	r4, [pc, #20]	; (8004678 <_isatty_r+0x1c>)
 8004662:	4605      	mov	r5, r0
 8004664:	4608      	mov	r0, r1
 8004666:	6023      	str	r3, [r4, #0]
 8004668:	f7fc fbaa 	bl	8000dc0 <_isatty>
 800466c:	1c43      	adds	r3, r0, #1
 800466e:	d102      	bne.n	8004676 <_isatty_r+0x1a>
 8004670:	6823      	ldr	r3, [r4, #0]
 8004672:	b103      	cbz	r3, 8004676 <_isatty_r+0x1a>
 8004674:	602b      	str	r3, [r5, #0]
 8004676:	bd38      	pop	{r3, r4, r5, pc}
 8004678:	2000024c 	.word	0x2000024c

0800467c <_init>:
 800467c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800467e:	bf00      	nop
 8004680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004682:	bc08      	pop	{r3}
 8004684:	469e      	mov	lr, r3
 8004686:	4770      	bx	lr

08004688 <_fini>:
 8004688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800468a:	bf00      	nop
 800468c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800468e:	bc08      	pop	{r3}
 8004690:	469e      	mov	lr, r3
 8004692:	4770      	bx	lr
