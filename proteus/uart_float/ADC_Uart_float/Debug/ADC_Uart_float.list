
ADC_Uart_float.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005504  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  08005618  08005618  00015618  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005930  08005930  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08005930  08005930  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005930  08005930  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005930  08005930  00015930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005934  08005934  00015934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08005938  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  200001dc  08005b14  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08005b14  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000090fe  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b00  00000000  00000000  00029303  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000878  00000000  00000000  0002ae08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007c0  00000000  00000000  0002b680  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000180ed  00000000  00000000  0002be40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007d1a  00000000  00000000  00043f2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00086080  00000000  00000000  0004bc47  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d1cc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ef8  00000000  00000000  000d1d44  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	080055fc 	.word	0x080055fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	080055fc 	.word	0x080055fc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <_write>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file , char *ptr,int len){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]

	HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	b29a      	uxth	r2, r3
 8000b38:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3c:	68b9      	ldr	r1, [r7, #8]
 8000b3e:	4804      	ldr	r0, [pc, #16]	; (8000b50 <_write+0x28>)
 8000b40:	f002 f899 	bl	8002c76 <HAL_UART_Transmit>
	return len;
 8000b44:	687b      	ldr	r3, [r7, #4]
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000238 	.word	0x20000238
 8000b54:	00000000 	.word	0x00000000

08000b58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b5e:	f000 fac1 	bl	80010e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b62:	f000 f84b 	bl	8000bfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b66:	f000 f901 	bl	8000d6c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b6a:	f000 f897 	bl	8000c9c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000b6e:	f000 f8d3 	bl	8000d18 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	      HAL_ADC_Start(&hadc1);
 8000b72:	481f      	ldr	r0, [pc, #124]	; (8000bf0 <main+0x98>)
 8000b74:	f000 fc12 	bl	800139c <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc1, 20);
 8000b78:	2114      	movs	r1, #20
 8000b7a:	481d      	ldr	r0, [pc, #116]	; (8000bf0 <main+0x98>)
 8000b7c:	f000 fcbc 	bl	80014f8 <HAL_ADC_PollForConversion>
	  	  lux = HAL_ADC_GetValue(&hadc1);
 8000b80:	481b      	ldr	r0, [pc, #108]	; (8000bf0 <main+0x98>)
 8000b82:	f000 fdbf 	bl	8001704 <HAL_ADC_GetValue>
 8000b86:	4603      	mov	r3, r0
 8000b88:	b29a      	uxth	r2, r3
 8000b8a:	4b1a      	ldr	r3, [pc, #104]	; (8000bf4 <main+0x9c>)
 8000b8c:	801a      	strh	r2, [r3, #0]
	  	  float voltage = lux *(3.3/4095)*4.55;
 8000b8e:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <main+0x9c>)
 8000b90:	881b      	ldrh	r3, [r3, #0]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff fc36 	bl	8000404 <__aeabi_i2d>
 8000b98:	a311      	add	r3, pc, #68	; (adr r3, 8000be0 <main+0x88>)
 8000b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b9e:	f7ff fc9b 	bl	80004d8 <__aeabi_dmul>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	460c      	mov	r4, r1
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	4621      	mov	r1, r4
 8000baa:	a30f      	add	r3, pc, #60	; (adr r3, 8000be8 <main+0x90>)
 8000bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bb0:	f7ff fc92 	bl	80004d8 <__aeabi_dmul>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	460c      	mov	r4, r1
 8000bb8:	4618      	mov	r0, r3
 8000bba:	4621      	mov	r1, r4
 8000bbc:	f7ff ff64 	bl	8000a88 <__aeabi_d2f>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	607b      	str	r3, [r7, #4]

	  printf("the voltage is %f\r\n",voltage);
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f7ff fc2f 	bl	8000428 <__aeabi_f2d>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	460c      	mov	r4, r1
 8000bce:	461a      	mov	r2, r3
 8000bd0:	4623      	mov	r3, r4
 8000bd2:	4809      	ldr	r0, [pc, #36]	; (8000bf8 <main+0xa0>)
 8000bd4:	f002 fe3c 	bl	8003850 <iprintf>
	  HAL_Delay(100);
 8000bd8:	2064      	movs	r0, #100	; 0x64
 8000bda:	f000 fae5 	bl	80011a8 <HAL_Delay>
  {
 8000bde:	e7c8      	b.n	8000b72 <main+0x1a>
 8000be0:	e734d9b4 	.word	0xe734d9b4
 8000be4:	3f4a680c 	.word	0x3f4a680c
 8000be8:	33333333 	.word	0x33333333
 8000bec:	40123333 	.word	0x40123333
 8000bf0:	20000208 	.word	0x20000208
 8000bf4:	200001f8 	.word	0x200001f8
 8000bf8:	08005618 	.word	0x08005618

08000bfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b094      	sub	sp, #80	; 0x50
 8000c00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c06:	2228      	movs	r2, #40	; 0x28
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f002 f9c8 	bl	8002fa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c30:	2301      	movs	r3, #1
 8000c32:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c34:	2310      	movs	r3, #16
 8000c36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c40:	4618      	mov	r0, r3
 8000c42:	f001 fa3d 	bl	80020c0 <HAL_RCC_OscConfig>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000c4c:	f000 f8a4 	bl	8000d98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c50:	230f      	movs	r3, #15
 8000c52:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c60:	2300      	movs	r3, #0
 8000c62:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2100      	movs	r1, #0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f001 fca8 	bl	80025c0 <HAL_RCC_ClockConfig>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000c76:	f000 f88f 	bl	8000d98 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	4618      	mov	r0, r3
 8000c86:	f001 fe37 	bl	80028f8 <HAL_RCCEx_PeriphCLKConfig>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c90:	f000 f882 	bl	8000d98 <Error_Handler>
  }
}
 8000c94:	bf00      	nop
 8000c96:	3750      	adds	r7, #80	; 0x50
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ca2:	1d3b      	adds	r3, r7, #4
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cac:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <MX_ADC1_Init+0x74>)
 8000cae:	4a19      	ldr	r2, [pc, #100]	; (8000d14 <MX_ADC1_Init+0x78>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cb2:	4b17      	ldr	r3, [pc, #92]	; (8000d10 <MX_ADC1_Init+0x74>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cb8:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <MX_ADC1_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cbe:	4b14      	ldr	r3, [pc, #80]	; (8000d10 <MX_ADC1_Init+0x74>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <MX_ADC1_Init+0x74>)
 8000cc6:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000cca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ccc:	4b10      	ldr	r3, [pc, #64]	; (8000d10 <MX_ADC1_Init+0x74>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	; (8000d10 <MX_ADC1_Init+0x74>)
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cd8:	480d      	ldr	r0, [pc, #52]	; (8000d10 <MX_ADC1_Init+0x74>)
 8000cda:	f000 fa87 	bl	80011ec <HAL_ADC_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000ce4:	f000 f858 	bl	8000d98 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cec:	2301      	movs	r3, #1
 8000cee:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cf4:	1d3b      	adds	r3, r7, #4
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4805      	ldr	r0, [pc, #20]	; (8000d10 <MX_ADC1_Init+0x74>)
 8000cfa:	f000 fde5 	bl	80018c8 <HAL_ADC_ConfigChannel>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000d04:	f000 f848 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d08:	bf00      	nop
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000208 	.word	0x20000208
 8000d14:	40012400 	.word	0x40012400

08000d18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d1c:	4b11      	ldr	r3, [pc, #68]	; (8000d64 <MX_USART2_UART_Init+0x4c>)
 8000d1e:	4a12      	ldr	r2, [pc, #72]	; (8000d68 <MX_USART2_UART_Init+0x50>)
 8000d20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d22:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <MX_USART2_UART_Init+0x4c>)
 8000d24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d2a:	4b0e      	ldr	r3, [pc, #56]	; (8000d64 <MX_USART2_UART_Init+0x4c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <MX_USART2_UART_Init+0x4c>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d36:	4b0b      	ldr	r3, [pc, #44]	; (8000d64 <MX_USART2_UART_Init+0x4c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d3c:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <MX_USART2_UART_Init+0x4c>)
 8000d3e:	220c      	movs	r2, #12
 8000d40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d42:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <MX_USART2_UART_Init+0x4c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <MX_USART2_UART_Init+0x4c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d4e:	4805      	ldr	r0, [pc, #20]	; (8000d64 <MX_USART2_UART_Init+0x4c>)
 8000d50:	f001 ff44 	bl	8002bdc <HAL_UART_Init>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d5a:	f000 f81d 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20000238 	.word	0x20000238
 8000d68:	40004400 	.word	0x40004400

08000d6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <MX_GPIO_Init+0x28>)
 8000d74:	699b      	ldr	r3, [r3, #24]
 8000d76:	4a07      	ldr	r2, [pc, #28]	; (8000d94 <MX_GPIO_Init+0x28>)
 8000d78:	f043 0304 	orr.w	r3, r3, #4
 8000d7c:	6193      	str	r3, [r2, #24]
 8000d7e:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <MX_GPIO_Init+0x28>)
 8000d80:	699b      	ldr	r3, [r3, #24]
 8000d82:	f003 0304 	and.w	r3, r3, #4
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]

}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bc80      	pop	{r7}
 8000d92:	4770      	bx	lr
 8000d94:	40021000 	.word	0x40021000

08000d98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d9c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d9e:	e7fe      	b.n	8000d9e <Error_Handler+0x6>

08000da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000da6:	4b15      	ldr	r3, [pc, #84]	; (8000dfc <HAL_MspInit+0x5c>)
 8000da8:	699b      	ldr	r3, [r3, #24]
 8000daa:	4a14      	ldr	r2, [pc, #80]	; (8000dfc <HAL_MspInit+0x5c>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6193      	str	r3, [r2, #24]
 8000db2:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <HAL_MspInit+0x5c>)
 8000db4:	699b      	ldr	r3, [r3, #24]
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dbe:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <HAL_MspInit+0x5c>)
 8000dc0:	69db      	ldr	r3, [r3, #28]
 8000dc2:	4a0e      	ldr	r2, [pc, #56]	; (8000dfc <HAL_MspInit+0x5c>)
 8000dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc8:	61d3      	str	r3, [r2, #28]
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <HAL_MspInit+0x5c>)
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <HAL_MspInit+0x60>)
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	4a04      	ldr	r2, [pc, #16]	; (8000e00 <HAL_MspInit+0x60>)
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df2:	bf00      	nop
 8000df4:	3714      	adds	r7, #20
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bc80      	pop	{r7}
 8000dfa:	4770      	bx	lr
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	40010000 	.word	0x40010000

08000e04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b088      	sub	sp, #32
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 0310 	add.w	r3, r7, #16
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a18      	ldr	r2, [pc, #96]	; (8000e80 <HAL_ADC_MspInit+0x7c>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d129      	bne.n	8000e78 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e24:	4b17      	ldr	r3, [pc, #92]	; (8000e84 <HAL_ADC_MspInit+0x80>)
 8000e26:	699b      	ldr	r3, [r3, #24]
 8000e28:	4a16      	ldr	r2, [pc, #88]	; (8000e84 <HAL_ADC_MspInit+0x80>)
 8000e2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e2e:	6193      	str	r3, [r2, #24]
 8000e30:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <HAL_ADC_MspInit+0x80>)
 8000e32:	699b      	ldr	r3, [r3, #24]
 8000e34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e38:	60fb      	str	r3, [r7, #12]
 8000e3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <HAL_ADC_MspInit+0x80>)
 8000e3e:	699b      	ldr	r3, [r3, #24]
 8000e40:	4a10      	ldr	r2, [pc, #64]	; (8000e84 <HAL_ADC_MspInit+0x80>)
 8000e42:	f043 0304 	orr.w	r3, r3, #4
 8000e46:	6193      	str	r3, [r2, #24]
 8000e48:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <HAL_ADC_MspInit+0x80>)
 8000e4a:	699b      	ldr	r3, [r3, #24]
 8000e4c:	f003 0304 	and.w	r3, r3, #4
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e54:	2302      	movs	r3, #2
 8000e56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e58:	2303      	movs	r3, #3
 8000e5a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5c:	f107 0310 	add.w	r3, r7, #16
 8000e60:	4619      	mov	r1, r3
 8000e62:	4809      	ldr	r0, [pc, #36]	; (8000e88 <HAL_ADC_MspInit+0x84>)
 8000e64:	f000 ffda 	bl	8001e1c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	2012      	movs	r0, #18
 8000e6e:	f000 ff9e 	bl	8001dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000e72:	2012      	movs	r0, #18
 8000e74:	f000 ffb7 	bl	8001de6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e78:	bf00      	nop
 8000e7a:	3720      	adds	r7, #32
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40012400 	.word	0x40012400
 8000e84:	40021000 	.word	0x40021000
 8000e88:	40010800 	.word	0x40010800

08000e8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b088      	sub	sp, #32
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 0310 	add.w	r3, r7, #16
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a1b      	ldr	r2, [pc, #108]	; (8000f14 <HAL_UART_MspInit+0x88>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d12f      	bne.n	8000f0c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eac:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <HAL_UART_MspInit+0x8c>)
 8000eae:	69db      	ldr	r3, [r3, #28]
 8000eb0:	4a19      	ldr	r2, [pc, #100]	; (8000f18 <HAL_UART_MspInit+0x8c>)
 8000eb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eb6:	61d3      	str	r3, [r2, #28]
 8000eb8:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <HAL_UART_MspInit+0x8c>)
 8000eba:	69db      	ldr	r3, [r3, #28]
 8000ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec4:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <HAL_UART_MspInit+0x8c>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	4a13      	ldr	r2, [pc, #76]	; (8000f18 <HAL_UART_MspInit+0x8c>)
 8000eca:	f043 0304 	orr.w	r3, r3, #4
 8000ece:	6193      	str	r3, [r2, #24]
 8000ed0:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <HAL_UART_MspInit+0x8c>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	f003 0304 	and.w	r3, r3, #4
 8000ed8:	60bb      	str	r3, [r7, #8]
 8000eda:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000edc:	2304      	movs	r3, #4
 8000ede:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee8:	f107 0310 	add.w	r3, r7, #16
 8000eec:	4619      	mov	r1, r3
 8000eee:	480b      	ldr	r0, [pc, #44]	; (8000f1c <HAL_UART_MspInit+0x90>)
 8000ef0:	f000 ff94 	bl	8001e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ef4:	2308      	movs	r3, #8
 8000ef6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f00:	f107 0310 	add.w	r3, r7, #16
 8000f04:	4619      	mov	r1, r3
 8000f06:	4805      	ldr	r0, [pc, #20]	; (8000f1c <HAL_UART_MspInit+0x90>)
 8000f08:	f000 ff88 	bl	8001e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f0c:	bf00      	nop
 8000f0e:	3720      	adds	r7, #32
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40004400 	.word	0x40004400
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	40010800 	.word	0x40010800

08000f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f24:	e7fe      	b.n	8000f24 <NMI_Handler+0x4>

08000f26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2a:	e7fe      	b.n	8000f2a <HardFault_Handler+0x4>

08000f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <MemManage_Handler+0x4>

08000f32 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f32:	b480      	push	{r7}
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f36:	e7fe      	b.n	8000f36 <BusFault_Handler+0x4>

08000f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <UsageFault_Handler+0x4>

08000f3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc80      	pop	{r7}
 8000f48:	4770      	bx	lr

08000f4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bc80      	pop	{r7}
 8000f54:	4770      	bx	lr

08000f56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bc80      	pop	{r7}
 8000f60:	4770      	bx	lr

08000f62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f66:	f000 f903 	bl	8001170 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
	...

08000f70 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f74:	4802      	ldr	r0, [pc, #8]	; (8000f80 <ADC1_2_IRQHandler+0x10>)
 8000f76:	f000 fbd1 	bl	800171c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000208 	.word	0x20000208

08000f84 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
 8000f94:	e00a      	b.n	8000fac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f96:	f3af 8000 	nop.w
 8000f9a:	4601      	mov	r1, r0
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	1c5a      	adds	r2, r3, #1
 8000fa0:	60ba      	str	r2, [r7, #8]
 8000fa2:	b2ca      	uxtb	r2, r1
 8000fa4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	617b      	str	r3, [r7, #20]
 8000fac:	697a      	ldr	r2, [r7, #20]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	dbf0      	blt.n	8000f96 <_read+0x12>
	}

return len;
 8000fb4:	687b      	ldr	r3, [r7, #4]
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3718      	adds	r7, #24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <_close>:
	}
	return len;
}

int _close(int file)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	b083      	sub	sp, #12
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	6078      	str	r0, [r7, #4]
	return -1;
 8000fc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr

08000fd4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
 8000fdc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fe4:	605a      	str	r2, [r3, #4]
	return 0;
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr

08000ff2 <_isatty>:

int _isatty(int file)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	b083      	sub	sp, #12
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
	return 1;
 8000ffa:	2301      	movs	r3, #1
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr

08001006 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001006:	b480      	push	{r7}
 8001008:	b085      	sub	sp, #20
 800100a:	af00      	add	r7, sp, #0
 800100c:	60f8      	str	r0, [r7, #12]
 800100e:	60b9      	str	r1, [r7, #8]
 8001010:	607a      	str	r2, [r7, #4]
	return 0;
 8001012:	2300      	movs	r3, #0
}
 8001014:	4618      	mov	r0, r3
 8001016:	3714      	adds	r7, #20
 8001018:	46bd      	mov	sp, r7
 800101a:	bc80      	pop	{r7}
 800101c:	4770      	bx	lr
	...

08001020 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001028:	4a14      	ldr	r2, [pc, #80]	; (800107c <_sbrk+0x5c>)
 800102a:	4b15      	ldr	r3, [pc, #84]	; (8001080 <_sbrk+0x60>)
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001034:	4b13      	ldr	r3, [pc, #76]	; (8001084 <_sbrk+0x64>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d102      	bne.n	8001042 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800103c:	4b11      	ldr	r3, [pc, #68]	; (8001084 <_sbrk+0x64>)
 800103e:	4a12      	ldr	r2, [pc, #72]	; (8001088 <_sbrk+0x68>)
 8001040:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001042:	4b10      	ldr	r3, [pc, #64]	; (8001084 <_sbrk+0x64>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4413      	add	r3, r2
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	429a      	cmp	r2, r3
 800104e:	d207      	bcs.n	8001060 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001050:	f001 ff7c 	bl	8002f4c <__errno>
 8001054:	4602      	mov	r2, r0
 8001056:	230c      	movs	r3, #12
 8001058:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800105a:	f04f 33ff 	mov.w	r3, #4294967295
 800105e:	e009      	b.n	8001074 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001060:	4b08      	ldr	r3, [pc, #32]	; (8001084 <_sbrk+0x64>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001066:	4b07      	ldr	r3, [pc, #28]	; (8001084 <_sbrk+0x64>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4413      	add	r3, r2
 800106e:	4a05      	ldr	r2, [pc, #20]	; (8001084 <_sbrk+0x64>)
 8001070:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001072:	68fb      	ldr	r3, [r7, #12]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3718      	adds	r7, #24
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	20002800 	.word	0x20002800
 8001080:	00000400 	.word	0x00000400
 8001084:	200001fc 	.word	0x200001fc
 8001088:	20000288 	.word	0x20000288

0800108c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	bc80      	pop	{r7}
 8001096:	4770      	bx	lr

08001098 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001098:	480c      	ldr	r0, [pc, #48]	; (80010cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800109a:	490d      	ldr	r1, [pc, #52]	; (80010d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800109c:	4a0d      	ldr	r2, [pc, #52]	; (80010d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a0:	e002      	b.n	80010a8 <LoopCopyDataInit>

080010a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010a6:	3304      	adds	r3, #4

080010a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010ac:	d3f9      	bcc.n	80010a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ae:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010b0:	4c0a      	ldr	r4, [pc, #40]	; (80010dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80010b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b4:	e001      	b.n	80010ba <LoopFillZerobss>

080010b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b8:	3204      	adds	r2, #4

080010ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010bc:	d3fb      	bcc.n	80010b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010be:	f7ff ffe5 	bl	800108c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010c2:	f001 ff49 	bl	8002f58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010c6:	f7ff fd47 	bl	8000b58 <main>
  bx lr
 80010ca:	4770      	bx	lr
  ldr r0, =_sdata
 80010cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80010d4:	08005938 	.word	0x08005938
  ldr r2, =_sbss
 80010d8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80010dc:	20000284 	.word	0x20000284

080010e0 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010e0:	e7fe      	b.n	80010e0 <CAN1_RX1_IRQHandler>
	...

080010e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e8:	4b08      	ldr	r3, [pc, #32]	; (800110c <HAL_Init+0x28>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a07      	ldr	r2, [pc, #28]	; (800110c <HAL_Init+0x28>)
 80010ee:	f043 0310 	orr.w	r3, r3, #16
 80010f2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010f4:	2003      	movs	r0, #3
 80010f6:	f000 fe4f 	bl	8001d98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010fa:	2000      	movs	r0, #0
 80010fc:	f000 f808 	bl	8001110 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001100:	f7ff fe4e 	bl	8000da0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40022000 	.word	0x40022000

08001110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001118:	4b12      	ldr	r3, [pc, #72]	; (8001164 <HAL_InitTick+0x54>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b12      	ldr	r3, [pc, #72]	; (8001168 <HAL_InitTick+0x58>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	4619      	mov	r1, r3
 8001122:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001126:	fbb3 f3f1 	udiv	r3, r3, r1
 800112a:	fbb2 f3f3 	udiv	r3, r2, r3
 800112e:	4618      	mov	r0, r3
 8001130:	f000 fe67 	bl	8001e02 <HAL_SYSTICK_Config>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e00e      	b.n	800115c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b0f      	cmp	r3, #15
 8001142:	d80a      	bhi.n	800115a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001144:	2200      	movs	r2, #0
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	f04f 30ff 	mov.w	r0, #4294967295
 800114c:	f000 fe2f 	bl	8001dae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001150:	4a06      	ldr	r2, [pc, #24]	; (800116c <HAL_InitTick+0x5c>)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001156:	2300      	movs	r3, #0
 8001158:	e000      	b.n	800115c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
}
 800115c:	4618      	mov	r0, r3
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000000 	.word	0x20000000
 8001168:	20000008 	.word	0x20000008
 800116c:	20000004 	.word	0x20000004

08001170 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001174:	4b05      	ldr	r3, [pc, #20]	; (800118c <HAL_IncTick+0x1c>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	461a      	mov	r2, r3
 800117a:	4b05      	ldr	r3, [pc, #20]	; (8001190 <HAL_IncTick+0x20>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4413      	add	r3, r2
 8001180:	4a03      	ldr	r2, [pc, #12]	; (8001190 <HAL_IncTick+0x20>)
 8001182:	6013      	str	r3, [r2, #0]
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr
 800118c:	20000008 	.word	0x20000008
 8001190:	2000027c 	.word	0x2000027c

08001194 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return uwTick;
 8001198:	4b02      	ldr	r3, [pc, #8]	; (80011a4 <HAL_GetTick+0x10>)
 800119a:	681b      	ldr	r3, [r3, #0]
}
 800119c:	4618      	mov	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr
 80011a4:	2000027c 	.word	0x2000027c

080011a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b0:	f7ff fff0 	bl	8001194 <HAL_GetTick>
 80011b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c0:	d005      	beq.n	80011ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <HAL_Delay+0x40>)
 80011c4:	781b      	ldrb	r3, [r3, #0]
 80011c6:	461a      	mov	r2, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4413      	add	r3, r2
 80011cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ce:	bf00      	nop
 80011d0:	f7ff ffe0 	bl	8001194 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d8f7      	bhi.n	80011d0 <HAL_Delay+0x28>
  {
  }
}
 80011e0:	bf00      	nop
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000008 	.word	0x20000008

080011ec <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011f4:	2300      	movs	r3, #0
 80011f6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80011f8:	2300      	movs	r3, #0
 80011fa:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001200:	2300      	movs	r3, #0
 8001202:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e0be      	b.n	800138c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001218:	2b00      	cmp	r3, #0
 800121a:	d109      	bne.n	8001230 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff fdea 	bl	8000e04 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f000 fc9b 	bl	8001b6c <ADC_ConversionStop_Disable>
 8001236:	4603      	mov	r3, r0
 8001238:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800123e:	f003 0310 	and.w	r3, r3, #16
 8001242:	2b00      	cmp	r3, #0
 8001244:	f040 8099 	bne.w	800137a <HAL_ADC_Init+0x18e>
 8001248:	7dfb      	ldrb	r3, [r7, #23]
 800124a:	2b00      	cmp	r3, #0
 800124c:	f040 8095 	bne.w	800137a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001254:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001258:	f023 0302 	bic.w	r3, r3, #2
 800125c:	f043 0202 	orr.w	r2, r3, #2
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800126c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	7b1b      	ldrb	r3, [r3, #12]
 8001272:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001274:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001276:	68ba      	ldr	r2, [r7, #8]
 8001278:	4313      	orrs	r3, r2
 800127a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001284:	d003      	beq.n	800128e <HAL_ADC_Init+0xa2>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d102      	bne.n	8001294 <HAL_ADC_Init+0xa8>
 800128e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001292:	e000      	b.n	8001296 <HAL_ADC_Init+0xaa>
 8001294:	2300      	movs	r3, #0
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	4313      	orrs	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	7d1b      	ldrb	r3, [r3, #20]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d119      	bne.n	80012d8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	7b1b      	ldrb	r3, [r3, #12]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d109      	bne.n	80012c0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	3b01      	subs	r3, #1
 80012b2:	035a      	lsls	r2, r3, #13
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	e00b      	b.n	80012d8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c4:	f043 0220 	orr.w	r2, r3, #32
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d0:	f043 0201 	orr.w	r2, r3, #1
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	430a      	orrs	r2, r1
 80012ea:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	689a      	ldr	r2, [r3, #8]
 80012f2:	4b28      	ldr	r3, [pc, #160]	; (8001394 <HAL_ADC_Init+0x1a8>)
 80012f4:	4013      	ands	r3, r2
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	6812      	ldr	r2, [r2, #0]
 80012fa:	68b9      	ldr	r1, [r7, #8]
 80012fc:	430b      	orrs	r3, r1
 80012fe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001308:	d003      	beq.n	8001312 <HAL_ADC_Init+0x126>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d104      	bne.n	800131c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	691b      	ldr	r3, [r3, #16]
 8001316:	3b01      	subs	r3, #1
 8001318:	051b      	lsls	r3, r3, #20
 800131a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001322:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	430a      	orrs	r2, r1
 800132e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	689a      	ldr	r2, [r3, #8]
 8001336:	4b18      	ldr	r3, [pc, #96]	; (8001398 <HAL_ADC_Init+0x1ac>)
 8001338:	4013      	ands	r3, r2
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	429a      	cmp	r2, r3
 800133e:	d10b      	bne.n	8001358 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134a:	f023 0303 	bic.w	r3, r3, #3
 800134e:	f043 0201 	orr.w	r2, r3, #1
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001356:	e018      	b.n	800138a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135c:	f023 0312 	bic.w	r3, r3, #18
 8001360:	f043 0210 	orr.w	r2, r3, #16
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800136c:	f043 0201 	orr.w	r2, r3, #1
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001378:	e007      	b.n	800138a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800137e:	f043 0210 	orr.w	r2, r3, #16
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800138a:	7dfb      	ldrb	r3, [r7, #23]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3718      	adds	r7, #24
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	ffe1f7fd 	.word	0xffe1f7fd
 8001398:	ff1f0efe 	.word	0xff1f0efe

0800139c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013a4:	2300      	movs	r3, #0
 80013a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d101      	bne.n	80013b6 <HAL_ADC_Start+0x1a>
 80013b2:	2302      	movs	r3, #2
 80013b4:	e098      	b.n	80014e8 <HAL_ADC_Start+0x14c>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2201      	movs	r2, #1
 80013ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f000 fb7a 	bl	8001ab8 <ADC_Enable>
 80013c4:	4603      	mov	r3, r0
 80013c6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f040 8087 	bne.w	80014de <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013d8:	f023 0301 	bic.w	r3, r3, #1
 80013dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a41      	ldr	r2, [pc, #260]	; (80014f0 <HAL_ADC_Start+0x154>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d105      	bne.n	80013fa <HAL_ADC_Start+0x5e>
 80013ee:	4b41      	ldr	r3, [pc, #260]	; (80014f4 <HAL_ADC_Start+0x158>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d115      	bne.n	8001426 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013fe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001410:	2b00      	cmp	r3, #0
 8001412:	d026      	beq.n	8001462 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001418:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800141c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001424:	e01d      	b.n	8001462 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a2f      	ldr	r2, [pc, #188]	; (80014f4 <HAL_ADC_Start+0x158>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d004      	beq.n	8001446 <HAL_ADC_Start+0xaa>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a2b      	ldr	r2, [pc, #172]	; (80014f0 <HAL_ADC_Start+0x154>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d10d      	bne.n	8001462 <HAL_ADC_Start+0xc6>
 8001446:	4b2b      	ldr	r3, [pc, #172]	; (80014f4 <HAL_ADC_Start+0x158>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800144e:	2b00      	cmp	r3, #0
 8001450:	d007      	beq.n	8001462 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001456:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800145a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001466:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d006      	beq.n	800147c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001472:	f023 0206 	bic.w	r2, r3, #6
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	62da      	str	r2, [r3, #44]	; 0x2c
 800147a:	e002      	b.n	8001482 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f06f 0202 	mvn.w	r2, #2
 8001492:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800149e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80014a2:	d113      	bne.n	80014cc <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80014a8:	4a11      	ldr	r2, [pc, #68]	; (80014f0 <HAL_ADC_Start+0x154>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d105      	bne.n	80014ba <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80014ae:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <HAL_ADC_Start+0x158>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d108      	bne.n	80014cc <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	e00c      	b.n	80014e6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	689a      	ldr	r2, [r3, #8]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	e003      	b.n	80014e6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40012800 	.word	0x40012800
 80014f4:	40012400 	.word	0x40012400

080014f8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80014f8:	b590      	push	{r4, r7, lr}
 80014fa:	b087      	sub	sp, #28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001506:	2300      	movs	r3, #0
 8001508:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 800150a:	2300      	movs	r3, #0
 800150c:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800150e:	f7ff fe41 	bl	8001194 <HAL_GetTick>
 8001512:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151e:	2b00      	cmp	r3, #0
 8001520:	d00b      	beq.n	800153a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001526:	f043 0220 	orr.w	r2, r3, #32
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e0d3      	b.n	80016e2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001544:	2b00      	cmp	r3, #0
 8001546:	d131      	bne.n	80015ac <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001552:	2b00      	cmp	r3, #0
 8001554:	d12a      	bne.n	80015ac <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001556:	e021      	b.n	800159c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800155e:	d01d      	beq.n	800159c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d007      	beq.n	8001576 <HAL_ADC_PollForConversion+0x7e>
 8001566:	f7ff fe15 	bl	8001194 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	429a      	cmp	r2, r3
 8001574:	d212      	bcs.n	800159c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d10b      	bne.n	800159c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001588:	f043 0204 	orr.w	r2, r3, #4
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e0a2      	b.n	80016e2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d0d6      	beq.n	8001558 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80015aa:	e070      	b.n	800168e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80015ac:	4b4f      	ldr	r3, [pc, #316]	; (80016ec <HAL_ADC_PollForConversion+0x1f4>)
 80015ae:	681c      	ldr	r4, [r3, #0]
 80015b0:	2002      	movs	r0, #2
 80015b2:	f001 fa57 	bl	8002a64 <HAL_RCCEx_GetPeriphCLKFreq>
 80015b6:	4603      	mov	r3, r0
 80015b8:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	6919      	ldr	r1, [r3, #16]
 80015c2:	4b4b      	ldr	r3, [pc, #300]	; (80016f0 <HAL_ADC_PollForConversion+0x1f8>)
 80015c4:	400b      	ands	r3, r1
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d118      	bne.n	80015fc <HAL_ADC_PollForConversion+0x104>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	68d9      	ldr	r1, [r3, #12]
 80015d0:	4b48      	ldr	r3, [pc, #288]	; (80016f4 <HAL_ADC_PollForConversion+0x1fc>)
 80015d2:	400b      	ands	r3, r1
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d111      	bne.n	80015fc <HAL_ADC_PollForConversion+0x104>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6919      	ldr	r1, [r3, #16]
 80015de:	4b46      	ldr	r3, [pc, #280]	; (80016f8 <HAL_ADC_PollForConversion+0x200>)
 80015e0:	400b      	ands	r3, r1
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d108      	bne.n	80015f8 <HAL_ADC_PollForConversion+0x100>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	68d9      	ldr	r1, [r3, #12]
 80015ec:	4b43      	ldr	r3, [pc, #268]	; (80016fc <HAL_ADC_PollForConversion+0x204>)
 80015ee:	400b      	ands	r3, r1
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <HAL_ADC_PollForConversion+0x100>
 80015f4:	2314      	movs	r3, #20
 80015f6:	e020      	b.n	800163a <HAL_ADC_PollForConversion+0x142>
 80015f8:	2329      	movs	r3, #41	; 0x29
 80015fa:	e01e      	b.n	800163a <HAL_ADC_PollForConversion+0x142>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6919      	ldr	r1, [r3, #16]
 8001602:	4b3d      	ldr	r3, [pc, #244]	; (80016f8 <HAL_ADC_PollForConversion+0x200>)
 8001604:	400b      	ands	r3, r1
 8001606:	2b00      	cmp	r3, #0
 8001608:	d106      	bne.n	8001618 <HAL_ADC_PollForConversion+0x120>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	68d9      	ldr	r1, [r3, #12]
 8001610:	4b3a      	ldr	r3, [pc, #232]	; (80016fc <HAL_ADC_PollForConversion+0x204>)
 8001612:	400b      	ands	r3, r1
 8001614:	2b00      	cmp	r3, #0
 8001616:	d00d      	beq.n	8001634 <HAL_ADC_PollForConversion+0x13c>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6919      	ldr	r1, [r3, #16]
 800161e:	4b38      	ldr	r3, [pc, #224]	; (8001700 <HAL_ADC_PollForConversion+0x208>)
 8001620:	400b      	ands	r3, r1
 8001622:	2b00      	cmp	r3, #0
 8001624:	d108      	bne.n	8001638 <HAL_ADC_PollForConversion+0x140>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	68d9      	ldr	r1, [r3, #12]
 800162c:	4b34      	ldr	r3, [pc, #208]	; (8001700 <HAL_ADC_PollForConversion+0x208>)
 800162e:	400b      	ands	r3, r1
 8001630:	2b00      	cmp	r3, #0
 8001632:	d101      	bne.n	8001638 <HAL_ADC_PollForConversion+0x140>
 8001634:	2354      	movs	r3, #84	; 0x54
 8001636:	e000      	b.n	800163a <HAL_ADC_PollForConversion+0x142>
 8001638:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800163a:	fb02 f303 	mul.w	r3, r2, r3
 800163e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001640:	e021      	b.n	8001686 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001648:	d01a      	beq.n	8001680 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d007      	beq.n	8001660 <HAL_ADC_PollForConversion+0x168>
 8001650:	f7ff fda0 	bl	8001194 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	683a      	ldr	r2, [r7, #0]
 800165c:	429a      	cmp	r2, r3
 800165e:	d20f      	bcs.n	8001680 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	693a      	ldr	r2, [r7, #16]
 8001664:	429a      	cmp	r2, r3
 8001666:	d90b      	bls.n	8001680 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166c:	f043 0204 	orr.w	r2, r3, #4
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e030      	b.n	80016e2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	3301      	adds	r3, #1
 8001684:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	429a      	cmp	r2, r3
 800168c:	d8d9      	bhi.n	8001642 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f06f 0212 	mvn.w	r2, #18
 8001696:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80016ae:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80016b2:	d115      	bne.n	80016e0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d111      	bne.n	80016e0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d105      	bne.n	80016e0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d8:	f043 0201 	orr.w	r2, r3, #1
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	371c      	adds	r7, #28
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd90      	pop	{r4, r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000000 	.word	0x20000000
 80016f0:	24924924 	.word	0x24924924
 80016f4:	00924924 	.word	0x00924924
 80016f8:	12492492 	.word	0x12492492
 80016fc:	00492492 	.word	0x00492492
 8001700:	00249249 	.word	0x00249249

08001704 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001712:	4618      	mov	r0, r3
 8001714:	370c      	adds	r7, #12
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr

0800171c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f003 0320 	and.w	r3, r3, #32
 800172e:	2b20      	cmp	r3, #32
 8001730:	d140      	bne.n	80017b4 <HAL_ADC_IRQHandler+0x98>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0302 	and.w	r3, r3, #2
 800173c:	2b02      	cmp	r3, #2
 800173e:	d139      	bne.n	80017b4 <HAL_ADC_IRQHandler+0x98>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001744:	f003 0310 	and.w	r3, r3, #16
 8001748:	2b00      	cmp	r3, #0
 800174a:	d105      	bne.n	8001758 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001750:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8001762:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001766:	d11d      	bne.n	80017a4 <HAL_ADC_IRQHandler+0x88>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800176c:	2b00      	cmp	r3, #0
 800176e:	d119      	bne.n	80017a4 <HAL_ADC_IRQHandler+0x88>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f022 0220 	bic.w	r2, r2, #32
 800177e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001784:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001790:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d105      	bne.n	80017a4 <HAL_ADC_IRQHandler+0x88>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179c:	f043 0201 	orr.w	r2, r3, #1
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f000 f87c 	bl	80018a2 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f06f 0212 	mvn.w	r2, #18
 80017b2:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017be:	2b80      	cmp	r3, #128	; 0x80
 80017c0:	d14f      	bne.n	8001862 <HAL_ADC_IRQHandler+0x146>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b04      	cmp	r3, #4
 80017ce:	d148      	bne.n	8001862 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d4:	f003 0310 	and.w	r3, r3, #16
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d105      	bne.n	80017e8 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e0:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80017f2:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80017f6:	d012      	beq.n	800181e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001802:	2b00      	cmp	r3, #0
 8001804:	d125      	bne.n	8001852 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001810:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8001814:	d11d      	bne.n	8001852 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800181a:	2b00      	cmp	r3, #0
 800181c:	d119      	bne.n	8001852 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800182c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001832:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001842:	2b00      	cmp	r3, #0
 8001844:	d105      	bne.n	8001852 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184a:	f043 0201 	orr.w	r2, r3, #1
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001852:	6878      	ldr	r0, [r7, #4]
 8001854:	f000 f9cb 	bl	8001bee <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f06f 020c 	mvn.w	r2, #12
 8001860:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800186c:	2b40      	cmp	r3, #64	; 0x40
 800186e:	d114      	bne.n	800189a <HAL_ADC_IRQHandler+0x17e>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	2b01      	cmp	r3, #1
 800187c:	d10d      	bne.n	800189a <HAL_ADC_IRQHandler+0x17e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001882:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800188a:	6878      	ldr	r0, [r7, #4]
 800188c:	f000 f812 	bl	80018b4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f06f 0201 	mvn.w	r2, #1
 8001898:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80018a2:	b480      	push	{r7}
 80018a4:	b083      	sub	sp, #12
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr

080018b4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr
	...

080018c8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018d2:	2300      	movs	r3, #0
 80018d4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80018d6:	2300      	movs	r3, #0
 80018d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d101      	bne.n	80018e8 <HAL_ADC_ConfigChannel+0x20>
 80018e4:	2302      	movs	r3, #2
 80018e6:	e0dc      	b.n	8001aa2 <HAL_ADC_ConfigChannel+0x1da>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b06      	cmp	r3, #6
 80018f6:	d81c      	bhi.n	8001932 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	3b05      	subs	r3, #5
 800190a:	221f      	movs	r2, #31
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	4019      	ands	r1, r3
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	6818      	ldr	r0, [r3, #0]
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685a      	ldr	r2, [r3, #4]
 800191c:	4613      	mov	r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	3b05      	subs	r3, #5
 8001924:	fa00 f203 	lsl.w	r2, r0, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	430a      	orrs	r2, r1
 800192e:	635a      	str	r2, [r3, #52]	; 0x34
 8001930:	e03c      	b.n	80019ac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b0c      	cmp	r3, #12
 8001938:	d81c      	bhi.n	8001974 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	4613      	mov	r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4413      	add	r3, r2
 800194a:	3b23      	subs	r3, #35	; 0x23
 800194c:	221f      	movs	r2, #31
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43db      	mvns	r3, r3
 8001954:	4019      	ands	r1, r3
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	6818      	ldr	r0, [r3, #0]
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	4613      	mov	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	3b23      	subs	r3, #35	; 0x23
 8001966:	fa00 f203 	lsl.w	r2, r0, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	430a      	orrs	r2, r1
 8001970:	631a      	str	r2, [r3, #48]	; 0x30
 8001972:	e01b      	b.n	80019ac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	4613      	mov	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	3b41      	subs	r3, #65	; 0x41
 8001986:	221f      	movs	r2, #31
 8001988:	fa02 f303 	lsl.w	r3, r2, r3
 800198c:	43db      	mvns	r3, r3
 800198e:	4019      	ands	r1, r3
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	6818      	ldr	r0, [r3, #0]
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	4613      	mov	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4413      	add	r3, r2
 800199e:	3b41      	subs	r3, #65	; 0x41
 80019a0:	fa00 f203 	lsl.w	r2, r0, r3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	430a      	orrs	r2, r1
 80019aa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b09      	cmp	r3, #9
 80019b2:	d91c      	bls.n	80019ee <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68d9      	ldr	r1, [r3, #12]
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	4613      	mov	r3, r2
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	4413      	add	r3, r2
 80019c4:	3b1e      	subs	r3, #30
 80019c6:	2207      	movs	r2, #7
 80019c8:	fa02 f303 	lsl.w	r3, r2, r3
 80019cc:	43db      	mvns	r3, r3
 80019ce:	4019      	ands	r1, r3
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	6898      	ldr	r0, [r3, #8]
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4613      	mov	r3, r2
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	4413      	add	r3, r2
 80019de:	3b1e      	subs	r3, #30
 80019e0:	fa00 f203 	lsl.w	r2, r0, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	60da      	str	r2, [r3, #12]
 80019ec:	e019      	b.n	8001a22 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	6919      	ldr	r1, [r3, #16]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4613      	mov	r3, r2
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	4413      	add	r3, r2
 80019fe:	2207      	movs	r2, #7
 8001a00:	fa02 f303 	lsl.w	r3, r2, r3
 8001a04:	43db      	mvns	r3, r3
 8001a06:	4019      	ands	r1, r3
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	6898      	ldr	r0, [r3, #8]
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	681a      	ldr	r2, [r3, #0]
 8001a10:	4613      	mov	r3, r2
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	4413      	add	r3, r2
 8001a16:	fa00 f203 	lsl.w	r2, r0, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2b10      	cmp	r3, #16
 8001a28:	d003      	beq.n	8001a32 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a2e:	2b11      	cmp	r3, #17
 8001a30:	d132      	bne.n	8001a98 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a1d      	ldr	r2, [pc, #116]	; (8001aac <HAL_ADC_ConfigChannel+0x1e4>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d125      	bne.n	8001a88 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d126      	bne.n	8001a98 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001a58:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2b10      	cmp	r3, #16
 8001a60:	d11a      	bne.n	8001a98 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a62:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a13      	ldr	r2, [pc, #76]	; (8001ab4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001a68:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6c:	0c9a      	lsrs	r2, r3, #18
 8001a6e:	4613      	mov	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4413      	add	r3, r2
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a78:	e002      	b.n	8001a80 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1f9      	bne.n	8001a7a <HAL_ADC_ConfigChannel+0x1b2>
 8001a86:	e007      	b.n	8001a98 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a8c:	f043 0220 	orr.w	r2, r3, #32
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3714      	adds	r7, #20
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bc80      	pop	{r7}
 8001aaa:	4770      	bx	lr
 8001aac:	40012400 	.word	0x40012400
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	431bde83 	.word	0x431bde83

08001ab8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d040      	beq.n	8001b58 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	689a      	ldr	r2, [r3, #8]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f042 0201 	orr.w	r2, r2, #1
 8001ae4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ae6:	4b1f      	ldr	r3, [pc, #124]	; (8001b64 <ADC_Enable+0xac>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a1f      	ldr	r2, [pc, #124]	; (8001b68 <ADC_Enable+0xb0>)
 8001aec:	fba2 2303 	umull	r2, r3, r2, r3
 8001af0:	0c9b      	lsrs	r3, r3, #18
 8001af2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001af4:	e002      	b.n	8001afc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	3b01      	subs	r3, #1
 8001afa:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1f9      	bne.n	8001af6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b02:	f7ff fb47 	bl	8001194 <HAL_GetTick>
 8001b06:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001b08:	e01f      	b.n	8001b4a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b0a:	f7ff fb43 	bl	8001194 <HAL_GetTick>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	2b02      	cmp	r3, #2
 8001b16:	d918      	bls.n	8001b4a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d011      	beq.n	8001b4a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2a:	f043 0210 	orr.w	r2, r3, #16
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b36:	f043 0201 	orr.w	r2, r3, #1
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e007      	b.n	8001b5a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d1d8      	bne.n	8001b0a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	20000000 	.word	0x20000000
 8001b68:	431bde83 	.word	0x431bde83

08001b6c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d12e      	bne.n	8001be4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f022 0201 	bic.w	r2, r2, #1
 8001b94:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b96:	f7ff fafd 	bl	8001194 <HAL_GetTick>
 8001b9a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b9c:	e01b      	b.n	8001bd6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b9e:	f7ff faf9 	bl	8001194 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d914      	bls.n	8001bd6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d10d      	bne.n	8001bd6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bbe:	f043 0210 	orr.w	r2, r3, #16
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bca:	f043 0201 	orr.w	r2, r3, #1
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e007      	b.n	8001be6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d0dc      	beq.n	8001b9e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}

08001bee <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr

08001c00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c10:	4b0c      	ldr	r3, [pc, #48]	; (8001c44 <__NVIC_SetPriorityGrouping+0x44>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c16:	68ba      	ldr	r2, [r7, #8]
 8001c18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c32:	4a04      	ldr	r2, [pc, #16]	; (8001c44 <__NVIC_SetPriorityGrouping+0x44>)
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	60d3      	str	r3, [r2, #12]
}
 8001c38:	bf00      	nop
 8001c3a:	3714      	adds	r7, #20
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	e000ed00 	.word	0xe000ed00

08001c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c4c:	4b04      	ldr	r3, [pc, #16]	; (8001c60 <__NVIC_GetPriorityGrouping+0x18>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	0a1b      	lsrs	r3, r3, #8
 8001c52:	f003 0307 	and.w	r3, r3, #7
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bc80      	pop	{r7}
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	db0b      	blt.n	8001c8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	f003 021f 	and.w	r2, r3, #31
 8001c7c:	4906      	ldr	r1, [pc, #24]	; (8001c98 <__NVIC_EnableIRQ+0x34>)
 8001c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c82:	095b      	lsrs	r3, r3, #5
 8001c84:	2001      	movs	r0, #1
 8001c86:	fa00 f202 	lsl.w	r2, r0, r2
 8001c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bc80      	pop	{r7}
 8001c96:	4770      	bx	lr
 8001c98:	e000e100 	.word	0xe000e100

08001c9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	6039      	str	r1, [r7, #0]
 8001ca6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	db0a      	blt.n	8001cc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	490c      	ldr	r1, [pc, #48]	; (8001ce8 <__NVIC_SetPriority+0x4c>)
 8001cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cba:	0112      	lsls	r2, r2, #4
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	440b      	add	r3, r1
 8001cc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cc4:	e00a      	b.n	8001cdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	b2da      	uxtb	r2, r3
 8001cca:	4908      	ldr	r1, [pc, #32]	; (8001cec <__NVIC_SetPriority+0x50>)
 8001ccc:	79fb      	ldrb	r3, [r7, #7]
 8001cce:	f003 030f 	and.w	r3, r3, #15
 8001cd2:	3b04      	subs	r3, #4
 8001cd4:	0112      	lsls	r2, r2, #4
 8001cd6:	b2d2      	uxtb	r2, r2
 8001cd8:	440b      	add	r3, r1
 8001cda:	761a      	strb	r2, [r3, #24]
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bc80      	pop	{r7}
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	e000e100 	.word	0xe000e100
 8001cec:	e000ed00 	.word	0xe000ed00

08001cf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b089      	sub	sp, #36	; 0x24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	f003 0307 	and.w	r3, r3, #7
 8001d02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	f1c3 0307 	rsb	r3, r3, #7
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	bf28      	it	cs
 8001d0e:	2304      	movcs	r3, #4
 8001d10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	3304      	adds	r3, #4
 8001d16:	2b06      	cmp	r3, #6
 8001d18:	d902      	bls.n	8001d20 <NVIC_EncodePriority+0x30>
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	3b03      	subs	r3, #3
 8001d1e:	e000      	b.n	8001d22 <NVIC_EncodePriority+0x32>
 8001d20:	2300      	movs	r3, #0
 8001d22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d24:	f04f 32ff 	mov.w	r2, #4294967295
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43da      	mvns	r2, r3
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	401a      	ands	r2, r3
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d38:	f04f 31ff 	mov.w	r1, #4294967295
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d42:	43d9      	mvns	r1, r3
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d48:	4313      	orrs	r3, r2
         );
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3724      	adds	r7, #36	; 0x24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr

08001d54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d64:	d301      	bcc.n	8001d6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d66:	2301      	movs	r3, #1
 8001d68:	e00f      	b.n	8001d8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d6a:	4a0a      	ldr	r2, [pc, #40]	; (8001d94 <SysTick_Config+0x40>)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d72:	210f      	movs	r1, #15
 8001d74:	f04f 30ff 	mov.w	r0, #4294967295
 8001d78:	f7ff ff90 	bl	8001c9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d7c:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <SysTick_Config+0x40>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d82:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <SysTick_Config+0x40>)
 8001d84:	2207      	movs	r2, #7
 8001d86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	e000e010 	.word	0xe000e010

08001d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	f7ff ff2d 	bl	8001c00 <__NVIC_SetPriorityGrouping>
}
 8001da6:	bf00      	nop
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}

08001dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dae:	b580      	push	{r7, lr}
 8001db0:	b086      	sub	sp, #24
 8001db2:	af00      	add	r7, sp, #0
 8001db4:	4603      	mov	r3, r0
 8001db6:	60b9      	str	r1, [r7, #8]
 8001db8:	607a      	str	r2, [r7, #4]
 8001dba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dc0:	f7ff ff42 	bl	8001c48 <__NVIC_GetPriorityGrouping>
 8001dc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	68b9      	ldr	r1, [r7, #8]
 8001dca:	6978      	ldr	r0, [r7, #20]
 8001dcc:	f7ff ff90 	bl	8001cf0 <NVIC_EncodePriority>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dd6:	4611      	mov	r1, r2
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff ff5f 	bl	8001c9c <__NVIC_SetPriority>
}
 8001dde:	bf00      	nop
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	4603      	mov	r3, r0
 8001dee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff35 	bl	8001c64 <__NVIC_EnableIRQ>
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f7ff ffa2 	bl	8001d54 <SysTick_Config>
 8001e10:	4603      	mov	r3, r0
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b08b      	sub	sp, #44	; 0x2c
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e26:	2300      	movs	r3, #0
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e2e:	e121      	b.n	8002074 <HAL_GPIO_Init+0x258>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e30:	2201      	movs	r2, #1
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	69fa      	ldr	r2, [r7, #28]
 8001e40:	4013      	ands	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	f040 8110 	bne.w	800206e <HAL_GPIO_Init+0x252>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	2b12      	cmp	r3, #18
 8001e54:	d034      	beq.n	8001ec0 <HAL_GPIO_Init+0xa4>
 8001e56:	2b12      	cmp	r3, #18
 8001e58:	d80d      	bhi.n	8001e76 <HAL_GPIO_Init+0x5a>
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d02b      	beq.n	8001eb6 <HAL_GPIO_Init+0x9a>
 8001e5e:	2b02      	cmp	r3, #2
 8001e60:	d804      	bhi.n	8001e6c <HAL_GPIO_Init+0x50>
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d031      	beq.n	8001eca <HAL_GPIO_Init+0xae>
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d01c      	beq.n	8001ea4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e6a:	e048      	b.n	8001efe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001e6c:	2b03      	cmp	r3, #3
 8001e6e:	d043      	beq.n	8001ef8 <HAL_GPIO_Init+0xdc>
 8001e70:	2b11      	cmp	r3, #17
 8001e72:	d01b      	beq.n	8001eac <HAL_GPIO_Init+0x90>
          break;
 8001e74:	e043      	b.n	8001efe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001e76:	4a86      	ldr	r2, [pc, #536]	; (8002090 <HAL_GPIO_Init+0x274>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d026      	beq.n	8001eca <HAL_GPIO_Init+0xae>
 8001e7c:	4a84      	ldr	r2, [pc, #528]	; (8002090 <HAL_GPIO_Init+0x274>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d806      	bhi.n	8001e90 <HAL_GPIO_Init+0x74>
 8001e82:	4a84      	ldr	r2, [pc, #528]	; (8002094 <HAL_GPIO_Init+0x278>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d020      	beq.n	8001eca <HAL_GPIO_Init+0xae>
 8001e88:	4a83      	ldr	r2, [pc, #524]	; (8002098 <HAL_GPIO_Init+0x27c>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d01d      	beq.n	8001eca <HAL_GPIO_Init+0xae>
          break;
 8001e8e:	e036      	b.n	8001efe <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001e90:	4a82      	ldr	r2, [pc, #520]	; (800209c <HAL_GPIO_Init+0x280>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d019      	beq.n	8001eca <HAL_GPIO_Init+0xae>
 8001e96:	4a82      	ldr	r2, [pc, #520]	; (80020a0 <HAL_GPIO_Init+0x284>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d016      	beq.n	8001eca <HAL_GPIO_Init+0xae>
 8001e9c:	4a81      	ldr	r2, [pc, #516]	; (80020a4 <HAL_GPIO_Init+0x288>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d013      	beq.n	8001eca <HAL_GPIO_Init+0xae>
          break;
 8001ea2:	e02c      	b.n	8001efe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	623b      	str	r3, [r7, #32]
          break;
 8001eaa:	e028      	b.n	8001efe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	3304      	adds	r3, #4
 8001eb2:	623b      	str	r3, [r7, #32]
          break;
 8001eb4:	e023      	b.n	8001efe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	3308      	adds	r3, #8
 8001ebc:	623b      	str	r3, [r7, #32]
          break;
 8001ebe:	e01e      	b.n	8001efe <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	330c      	adds	r3, #12
 8001ec6:	623b      	str	r3, [r7, #32]
          break;
 8001ec8:	e019      	b.n	8001efe <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	689b      	ldr	r3, [r3, #8]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d102      	bne.n	8001ed8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ed2:	2304      	movs	r3, #4
 8001ed4:	623b      	str	r3, [r7, #32]
          break;
 8001ed6:	e012      	b.n	8001efe <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d105      	bne.n	8001eec <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ee0:	2308      	movs	r3, #8
 8001ee2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	69fa      	ldr	r2, [r7, #28]
 8001ee8:	611a      	str	r2, [r3, #16]
          break;
 8001eea:	e008      	b.n	8001efe <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001eec:	2308      	movs	r3, #8
 8001eee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69fa      	ldr	r2, [r7, #28]
 8001ef4:	615a      	str	r2, [r3, #20]
          break;
 8001ef6:	e002      	b.n	8001efe <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	623b      	str	r3, [r7, #32]
          break;
 8001efc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	2bff      	cmp	r3, #255	; 0xff
 8001f02:	d801      	bhi.n	8001f08 <HAL_GPIO_Init+0xec>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	e001      	b.n	8001f0c <HAL_GPIO_Init+0xf0>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3304      	adds	r3, #4
 8001f0c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	2bff      	cmp	r3, #255	; 0xff
 8001f12:	d802      	bhi.n	8001f1a <HAL_GPIO_Init+0xfe>
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	e002      	b.n	8001f20 <HAL_GPIO_Init+0x104>
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	3b08      	subs	r3, #8
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	210f      	movs	r1, #15
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	401a      	ands	r2, r3
 8001f32:	6a39      	ldr	r1, [r7, #32]
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	fa01 f303 	lsl.w	r3, r1, r3
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 8090 	beq.w	800206e <HAL_GPIO_Init+0x252>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f4e:	4b56      	ldr	r3, [pc, #344]	; (80020a8 <HAL_GPIO_Init+0x28c>)
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	4a55      	ldr	r2, [pc, #340]	; (80020a8 <HAL_GPIO_Init+0x28c>)
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	6193      	str	r3, [r2, #24]
 8001f5a:	4b53      	ldr	r3, [pc, #332]	; (80020a8 <HAL_GPIO_Init+0x28c>)
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	60bb      	str	r3, [r7, #8]
 8001f64:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f66:	4a51      	ldr	r2, [pc, #324]	; (80020ac <HAL_GPIO_Init+0x290>)
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	089b      	lsrs	r3, r3, #2
 8001f6c:	3302      	adds	r3, #2
 8001f6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f72:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f76:	f003 0303 	and.w	r3, r3, #3
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	220f      	movs	r2, #15
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	43db      	mvns	r3, r3
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	4013      	ands	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a48      	ldr	r2, [pc, #288]	; (80020b0 <HAL_GPIO_Init+0x294>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d00d      	beq.n	8001fae <HAL_GPIO_Init+0x192>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a47      	ldr	r2, [pc, #284]	; (80020b4 <HAL_GPIO_Init+0x298>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d007      	beq.n	8001faa <HAL_GPIO_Init+0x18e>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a46      	ldr	r2, [pc, #280]	; (80020b8 <HAL_GPIO_Init+0x29c>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d101      	bne.n	8001fa6 <HAL_GPIO_Init+0x18a>
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	e004      	b.n	8001fb0 <HAL_GPIO_Init+0x194>
 8001fa6:	2303      	movs	r3, #3
 8001fa8:	e002      	b.n	8001fb0 <HAL_GPIO_Init+0x194>
 8001faa:	2301      	movs	r3, #1
 8001fac:	e000      	b.n	8001fb0 <HAL_GPIO_Init+0x194>
 8001fae:	2300      	movs	r3, #0
 8001fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fb2:	f002 0203 	and.w	r2, r2, #3
 8001fb6:	0092      	lsls	r2, r2, #2
 8001fb8:	4093      	lsls	r3, r2
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001fc0:	493a      	ldr	r1, [pc, #232]	; (80020ac <HAL_GPIO_Init+0x290>)
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	089b      	lsrs	r3, r3, #2
 8001fc6:	3302      	adds	r3, #2
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d006      	beq.n	8001fe8 <HAL_GPIO_Init+0x1cc>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fda:	4b38      	ldr	r3, [pc, #224]	; (80020bc <HAL_GPIO_Init+0x2a0>)
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	4937      	ldr	r1, [pc, #220]	; (80020bc <HAL_GPIO_Init+0x2a0>)
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	600b      	str	r3, [r1, #0]
 8001fe6:	e006      	b.n	8001ff6 <HAL_GPIO_Init+0x1da>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fe8:	4b34      	ldr	r3, [pc, #208]	; (80020bc <HAL_GPIO_Init+0x2a0>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	4932      	ldr	r1, [pc, #200]	; (80020bc <HAL_GPIO_Init+0x2a0>)
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d006      	beq.n	8002010 <HAL_GPIO_Init+0x1f4>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002002:	4b2e      	ldr	r3, [pc, #184]	; (80020bc <HAL_GPIO_Init+0x2a0>)
 8002004:	685a      	ldr	r2, [r3, #4]
 8002006:	492d      	ldr	r1, [pc, #180]	; (80020bc <HAL_GPIO_Init+0x2a0>)
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	4313      	orrs	r3, r2
 800200c:	604b      	str	r3, [r1, #4]
 800200e:	e006      	b.n	800201e <HAL_GPIO_Init+0x202>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002010:	4b2a      	ldr	r3, [pc, #168]	; (80020bc <HAL_GPIO_Init+0x2a0>)
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	43db      	mvns	r3, r3
 8002018:	4928      	ldr	r1, [pc, #160]	; (80020bc <HAL_GPIO_Init+0x2a0>)
 800201a:	4013      	ands	r3, r2
 800201c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002026:	2b00      	cmp	r3, #0
 8002028:	d006      	beq.n	8002038 <HAL_GPIO_Init+0x21c>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800202a:	4b24      	ldr	r3, [pc, #144]	; (80020bc <HAL_GPIO_Init+0x2a0>)
 800202c:	689a      	ldr	r2, [r3, #8]
 800202e:	4923      	ldr	r1, [pc, #140]	; (80020bc <HAL_GPIO_Init+0x2a0>)
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	4313      	orrs	r3, r2
 8002034:	608b      	str	r3, [r1, #8]
 8002036:	e006      	b.n	8002046 <HAL_GPIO_Init+0x22a>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002038:	4b20      	ldr	r3, [pc, #128]	; (80020bc <HAL_GPIO_Init+0x2a0>)
 800203a:	689a      	ldr	r2, [r3, #8]
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	43db      	mvns	r3, r3
 8002040:	491e      	ldr	r1, [pc, #120]	; (80020bc <HAL_GPIO_Init+0x2a0>)
 8002042:	4013      	ands	r3, r2
 8002044:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d006      	beq.n	8002060 <HAL_GPIO_Init+0x244>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002052:	4b1a      	ldr	r3, [pc, #104]	; (80020bc <HAL_GPIO_Init+0x2a0>)
 8002054:	68da      	ldr	r2, [r3, #12]
 8002056:	4919      	ldr	r1, [pc, #100]	; (80020bc <HAL_GPIO_Init+0x2a0>)
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	4313      	orrs	r3, r2
 800205c:	60cb      	str	r3, [r1, #12]
 800205e:	e006      	b.n	800206e <HAL_GPIO_Init+0x252>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002060:	4b16      	ldr	r3, [pc, #88]	; (80020bc <HAL_GPIO_Init+0x2a0>)
 8002062:	68da      	ldr	r2, [r3, #12]
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	43db      	mvns	r3, r3
 8002068:	4914      	ldr	r1, [pc, #80]	; (80020bc <HAL_GPIO_Init+0x2a0>)
 800206a:	4013      	ands	r3, r2
 800206c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800206e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002070:	3301      	adds	r3, #1
 8002072:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	fa22 f303 	lsr.w	r3, r2, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	f47f aed6 	bne.w	8001e30 <HAL_GPIO_Init+0x14>
  }
}
 8002084:	bf00      	nop
 8002086:	372c      	adds	r7, #44	; 0x2c
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	10210000 	.word	0x10210000
 8002094:	10110000 	.word	0x10110000
 8002098:	10120000 	.word	0x10120000
 800209c:	10310000 	.word	0x10310000
 80020a0:	10320000 	.word	0x10320000
 80020a4:	10220000 	.word	0x10220000
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40010000 	.word	0x40010000
 80020b0:	40010800 	.word	0x40010800
 80020b4:	40010c00 	.word	0x40010c00
 80020b8:	40011000 	.word	0x40011000
 80020bc:	40010400 	.word	0x40010400

080020c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e26c      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 8087 	beq.w	80021ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020e0:	4b92      	ldr	r3, [pc, #584]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f003 030c 	and.w	r3, r3, #12
 80020e8:	2b04      	cmp	r3, #4
 80020ea:	d00c      	beq.n	8002106 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020ec:	4b8f      	ldr	r3, [pc, #572]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 030c 	and.w	r3, r3, #12
 80020f4:	2b08      	cmp	r3, #8
 80020f6:	d112      	bne.n	800211e <HAL_RCC_OscConfig+0x5e>
 80020f8:	4b8c      	ldr	r3, [pc, #560]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002104:	d10b      	bne.n	800211e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002106:	4b89      	ldr	r3, [pc, #548]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d06c      	beq.n	80021ec <HAL_RCC_OscConfig+0x12c>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d168      	bne.n	80021ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e246      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002126:	d106      	bne.n	8002136 <HAL_RCC_OscConfig+0x76>
 8002128:	4b80      	ldr	r3, [pc, #512]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a7f      	ldr	r2, [pc, #508]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 800212e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002132:	6013      	str	r3, [r2, #0]
 8002134:	e02e      	b.n	8002194 <HAL_RCC_OscConfig+0xd4>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10c      	bne.n	8002158 <HAL_RCC_OscConfig+0x98>
 800213e:	4b7b      	ldr	r3, [pc, #492]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a7a      	ldr	r2, [pc, #488]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002144:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002148:	6013      	str	r3, [r2, #0]
 800214a:	4b78      	ldr	r3, [pc, #480]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a77      	ldr	r2, [pc, #476]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002150:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	e01d      	b.n	8002194 <HAL_RCC_OscConfig+0xd4>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002160:	d10c      	bne.n	800217c <HAL_RCC_OscConfig+0xbc>
 8002162:	4b72      	ldr	r3, [pc, #456]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a71      	ldr	r2, [pc, #452]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002168:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800216c:	6013      	str	r3, [r2, #0]
 800216e:	4b6f      	ldr	r3, [pc, #444]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a6e      	ldr	r2, [pc, #440]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	e00b      	b.n	8002194 <HAL_RCC_OscConfig+0xd4>
 800217c:	4b6b      	ldr	r3, [pc, #428]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a6a      	ldr	r2, [pc, #424]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002182:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002186:	6013      	str	r3, [r2, #0]
 8002188:	4b68      	ldr	r3, [pc, #416]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a67      	ldr	r2, [pc, #412]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 800218e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002192:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d013      	beq.n	80021c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219c:	f7fe fffa 	bl	8001194 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021a4:	f7fe fff6 	bl	8001194 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b64      	cmp	r3, #100	; 0x64
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e1fa      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021b6:	4b5d      	ldr	r3, [pc, #372]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d0f0      	beq.n	80021a4 <HAL_RCC_OscConfig+0xe4>
 80021c2:	e014      	b.n	80021ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c4:	f7fe ffe6 	bl	8001194 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021cc:	f7fe ffe2 	bl	8001194 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b64      	cmp	r3, #100	; 0x64
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e1e6      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021de:	4b53      	ldr	r3, [pc, #332]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f0      	bne.n	80021cc <HAL_RCC_OscConfig+0x10c>
 80021ea:	e000      	b.n	80021ee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d063      	beq.n	80022c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021fa:	4b4c      	ldr	r3, [pc, #304]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00b      	beq.n	800221e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002206:	4b49      	ldr	r3, [pc, #292]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f003 030c 	and.w	r3, r3, #12
 800220e:	2b08      	cmp	r3, #8
 8002210:	d11c      	bne.n	800224c <HAL_RCC_OscConfig+0x18c>
 8002212:	4b46      	ldr	r3, [pc, #280]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d116      	bne.n	800224c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800221e:	4b43      	ldr	r3, [pc, #268]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d005      	beq.n	8002236 <HAL_RCC_OscConfig+0x176>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d001      	beq.n	8002236 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e1ba      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002236:	4b3d      	ldr	r3, [pc, #244]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	4939      	ldr	r1, [pc, #228]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002246:	4313      	orrs	r3, r2
 8002248:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800224a:	e03a      	b.n	80022c2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d020      	beq.n	8002296 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002254:	4b36      	ldr	r3, [pc, #216]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 8002256:	2201      	movs	r2, #1
 8002258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225a:	f7fe ff9b 	bl	8001194 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002262:	f7fe ff97 	bl	8001194 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e19b      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002274:	4b2d      	ldr	r3, [pc, #180]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0f0      	beq.n	8002262 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002280:	4b2a      	ldr	r3, [pc, #168]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	695b      	ldr	r3, [r3, #20]
 800228c:	00db      	lsls	r3, r3, #3
 800228e:	4927      	ldr	r1, [pc, #156]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 8002290:	4313      	orrs	r3, r2
 8002292:	600b      	str	r3, [r1, #0]
 8002294:	e015      	b.n	80022c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002296:	4b26      	ldr	r3, [pc, #152]	; (8002330 <HAL_RCC_OscConfig+0x270>)
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229c:	f7fe ff7a 	bl	8001194 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022a4:	f7fe ff76 	bl	8001194 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e17a      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022b6:	4b1d      	ldr	r3, [pc, #116]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f0      	bne.n	80022a4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0308 	and.w	r3, r3, #8
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d03a      	beq.n	8002344 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d019      	beq.n	800230a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022d6:	4b17      	ldr	r3, [pc, #92]	; (8002334 <HAL_RCC_OscConfig+0x274>)
 80022d8:	2201      	movs	r2, #1
 80022da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022dc:	f7fe ff5a 	bl	8001194 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e4:	f7fe ff56 	bl	8001194 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e15a      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022f6:	4b0d      	ldr	r3, [pc, #52]	; (800232c <HAL_RCC_OscConfig+0x26c>)
 80022f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0f0      	beq.n	80022e4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002302:	2001      	movs	r0, #1
 8002304:	f000 fada 	bl	80028bc <RCC_Delay>
 8002308:	e01c      	b.n	8002344 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800230a:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <HAL_RCC_OscConfig+0x274>)
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002310:	f7fe ff40 	bl	8001194 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002316:	e00f      	b.n	8002338 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002318:	f7fe ff3c 	bl	8001194 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d908      	bls.n	8002338 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e140      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
 800232a:	bf00      	nop
 800232c:	40021000 	.word	0x40021000
 8002330:	42420000 	.word	0x42420000
 8002334:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002338:	4b9e      	ldr	r3, [pc, #632]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 800233a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d1e9      	bne.n	8002318 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 80a6 	beq.w	800249e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002352:	2300      	movs	r3, #0
 8002354:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002356:	4b97      	ldr	r3, [pc, #604]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10d      	bne.n	800237e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002362:	4b94      	ldr	r3, [pc, #592]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	4a93      	ldr	r2, [pc, #588]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800236c:	61d3      	str	r3, [r2, #28]
 800236e:	4b91      	ldr	r3, [pc, #580]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002376:	60bb      	str	r3, [r7, #8]
 8002378:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800237a:	2301      	movs	r3, #1
 800237c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237e:	4b8e      	ldr	r3, [pc, #568]	; (80025b8 <HAL_RCC_OscConfig+0x4f8>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002386:	2b00      	cmp	r3, #0
 8002388:	d118      	bne.n	80023bc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800238a:	4b8b      	ldr	r3, [pc, #556]	; (80025b8 <HAL_RCC_OscConfig+0x4f8>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a8a      	ldr	r2, [pc, #552]	; (80025b8 <HAL_RCC_OscConfig+0x4f8>)
 8002390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002394:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002396:	f7fe fefd 	bl	8001194 <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800239e:	f7fe fef9 	bl	8001194 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b64      	cmp	r3, #100	; 0x64
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e0fd      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b0:	4b81      	ldr	r3, [pc, #516]	; (80025b8 <HAL_RCC_OscConfig+0x4f8>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0f0      	beq.n	800239e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d106      	bne.n	80023d2 <HAL_RCC_OscConfig+0x312>
 80023c4:	4b7b      	ldr	r3, [pc, #492]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	4a7a      	ldr	r2, [pc, #488]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	6213      	str	r3, [r2, #32]
 80023d0:	e02d      	b.n	800242e <HAL_RCC_OscConfig+0x36e>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10c      	bne.n	80023f4 <HAL_RCC_OscConfig+0x334>
 80023da:	4b76      	ldr	r3, [pc, #472]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 80023dc:	6a1b      	ldr	r3, [r3, #32]
 80023de:	4a75      	ldr	r2, [pc, #468]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 80023e0:	f023 0301 	bic.w	r3, r3, #1
 80023e4:	6213      	str	r3, [r2, #32]
 80023e6:	4b73      	ldr	r3, [pc, #460]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	4a72      	ldr	r2, [pc, #456]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 80023ec:	f023 0304 	bic.w	r3, r3, #4
 80023f0:	6213      	str	r3, [r2, #32]
 80023f2:	e01c      	b.n	800242e <HAL_RCC_OscConfig+0x36e>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	2b05      	cmp	r3, #5
 80023fa:	d10c      	bne.n	8002416 <HAL_RCC_OscConfig+0x356>
 80023fc:	4b6d      	ldr	r3, [pc, #436]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	4a6c      	ldr	r2, [pc, #432]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002402:	f043 0304 	orr.w	r3, r3, #4
 8002406:	6213      	str	r3, [r2, #32]
 8002408:	4b6a      	ldr	r3, [pc, #424]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	4a69      	ldr	r2, [pc, #420]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 800240e:	f043 0301 	orr.w	r3, r3, #1
 8002412:	6213      	str	r3, [r2, #32]
 8002414:	e00b      	b.n	800242e <HAL_RCC_OscConfig+0x36e>
 8002416:	4b67      	ldr	r3, [pc, #412]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	4a66      	ldr	r2, [pc, #408]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 800241c:	f023 0301 	bic.w	r3, r3, #1
 8002420:	6213      	str	r3, [r2, #32]
 8002422:	4b64      	ldr	r3, [pc, #400]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	4a63      	ldr	r2, [pc, #396]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002428:	f023 0304 	bic.w	r3, r3, #4
 800242c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d015      	beq.n	8002462 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002436:	f7fe fead 	bl	8001194 <HAL_GetTick>
 800243a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800243c:	e00a      	b.n	8002454 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243e:	f7fe fea9 	bl	8001194 <HAL_GetTick>
 8002442:	4602      	mov	r2, r0
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	1ad3      	subs	r3, r2, r3
 8002448:	f241 3288 	movw	r2, #5000	; 0x1388
 800244c:	4293      	cmp	r3, r2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e0ab      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002454:	4b57      	ldr	r3, [pc, #348]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0ee      	beq.n	800243e <HAL_RCC_OscConfig+0x37e>
 8002460:	e014      	b.n	800248c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002462:	f7fe fe97 	bl	8001194 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002468:	e00a      	b.n	8002480 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800246a:	f7fe fe93 	bl	8001194 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	f241 3288 	movw	r2, #5000	; 0x1388
 8002478:	4293      	cmp	r3, r2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e095      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002480:	4b4c      	ldr	r3, [pc, #304]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1ee      	bne.n	800246a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800248c:	7dfb      	ldrb	r3, [r7, #23]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d105      	bne.n	800249e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002492:	4b48      	ldr	r3, [pc, #288]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	4a47      	ldr	r2, [pc, #284]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002498:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800249c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 8081 	beq.w	80025aa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024a8:	4b42      	ldr	r3, [pc, #264]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 030c 	and.w	r3, r3, #12
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d061      	beq.n	8002578 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d146      	bne.n	800254a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024bc:	4b3f      	ldr	r3, [pc, #252]	; (80025bc <HAL_RCC_OscConfig+0x4fc>)
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c2:	f7fe fe67 	bl	8001194 <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c8:	e008      	b.n	80024dc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ca:	f7fe fe63 	bl	8001194 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e067      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024dc:	4b35      	ldr	r3, [pc, #212]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1f0      	bne.n	80024ca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f0:	d108      	bne.n	8002504 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024f2:	4b30      	ldr	r3, [pc, #192]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	492d      	ldr	r1, [pc, #180]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002500:	4313      	orrs	r3, r2
 8002502:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002504:	4b2b      	ldr	r3, [pc, #172]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a19      	ldr	r1, [r3, #32]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002514:	430b      	orrs	r3, r1
 8002516:	4927      	ldr	r1, [pc, #156]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002518:	4313      	orrs	r3, r2
 800251a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800251c:	4b27      	ldr	r3, [pc, #156]	; (80025bc <HAL_RCC_OscConfig+0x4fc>)
 800251e:	2201      	movs	r2, #1
 8002520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002522:	f7fe fe37 	bl	8001194 <HAL_GetTick>
 8002526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002528:	e008      	b.n	800253c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800252a:	f7fe fe33 	bl	8001194 <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d901      	bls.n	800253c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002538:	2303      	movs	r3, #3
 800253a:	e037      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800253c:	4b1d      	ldr	r3, [pc, #116]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d0f0      	beq.n	800252a <HAL_RCC_OscConfig+0x46a>
 8002548:	e02f      	b.n	80025aa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800254a:	4b1c      	ldr	r3, [pc, #112]	; (80025bc <HAL_RCC_OscConfig+0x4fc>)
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002550:	f7fe fe20 	bl	8001194 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002558:	f7fe fe1c 	bl	8001194 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e020      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800256a:	4b12      	ldr	r3, [pc, #72]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d1f0      	bne.n	8002558 <HAL_RCC_OscConfig+0x498>
 8002576:	e018      	b.n	80025aa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	69db      	ldr	r3, [r3, #28]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d101      	bne.n	8002584 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e013      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002584:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <HAL_RCC_OscConfig+0x4f4>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	429a      	cmp	r2, r3
 8002596:	d106      	bne.n	80025a6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d001      	beq.n	80025aa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e000      	b.n	80025ac <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	40021000 	.word	0x40021000
 80025b8:	40007000 	.word	0x40007000
 80025bc:	42420060 	.word	0x42420060

080025c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e0d0      	b.n	8002776 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025d4:	4b6a      	ldr	r3, [pc, #424]	; (8002780 <HAL_RCC_ClockConfig+0x1c0>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d910      	bls.n	8002604 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e2:	4b67      	ldr	r3, [pc, #412]	; (8002780 <HAL_RCC_ClockConfig+0x1c0>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f023 0207 	bic.w	r2, r3, #7
 80025ea:	4965      	ldr	r1, [pc, #404]	; (8002780 <HAL_RCC_ClockConfig+0x1c0>)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f2:	4b63      	ldr	r3, [pc, #396]	; (8002780 <HAL_RCC_ClockConfig+0x1c0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d001      	beq.n	8002604 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e0b8      	b.n	8002776 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d020      	beq.n	8002652 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800261c:	4b59      	ldr	r3, [pc, #356]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	4a58      	ldr	r2, [pc, #352]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 8002622:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002626:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0308 	and.w	r3, r3, #8
 8002630:	2b00      	cmp	r3, #0
 8002632:	d005      	beq.n	8002640 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002634:	4b53      	ldr	r3, [pc, #332]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	4a52      	ldr	r2, [pc, #328]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 800263a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800263e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002640:	4b50      	ldr	r3, [pc, #320]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	494d      	ldr	r1, [pc, #308]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 800264e:	4313      	orrs	r3, r2
 8002650:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	2b00      	cmp	r3, #0
 800265c:	d040      	beq.n	80026e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d107      	bne.n	8002676 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002666:	4b47      	ldr	r3, [pc, #284]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d115      	bne.n	800269e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e07f      	b.n	8002776 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	2b02      	cmp	r3, #2
 800267c:	d107      	bne.n	800268e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800267e:	4b41      	ldr	r3, [pc, #260]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d109      	bne.n	800269e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e073      	b.n	8002776 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800268e:	4b3d      	ldr	r3, [pc, #244]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e06b      	b.n	8002776 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800269e:	4b39      	ldr	r3, [pc, #228]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f023 0203 	bic.w	r2, r3, #3
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	4936      	ldr	r1, [pc, #216]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026b0:	f7fe fd70 	bl	8001194 <HAL_GetTick>
 80026b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b6:	e00a      	b.n	80026ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026b8:	f7fe fd6c 	bl	8001194 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e053      	b.n	8002776 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ce:	4b2d      	ldr	r3, [pc, #180]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f003 020c 	and.w	r2, r3, #12
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	429a      	cmp	r2, r3
 80026de:	d1eb      	bne.n	80026b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026e0:	4b27      	ldr	r3, [pc, #156]	; (8002780 <HAL_RCC_ClockConfig+0x1c0>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	683a      	ldr	r2, [r7, #0]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d210      	bcs.n	8002710 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ee:	4b24      	ldr	r3, [pc, #144]	; (8002780 <HAL_RCC_ClockConfig+0x1c0>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f023 0207 	bic.w	r2, r3, #7
 80026f6:	4922      	ldr	r1, [pc, #136]	; (8002780 <HAL_RCC_ClockConfig+0x1c0>)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fe:	4b20      	ldr	r3, [pc, #128]	; (8002780 <HAL_RCC_ClockConfig+0x1c0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0307 	and.w	r3, r3, #7
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	429a      	cmp	r2, r3
 800270a:	d001      	beq.n	8002710 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e032      	b.n	8002776 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	d008      	beq.n	800272e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800271c:	4b19      	ldr	r3, [pc, #100]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	4916      	ldr	r1, [pc, #88]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 800272a:	4313      	orrs	r3, r2
 800272c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b00      	cmp	r3, #0
 8002738:	d009      	beq.n	800274e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800273a:	4b12      	ldr	r3, [pc, #72]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	490e      	ldr	r1, [pc, #56]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 800274a:	4313      	orrs	r3, r2
 800274c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800274e:	f000 f821 	bl	8002794 <HAL_RCC_GetSysClockFreq>
 8002752:	4601      	mov	r1, r0
 8002754:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <HAL_RCC_ClockConfig+0x1c4>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	091b      	lsrs	r3, r3, #4
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	4a0a      	ldr	r2, [pc, #40]	; (8002788 <HAL_RCC_ClockConfig+0x1c8>)
 8002760:	5cd3      	ldrb	r3, [r2, r3]
 8002762:	fa21 f303 	lsr.w	r3, r1, r3
 8002766:	4a09      	ldr	r2, [pc, #36]	; (800278c <HAL_RCC_ClockConfig+0x1cc>)
 8002768:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800276a:	4b09      	ldr	r3, [pc, #36]	; (8002790 <HAL_RCC_ClockConfig+0x1d0>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f7fe fcce 	bl	8001110 <HAL_InitTick>

  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	40022000 	.word	0x40022000
 8002784:	40021000 	.word	0x40021000
 8002788:	08005654 	.word	0x08005654
 800278c:	20000000 	.word	0x20000000
 8002790:	20000004 	.word	0x20000004

08002794 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002794:	b490      	push	{r4, r7}
 8002796:	b08a      	sub	sp, #40	; 0x28
 8002798:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800279a:	4b2a      	ldr	r3, [pc, #168]	; (8002844 <HAL_RCC_GetSysClockFreq+0xb0>)
 800279c:	1d3c      	adds	r4, r7, #4
 800279e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80027a4:	4b28      	ldr	r3, [pc, #160]	; (8002848 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027a6:	881b      	ldrh	r3, [r3, #0]
 80027a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61fb      	str	r3, [r7, #28]
 80027ae:	2300      	movs	r3, #0
 80027b0:	61bb      	str	r3, [r7, #24]
 80027b2:	2300      	movs	r3, #0
 80027b4:	627b      	str	r3, [r7, #36]	; 0x24
 80027b6:	2300      	movs	r3, #0
 80027b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027be:	4b23      	ldr	r3, [pc, #140]	; (800284c <HAL_RCC_GetSysClockFreq+0xb8>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	f003 030c 	and.w	r3, r3, #12
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	d002      	beq.n	80027d4 <HAL_RCC_GetSysClockFreq+0x40>
 80027ce:	2b08      	cmp	r3, #8
 80027d0:	d003      	beq.n	80027da <HAL_RCC_GetSysClockFreq+0x46>
 80027d2:	e02d      	b.n	8002830 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027d4:	4b1e      	ldr	r3, [pc, #120]	; (8002850 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027d6:	623b      	str	r3, [r7, #32]
      break;
 80027d8:	e02d      	b.n	8002836 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	0c9b      	lsrs	r3, r3, #18
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80027e6:	4413      	add	r3, r2
 80027e8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80027ec:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d013      	beq.n	8002820 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027f8:	4b14      	ldr	r3, [pc, #80]	; (800284c <HAL_RCC_GetSysClockFreq+0xb8>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	0c5b      	lsrs	r3, r3, #17
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002806:	4413      	add	r3, r2
 8002808:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800280c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	4a0f      	ldr	r2, [pc, #60]	; (8002850 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002812:	fb02 f203 	mul.w	r2, r2, r3
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	fbb2 f3f3 	udiv	r3, r2, r3
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
 800281e:	e004      	b.n	800282a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	4a0c      	ldr	r2, [pc, #48]	; (8002854 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002824:	fb02 f303 	mul.w	r3, r2, r3
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	623b      	str	r3, [r7, #32]
      break;
 800282e:	e002      	b.n	8002836 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002830:	4b07      	ldr	r3, [pc, #28]	; (8002850 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002832:	623b      	str	r3, [r7, #32]
      break;
 8002834:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002836:	6a3b      	ldr	r3, [r7, #32]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3728      	adds	r7, #40	; 0x28
 800283c:	46bd      	mov	sp, r7
 800283e:	bc90      	pop	{r4, r7}
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	0800562c 	.word	0x0800562c
 8002848:	0800563c 	.word	0x0800563c
 800284c:	40021000 	.word	0x40021000
 8002850:	007a1200 	.word	0x007a1200
 8002854:	003d0900 	.word	0x003d0900

08002858 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800285c:	4b02      	ldr	r3, [pc, #8]	; (8002868 <HAL_RCC_GetHCLKFreq+0x10>)
 800285e:	681b      	ldr	r3, [r3, #0]
}
 8002860:	4618      	mov	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr
 8002868:	20000000 	.word	0x20000000

0800286c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002870:	f7ff fff2 	bl	8002858 <HAL_RCC_GetHCLKFreq>
 8002874:	4601      	mov	r1, r0
 8002876:	4b05      	ldr	r3, [pc, #20]	; (800288c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	0a1b      	lsrs	r3, r3, #8
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	4a03      	ldr	r2, [pc, #12]	; (8002890 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002882:	5cd3      	ldrb	r3, [r2, r3]
 8002884:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002888:	4618      	mov	r0, r3
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40021000 	.word	0x40021000
 8002890:	08005664 	.word	0x08005664

08002894 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002898:	f7ff ffde 	bl	8002858 <HAL_RCC_GetHCLKFreq>
 800289c:	4601      	mov	r1, r0
 800289e:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	0adb      	lsrs	r3, r3, #11
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	4a03      	ldr	r2, [pc, #12]	; (80028b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028aa:	5cd3      	ldrb	r3, [r2, r3]
 80028ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40021000 	.word	0x40021000
 80028b8:	08005664 	.word	0x08005664

080028bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028c4:	4b0a      	ldr	r3, [pc, #40]	; (80028f0 <RCC_Delay+0x34>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a0a      	ldr	r2, [pc, #40]	; (80028f4 <RCC_Delay+0x38>)
 80028ca:	fba2 2303 	umull	r2, r3, r2, r3
 80028ce:	0a5b      	lsrs	r3, r3, #9
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	fb02 f303 	mul.w	r3, r2, r3
 80028d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028d8:	bf00      	nop
  }
  while (Delay --);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	1e5a      	subs	r2, r3, #1
 80028de:	60fa      	str	r2, [r7, #12]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1f9      	bne.n	80028d8 <RCC_Delay+0x1c>
}
 80028e4:	bf00      	nop
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	20000000 	.word	0x20000000
 80028f4:	10624dd3 	.word	0x10624dd3

080028f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002900:	2300      	movs	r3, #0
 8002902:	613b      	str	r3, [r7, #16]
 8002904:	2300      	movs	r3, #0
 8002906:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b00      	cmp	r3, #0
 8002912:	d07d      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002914:	2300      	movs	r3, #0
 8002916:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002918:	4b4f      	ldr	r3, [pc, #316]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800291a:	69db      	ldr	r3, [r3, #28]
 800291c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10d      	bne.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002924:	4b4c      	ldr	r3, [pc, #304]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	4a4b      	ldr	r2, [pc, #300]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800292a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800292e:	61d3      	str	r3, [r2, #28]
 8002930:	4b49      	ldr	r3, [pc, #292]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002932:	69db      	ldr	r3, [r3, #28]
 8002934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002938:	60bb      	str	r3, [r7, #8]
 800293a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800293c:	2301      	movs	r3, #1
 800293e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002940:	4b46      	ldr	r3, [pc, #280]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002948:	2b00      	cmp	r3, #0
 800294a:	d118      	bne.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800294c:	4b43      	ldr	r3, [pc, #268]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a42      	ldr	r2, [pc, #264]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002956:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002958:	f7fe fc1c 	bl	8001194 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800295e:	e008      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002960:	f7fe fc18 	bl	8001194 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b64      	cmp	r3, #100	; 0x64
 800296c:	d901      	bls.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e06d      	b.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002972:	4b3a      	ldr	r3, [pc, #232]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297a:	2b00      	cmp	r3, #0
 800297c:	d0f0      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800297e:	4b36      	ldr	r3, [pc, #216]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002986:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d02e      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	429a      	cmp	r2, r3
 800299a:	d027      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800299c:	4b2e      	ldr	r3, [pc, #184]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029a4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029a6:	4b2e      	ldr	r3, [pc, #184]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029a8:	2201      	movs	r2, #1
 80029aa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029ac:	4b2c      	ldr	r3, [pc, #176]	; (8002a60 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80029b2:	4a29      	ldr	r2, [pc, #164]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d014      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c2:	f7fe fbe7 	bl	8001194 <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029c8:	e00a      	b.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ca:	f7fe fbe3 	bl	8001194 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d8:	4293      	cmp	r3, r2
 80029da:	d901      	bls.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e036      	b.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e0:	4b1d      	ldr	r3, [pc, #116]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d0ee      	beq.n	80029ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029ec:	4b1a      	ldr	r3, [pc, #104]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	4917      	ldr	r1, [pc, #92]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029fe:	7dfb      	ldrb	r3, [r7, #23]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d105      	bne.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a04:	4b14      	ldr	r3, [pc, #80]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a06:	69db      	ldr	r3, [r3, #28]
 8002a08:	4a13      	ldr	r2, [pc, #76]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a0e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d008      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a1c:	4b0e      	ldr	r3, [pc, #56]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	490b      	ldr	r1, [pc, #44]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0310 	and.w	r3, r3, #16
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d008      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a3a:	4b07      	ldr	r3, [pc, #28]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	4904      	ldr	r1, [pc, #16]	; (8002a58 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3718      	adds	r7, #24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	40007000 	.word	0x40007000
 8002a60:	42420440 	.word	0x42420440

08002a64 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002a64:	b590      	push	{r4, r7, lr}
 8002a66:	b08d      	sub	sp, #52	; 0x34
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002a6c:	4b55      	ldr	r3, [pc, #340]	; (8002bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002a6e:	f107 040c 	add.w	r4, r7, #12
 8002a72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002a78:	4b53      	ldr	r3, [pc, #332]	; (8002bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002a7a:	881b      	ldrh	r3, [r3, #0]
 8002a7c:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	627b      	str	r3, [r7, #36]	; 0x24
 8002a82:	2300      	movs	r3, #0
 8002a84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a86:	2300      	movs	r3, #0
 8002a88:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	61fb      	str	r3, [r7, #28]
 8002a8e:	2300      	movs	r3, #0
 8002a90:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d07f      	beq.n	8002b98 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8002a98:	2b10      	cmp	r3, #16
 8002a9a:	d002      	beq.n	8002aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d048      	beq.n	8002b32 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002aa0:	e08b      	b.n	8002bba <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8002aa2:	4b4a      	ldr	r3, [pc, #296]	; (8002bcc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002aa8:	4b48      	ldr	r3, [pc, #288]	; (8002bcc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d07f      	beq.n	8002bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	0c9b      	lsrs	r3, r3, #18
 8002ab8:	f003 030f 	and.w	r3, r3, #15
 8002abc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002ac6:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d018      	beq.n	8002b04 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002ad2:	4b3e      	ldr	r3, [pc, #248]	; (8002bcc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	0c5b      	lsrs	r3, r3, #17
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002ae0:	4413      	add	r3, r2
 8002ae2:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002ae6:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00d      	beq.n	8002b0e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002af2:	4a37      	ldr	r2, [pc, #220]	; (8002bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	fbb2 f2f3 	udiv	r2, r2, r3
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	fb02 f303 	mul.w	r3, r2, r3
 8002b00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b02:	e004      	b.n	8002b0e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b04:	6a3b      	ldr	r3, [r7, #32]
 8002b06:	4a33      	ldr	r2, [pc, #204]	; (8002bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 8002b08:	fb02 f303 	mul.w	r3, r2, r3
 8002b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002b0e:	4b2f      	ldr	r3, [pc, #188]	; (8002bcc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b1a:	d102      	bne.n	8002b22 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8002b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002b20:	e048      	b.n	8002bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8002b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	4a2c      	ldr	r2, [pc, #176]	; (8002bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 8002b28:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2c:	085b      	lsrs	r3, r3, #1
 8002b2e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002b30:	e040      	b.n	8002bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8002b32:	4b26      	ldr	r3, [pc, #152]	; (8002bcc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b42:	d108      	bne.n	8002b56 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8002b4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b52:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b54:	e01f      	b.n	8002b96 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b60:	d109      	bne.n	8002b76 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8002b62:	4b1a      	ldr	r3, [pc, #104]	; (8002bcc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8002b6e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8002b72:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b74:	e00f      	b.n	8002b96 <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002b80:	d11a      	bne.n	8002bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002b82:	4b12      	ldr	r3, [pc, #72]	; (8002bcc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d014      	beq.n	8002bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 8002b8e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002b92:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002b94:	e010      	b.n	8002bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 8002b96:	e00f      	b.n	8002bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002b98:	f7ff fe7c 	bl	8002894 <HAL_RCC_GetPCLK2Freq>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	0b9b      	lsrs	r3, r3, #14
 8002ba4:	f003 0303 	and.w	r3, r3, #3
 8002ba8:	3301      	adds	r3, #1
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8002bb2:	e002      	b.n	8002bba <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002bb4:	bf00      	nop
 8002bb6:	e000      	b.n	8002bba <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 8002bb8:	bf00      	nop
    }
  }
  return (frequency);
 8002bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3734      	adds	r7, #52	; 0x34
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd90      	pop	{r4, r7, pc}
 8002bc4:	08005640 	.word	0x08005640
 8002bc8:	08005650 	.word	0x08005650
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	007a1200 	.word	0x007a1200
 8002bd4:	003d0900 	.word	0x003d0900
 8002bd8:	aaaaaaab 	.word	0xaaaaaaab

08002bdc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e03f      	b.n	8002c6e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d106      	bne.n	8002c08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f7fe f942 	bl	8000e8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2224      	movs	r2, #36	; 0x24
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68da      	ldr	r2, [r3, #12]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 f905 	bl	8002e30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	691a      	ldr	r2, [r3, #16]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	695a      	ldr	r2, [r3, #20]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	68da      	ldr	r2, [r3, #12]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2220      	movs	r2, #32
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b08a      	sub	sp, #40	; 0x28
 8002c7a:	af02      	add	r7, sp, #8
 8002c7c:	60f8      	str	r0, [r7, #12]
 8002c7e:	60b9      	str	r1, [r7, #8]
 8002c80:	603b      	str	r3, [r7, #0]
 8002c82:	4613      	mov	r3, r2
 8002c84:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c86:	2300      	movs	r3, #0
 8002c88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b20      	cmp	r3, #32
 8002c94:	d17c      	bne.n	8002d90 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d002      	beq.n	8002ca2 <HAL_UART_Transmit+0x2c>
 8002c9c:	88fb      	ldrh	r3, [r7, #6]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e075      	b.n	8002d92 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d101      	bne.n	8002cb4 <HAL_UART_Transmit+0x3e>
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	e06e      	b.n	8002d92 <HAL_UART_Transmit+0x11c>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2221      	movs	r2, #33	; 0x21
 8002cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cca:	f7fe fa63 	bl	8001194 <HAL_GetTick>
 8002cce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	88fa      	ldrh	r2, [r7, #6]
 8002cd4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	88fa      	ldrh	r2, [r7, #6]
 8002cda:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ce4:	d108      	bne.n	8002cf8 <HAL_UART_Transmit+0x82>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d104      	bne.n	8002cf8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	61bb      	str	r3, [r7, #24]
 8002cf6:	e003      	b.n	8002d00 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002d08:	e02a      	b.n	8002d60 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	2200      	movs	r2, #0
 8002d12:	2180      	movs	r1, #128	; 0x80
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f000 f840 	bl	8002d9a <UART_WaitOnFlagUntilTimeout>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e036      	b.n	8002d92 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10b      	bne.n	8002d42 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	881b      	ldrh	r3, [r3, #0]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d38:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	3302      	adds	r3, #2
 8002d3e:	61bb      	str	r3, [r7, #24]
 8002d40:	e007      	b.n	8002d52 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	781a      	ldrb	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	3301      	adds	r3, #1
 8002d50:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	b29a      	uxth	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1cf      	bne.n	8002d0a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	2200      	movs	r2, #0
 8002d72:	2140      	movs	r1, #64	; 0x40
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f000 f810 	bl	8002d9a <UART_WaitOnFlagUntilTimeout>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e006      	b.n	8002d92 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2220      	movs	r2, #32
 8002d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	e000      	b.n	8002d92 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d90:	2302      	movs	r3, #2
  }
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3720      	adds	r7, #32
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b084      	sub	sp, #16
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	60f8      	str	r0, [r7, #12]
 8002da2:	60b9      	str	r1, [r7, #8]
 8002da4:	603b      	str	r3, [r7, #0]
 8002da6:	4613      	mov	r3, r2
 8002da8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002daa:	e02c      	b.n	8002e06 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dac:	69bb      	ldr	r3, [r7, #24]
 8002dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db2:	d028      	beq.n	8002e06 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d007      	beq.n	8002dca <UART_WaitOnFlagUntilTimeout+0x30>
 8002dba:	f7fe f9eb 	bl	8001194 <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d21d      	bcs.n	8002e06 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68da      	ldr	r2, [r3, #12]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002dd8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	695a      	ldr	r2, [r3, #20]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 0201 	bic.w	r2, r2, #1
 8002de8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2220      	movs	r2, #32
 8002dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2220      	movs	r2, #32
 8002df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e00f      	b.n	8002e26 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	68ba      	ldr	r2, [r7, #8]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	bf0c      	ite	eq
 8002e16:	2301      	moveq	r3, #1
 8002e18:	2300      	movne	r3, #0
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	79fb      	ldrb	r3, [r7, #7]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d0c3      	beq.n	8002dac <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
	...

08002e30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68da      	ldr	r2, [r3, #12]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691b      	ldr	r3, [r3, #16]
 8002e56:	431a      	orrs	r2, r3
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002e6a:	f023 030c 	bic.w	r3, r3, #12
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6812      	ldr	r2, [r2, #0]
 8002e72:	68b9      	ldr	r1, [r7, #8]
 8002e74:	430b      	orrs	r3, r1
 8002e76:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	699a      	ldr	r2, [r3, #24]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a2c      	ldr	r2, [pc, #176]	; (8002f44 <UART_SetConfig+0x114>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d103      	bne.n	8002ea0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002e98:	f7ff fcfc 	bl	8002894 <HAL_RCC_GetPCLK2Freq>
 8002e9c:	60f8      	str	r0, [r7, #12]
 8002e9e:	e002      	b.n	8002ea6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002ea0:	f7ff fce4 	bl	800286c <HAL_RCC_GetPCLK1Freq>
 8002ea4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	009a      	lsls	r2, r3, #2
 8002eb0:	441a      	add	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ebc:	4a22      	ldr	r2, [pc, #136]	; (8002f48 <UART_SetConfig+0x118>)
 8002ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec2:	095b      	lsrs	r3, r3, #5
 8002ec4:	0119      	lsls	r1, r3, #4
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	009a      	lsls	r2, r3, #2
 8002ed0:	441a      	add	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002edc:	4b1a      	ldr	r3, [pc, #104]	; (8002f48 <UART_SetConfig+0x118>)
 8002ede:	fba3 0302 	umull	r0, r3, r3, r2
 8002ee2:	095b      	lsrs	r3, r3, #5
 8002ee4:	2064      	movs	r0, #100	; 0x64
 8002ee6:	fb00 f303 	mul.w	r3, r0, r3
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	011b      	lsls	r3, r3, #4
 8002eee:	3332      	adds	r3, #50	; 0x32
 8002ef0:	4a15      	ldr	r2, [pc, #84]	; (8002f48 <UART_SetConfig+0x118>)
 8002ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef6:	095b      	lsrs	r3, r3, #5
 8002ef8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002efc:	4419      	add	r1, r3
 8002efe:	68fa      	ldr	r2, [r7, #12]
 8002f00:	4613      	mov	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4413      	add	r3, r2
 8002f06:	009a      	lsls	r2, r3, #2
 8002f08:	441a      	add	r2, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f14:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <UART_SetConfig+0x118>)
 8002f16:	fba3 0302 	umull	r0, r3, r3, r2
 8002f1a:	095b      	lsrs	r3, r3, #5
 8002f1c:	2064      	movs	r0, #100	; 0x64
 8002f1e:	fb00 f303 	mul.w	r3, r0, r3
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	011b      	lsls	r3, r3, #4
 8002f26:	3332      	adds	r3, #50	; 0x32
 8002f28:	4a07      	ldr	r2, [pc, #28]	; (8002f48 <UART_SetConfig+0x118>)
 8002f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2e:	095b      	lsrs	r3, r3, #5
 8002f30:	f003 020f 	and.w	r2, r3, #15
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	440a      	add	r2, r1
 8002f3a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002f3c:	bf00      	nop
 8002f3e:	3710      	adds	r7, #16
 8002f40:	46bd      	mov	sp, r7
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	40013800 	.word	0x40013800
 8002f48:	51eb851f 	.word	0x51eb851f

08002f4c <__errno>:
 8002f4c:	4b01      	ldr	r3, [pc, #4]	; (8002f54 <__errno+0x8>)
 8002f4e:	6818      	ldr	r0, [r3, #0]
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	2000000c 	.word	0x2000000c

08002f58 <__libc_init_array>:
 8002f58:	b570      	push	{r4, r5, r6, lr}
 8002f5a:	2500      	movs	r5, #0
 8002f5c:	4e0c      	ldr	r6, [pc, #48]	; (8002f90 <__libc_init_array+0x38>)
 8002f5e:	4c0d      	ldr	r4, [pc, #52]	; (8002f94 <__libc_init_array+0x3c>)
 8002f60:	1ba4      	subs	r4, r4, r6
 8002f62:	10a4      	asrs	r4, r4, #2
 8002f64:	42a5      	cmp	r5, r4
 8002f66:	d109      	bne.n	8002f7c <__libc_init_array+0x24>
 8002f68:	f002 fb48 	bl	80055fc <_init>
 8002f6c:	2500      	movs	r5, #0
 8002f6e:	4e0a      	ldr	r6, [pc, #40]	; (8002f98 <__libc_init_array+0x40>)
 8002f70:	4c0a      	ldr	r4, [pc, #40]	; (8002f9c <__libc_init_array+0x44>)
 8002f72:	1ba4      	subs	r4, r4, r6
 8002f74:	10a4      	asrs	r4, r4, #2
 8002f76:	42a5      	cmp	r5, r4
 8002f78:	d105      	bne.n	8002f86 <__libc_init_array+0x2e>
 8002f7a:	bd70      	pop	{r4, r5, r6, pc}
 8002f7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f80:	4798      	blx	r3
 8002f82:	3501      	adds	r5, #1
 8002f84:	e7ee      	b.n	8002f64 <__libc_init_array+0xc>
 8002f86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f8a:	4798      	blx	r3
 8002f8c:	3501      	adds	r5, #1
 8002f8e:	e7f2      	b.n	8002f76 <__libc_init_array+0x1e>
 8002f90:	08005930 	.word	0x08005930
 8002f94:	08005930 	.word	0x08005930
 8002f98:	08005930 	.word	0x08005930
 8002f9c:	08005934 	.word	0x08005934

08002fa0 <memset>:
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	4402      	add	r2, r0
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d100      	bne.n	8002faa <memset+0xa>
 8002fa8:	4770      	bx	lr
 8002faa:	f803 1b01 	strb.w	r1, [r3], #1
 8002fae:	e7f9      	b.n	8002fa4 <memset+0x4>

08002fb0 <__cvt>:
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002fb6:	461e      	mov	r6, r3
 8002fb8:	bfbb      	ittet	lt
 8002fba:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002fbe:	461e      	movlt	r6, r3
 8002fc0:	2300      	movge	r3, #0
 8002fc2:	232d      	movlt	r3, #45	; 0x2d
 8002fc4:	b088      	sub	sp, #32
 8002fc6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8002fc8:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8002fcc:	f027 0720 	bic.w	r7, r7, #32
 8002fd0:	2f46      	cmp	r7, #70	; 0x46
 8002fd2:	4614      	mov	r4, r2
 8002fd4:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8002fd6:	700b      	strb	r3, [r1, #0]
 8002fd8:	d004      	beq.n	8002fe4 <__cvt+0x34>
 8002fda:	2f45      	cmp	r7, #69	; 0x45
 8002fdc:	d100      	bne.n	8002fe0 <__cvt+0x30>
 8002fde:	3501      	adds	r5, #1
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	e000      	b.n	8002fe6 <__cvt+0x36>
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	aa07      	add	r2, sp, #28
 8002fe8:	9204      	str	r2, [sp, #16]
 8002fea:	aa06      	add	r2, sp, #24
 8002fec:	e9cd a202 	strd	sl, r2, [sp, #8]
 8002ff0:	e9cd 3500 	strd	r3, r5, [sp]
 8002ff4:	4622      	mov	r2, r4
 8002ff6:	4633      	mov	r3, r6
 8002ff8:	f000 fcd2 	bl	80039a0 <_dtoa_r>
 8002ffc:	2f47      	cmp	r7, #71	; 0x47
 8002ffe:	4680      	mov	r8, r0
 8003000:	d102      	bne.n	8003008 <__cvt+0x58>
 8003002:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003004:	07db      	lsls	r3, r3, #31
 8003006:	d526      	bpl.n	8003056 <__cvt+0xa6>
 8003008:	2f46      	cmp	r7, #70	; 0x46
 800300a:	eb08 0905 	add.w	r9, r8, r5
 800300e:	d111      	bne.n	8003034 <__cvt+0x84>
 8003010:	f898 3000 	ldrb.w	r3, [r8]
 8003014:	2b30      	cmp	r3, #48	; 0x30
 8003016:	d10a      	bne.n	800302e <__cvt+0x7e>
 8003018:	2200      	movs	r2, #0
 800301a:	2300      	movs	r3, #0
 800301c:	4620      	mov	r0, r4
 800301e:	4631      	mov	r1, r6
 8003020:	f7fd fcc2 	bl	80009a8 <__aeabi_dcmpeq>
 8003024:	b918      	cbnz	r0, 800302e <__cvt+0x7e>
 8003026:	f1c5 0501 	rsb	r5, r5, #1
 800302a:	f8ca 5000 	str.w	r5, [sl]
 800302e:	f8da 3000 	ldr.w	r3, [sl]
 8003032:	4499      	add	r9, r3
 8003034:	2200      	movs	r2, #0
 8003036:	2300      	movs	r3, #0
 8003038:	4620      	mov	r0, r4
 800303a:	4631      	mov	r1, r6
 800303c:	f7fd fcb4 	bl	80009a8 <__aeabi_dcmpeq>
 8003040:	b938      	cbnz	r0, 8003052 <__cvt+0xa2>
 8003042:	2230      	movs	r2, #48	; 0x30
 8003044:	9b07      	ldr	r3, [sp, #28]
 8003046:	454b      	cmp	r3, r9
 8003048:	d205      	bcs.n	8003056 <__cvt+0xa6>
 800304a:	1c59      	adds	r1, r3, #1
 800304c:	9107      	str	r1, [sp, #28]
 800304e:	701a      	strb	r2, [r3, #0]
 8003050:	e7f8      	b.n	8003044 <__cvt+0x94>
 8003052:	f8cd 901c 	str.w	r9, [sp, #28]
 8003056:	4640      	mov	r0, r8
 8003058:	9b07      	ldr	r3, [sp, #28]
 800305a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800305c:	eba3 0308 	sub.w	r3, r3, r8
 8003060:	6013      	str	r3, [r2, #0]
 8003062:	b008      	add	sp, #32
 8003064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003068 <__exponent>:
 8003068:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800306a:	2900      	cmp	r1, #0
 800306c:	bfb4      	ite	lt
 800306e:	232d      	movlt	r3, #45	; 0x2d
 8003070:	232b      	movge	r3, #43	; 0x2b
 8003072:	4604      	mov	r4, r0
 8003074:	bfb8      	it	lt
 8003076:	4249      	neglt	r1, r1
 8003078:	2909      	cmp	r1, #9
 800307a:	f804 2b02 	strb.w	r2, [r4], #2
 800307e:	7043      	strb	r3, [r0, #1]
 8003080:	dd21      	ble.n	80030c6 <__exponent+0x5e>
 8003082:	f10d 0307 	add.w	r3, sp, #7
 8003086:	461f      	mov	r7, r3
 8003088:	260a      	movs	r6, #10
 800308a:	fb91 f5f6 	sdiv	r5, r1, r6
 800308e:	fb06 1115 	mls	r1, r6, r5, r1
 8003092:	2d09      	cmp	r5, #9
 8003094:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8003098:	f803 1c01 	strb.w	r1, [r3, #-1]
 800309c:	f103 32ff 	add.w	r2, r3, #4294967295
 80030a0:	4629      	mov	r1, r5
 80030a2:	dc09      	bgt.n	80030b8 <__exponent+0x50>
 80030a4:	3130      	adds	r1, #48	; 0x30
 80030a6:	3b02      	subs	r3, #2
 80030a8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80030ac:	42bb      	cmp	r3, r7
 80030ae:	4622      	mov	r2, r4
 80030b0:	d304      	bcc.n	80030bc <__exponent+0x54>
 80030b2:	1a10      	subs	r0, r2, r0
 80030b4:	b003      	add	sp, #12
 80030b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80030b8:	4613      	mov	r3, r2
 80030ba:	e7e6      	b.n	800308a <__exponent+0x22>
 80030bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80030c0:	f804 2b01 	strb.w	r2, [r4], #1
 80030c4:	e7f2      	b.n	80030ac <__exponent+0x44>
 80030c6:	2330      	movs	r3, #48	; 0x30
 80030c8:	4419      	add	r1, r3
 80030ca:	7083      	strb	r3, [r0, #2]
 80030cc:	1d02      	adds	r2, r0, #4
 80030ce:	70c1      	strb	r1, [r0, #3]
 80030d0:	e7ef      	b.n	80030b2 <__exponent+0x4a>
	...

080030d4 <_printf_float>:
 80030d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030d8:	b091      	sub	sp, #68	; 0x44
 80030da:	460c      	mov	r4, r1
 80030dc:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80030de:	4693      	mov	fp, r2
 80030e0:	461e      	mov	r6, r3
 80030e2:	4605      	mov	r5, r0
 80030e4:	f001 fada 	bl	800469c <_localeconv_r>
 80030e8:	6803      	ldr	r3, [r0, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	9309      	str	r3, [sp, #36]	; 0x24
 80030ee:	f7fd f82f 	bl	8000150 <strlen>
 80030f2:	2300      	movs	r3, #0
 80030f4:	930e      	str	r3, [sp, #56]	; 0x38
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	900a      	str	r0, [sp, #40]	; 0x28
 80030fa:	3307      	adds	r3, #7
 80030fc:	f023 0307 	bic.w	r3, r3, #7
 8003100:	f103 0208 	add.w	r2, r3, #8
 8003104:	f894 8018 	ldrb.w	r8, [r4, #24]
 8003108:	f8d4 a000 	ldr.w	sl, [r4]
 800310c:	603a      	str	r2, [r7, #0]
 800310e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003112:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003116:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800311a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800311e:	930b      	str	r3, [sp, #44]	; 0x2c
 8003120:	f04f 32ff 	mov.w	r2, #4294967295
 8003124:	4ba6      	ldr	r3, [pc, #664]	; (80033c0 <_printf_float+0x2ec>)
 8003126:	4638      	mov	r0, r7
 8003128:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800312a:	f7fd fc6f 	bl	8000a0c <__aeabi_dcmpun>
 800312e:	bb68      	cbnz	r0, 800318c <_printf_float+0xb8>
 8003130:	f04f 32ff 	mov.w	r2, #4294967295
 8003134:	4ba2      	ldr	r3, [pc, #648]	; (80033c0 <_printf_float+0x2ec>)
 8003136:	4638      	mov	r0, r7
 8003138:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800313a:	f7fd fc49 	bl	80009d0 <__aeabi_dcmple>
 800313e:	bb28      	cbnz	r0, 800318c <_printf_float+0xb8>
 8003140:	2200      	movs	r2, #0
 8003142:	2300      	movs	r3, #0
 8003144:	4638      	mov	r0, r7
 8003146:	4649      	mov	r1, r9
 8003148:	f7fd fc38 	bl	80009bc <__aeabi_dcmplt>
 800314c:	b110      	cbz	r0, 8003154 <_printf_float+0x80>
 800314e:	232d      	movs	r3, #45	; 0x2d
 8003150:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003154:	4f9b      	ldr	r7, [pc, #620]	; (80033c4 <_printf_float+0x2f0>)
 8003156:	4b9c      	ldr	r3, [pc, #624]	; (80033c8 <_printf_float+0x2f4>)
 8003158:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800315c:	bf98      	it	ls
 800315e:	461f      	movls	r7, r3
 8003160:	2303      	movs	r3, #3
 8003162:	f04f 0900 	mov.w	r9, #0
 8003166:	6123      	str	r3, [r4, #16]
 8003168:	f02a 0304 	bic.w	r3, sl, #4
 800316c:	6023      	str	r3, [r4, #0]
 800316e:	9600      	str	r6, [sp, #0]
 8003170:	465b      	mov	r3, fp
 8003172:	aa0f      	add	r2, sp, #60	; 0x3c
 8003174:	4621      	mov	r1, r4
 8003176:	4628      	mov	r0, r5
 8003178:	f000 f9e2 	bl	8003540 <_printf_common>
 800317c:	3001      	adds	r0, #1
 800317e:	f040 8090 	bne.w	80032a2 <_printf_float+0x1ce>
 8003182:	f04f 30ff 	mov.w	r0, #4294967295
 8003186:	b011      	add	sp, #68	; 0x44
 8003188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800318c:	463a      	mov	r2, r7
 800318e:	464b      	mov	r3, r9
 8003190:	4638      	mov	r0, r7
 8003192:	4649      	mov	r1, r9
 8003194:	f7fd fc3a 	bl	8000a0c <__aeabi_dcmpun>
 8003198:	b110      	cbz	r0, 80031a0 <_printf_float+0xcc>
 800319a:	4f8c      	ldr	r7, [pc, #560]	; (80033cc <_printf_float+0x2f8>)
 800319c:	4b8c      	ldr	r3, [pc, #560]	; (80033d0 <_printf_float+0x2fc>)
 800319e:	e7db      	b.n	8003158 <_printf_float+0x84>
 80031a0:	6863      	ldr	r3, [r4, #4]
 80031a2:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 80031a6:	1c59      	adds	r1, r3, #1
 80031a8:	a80d      	add	r0, sp, #52	; 0x34
 80031aa:	a90e      	add	r1, sp, #56	; 0x38
 80031ac:	d140      	bne.n	8003230 <_printf_float+0x15c>
 80031ae:	2306      	movs	r3, #6
 80031b0:	6063      	str	r3, [r4, #4]
 80031b2:	f04f 0c00 	mov.w	ip, #0
 80031b6:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80031ba:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80031be:	6863      	ldr	r3, [r4, #4]
 80031c0:	6022      	str	r2, [r4, #0]
 80031c2:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80031c6:	9300      	str	r3, [sp, #0]
 80031c8:	463a      	mov	r2, r7
 80031ca:	464b      	mov	r3, r9
 80031cc:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80031d0:	4628      	mov	r0, r5
 80031d2:	f7ff feed 	bl	8002fb0 <__cvt>
 80031d6:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80031da:	2b47      	cmp	r3, #71	; 0x47
 80031dc:	4607      	mov	r7, r0
 80031de:	d109      	bne.n	80031f4 <_printf_float+0x120>
 80031e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80031e2:	1cd8      	adds	r0, r3, #3
 80031e4:	db02      	blt.n	80031ec <_printf_float+0x118>
 80031e6:	6862      	ldr	r2, [r4, #4]
 80031e8:	4293      	cmp	r3, r2
 80031ea:	dd47      	ble.n	800327c <_printf_float+0x1a8>
 80031ec:	f1a8 0802 	sub.w	r8, r8, #2
 80031f0:	fa5f f888 	uxtb.w	r8, r8
 80031f4:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80031f8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80031fa:	d824      	bhi.n	8003246 <_printf_float+0x172>
 80031fc:	3901      	subs	r1, #1
 80031fe:	4642      	mov	r2, r8
 8003200:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003204:	910d      	str	r1, [sp, #52]	; 0x34
 8003206:	f7ff ff2f 	bl	8003068 <__exponent>
 800320a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800320c:	4681      	mov	r9, r0
 800320e:	1813      	adds	r3, r2, r0
 8003210:	2a01      	cmp	r2, #1
 8003212:	6123      	str	r3, [r4, #16]
 8003214:	dc02      	bgt.n	800321c <_printf_float+0x148>
 8003216:	6822      	ldr	r2, [r4, #0]
 8003218:	07d1      	lsls	r1, r2, #31
 800321a:	d501      	bpl.n	8003220 <_printf_float+0x14c>
 800321c:	3301      	adds	r3, #1
 800321e:	6123      	str	r3, [r4, #16]
 8003220:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003224:	2b00      	cmp	r3, #0
 8003226:	d0a2      	beq.n	800316e <_printf_float+0x9a>
 8003228:	232d      	movs	r3, #45	; 0x2d
 800322a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800322e:	e79e      	b.n	800316e <_printf_float+0x9a>
 8003230:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8003234:	f000 816e 	beq.w	8003514 <_printf_float+0x440>
 8003238:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800323c:	d1b9      	bne.n	80031b2 <_printf_float+0xde>
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1b7      	bne.n	80031b2 <_printf_float+0xde>
 8003242:	2301      	movs	r3, #1
 8003244:	e7b4      	b.n	80031b0 <_printf_float+0xdc>
 8003246:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800324a:	d119      	bne.n	8003280 <_printf_float+0x1ac>
 800324c:	2900      	cmp	r1, #0
 800324e:	6863      	ldr	r3, [r4, #4]
 8003250:	dd0c      	ble.n	800326c <_printf_float+0x198>
 8003252:	6121      	str	r1, [r4, #16]
 8003254:	b913      	cbnz	r3, 800325c <_printf_float+0x188>
 8003256:	6822      	ldr	r2, [r4, #0]
 8003258:	07d2      	lsls	r2, r2, #31
 800325a:	d502      	bpl.n	8003262 <_printf_float+0x18e>
 800325c:	3301      	adds	r3, #1
 800325e:	440b      	add	r3, r1
 8003260:	6123      	str	r3, [r4, #16]
 8003262:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003264:	f04f 0900 	mov.w	r9, #0
 8003268:	65a3      	str	r3, [r4, #88]	; 0x58
 800326a:	e7d9      	b.n	8003220 <_printf_float+0x14c>
 800326c:	b913      	cbnz	r3, 8003274 <_printf_float+0x1a0>
 800326e:	6822      	ldr	r2, [r4, #0]
 8003270:	07d0      	lsls	r0, r2, #31
 8003272:	d501      	bpl.n	8003278 <_printf_float+0x1a4>
 8003274:	3302      	adds	r3, #2
 8003276:	e7f3      	b.n	8003260 <_printf_float+0x18c>
 8003278:	2301      	movs	r3, #1
 800327a:	e7f1      	b.n	8003260 <_printf_float+0x18c>
 800327c:	f04f 0867 	mov.w	r8, #103	; 0x67
 8003280:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003284:	4293      	cmp	r3, r2
 8003286:	db05      	blt.n	8003294 <_printf_float+0x1c0>
 8003288:	6822      	ldr	r2, [r4, #0]
 800328a:	6123      	str	r3, [r4, #16]
 800328c:	07d1      	lsls	r1, r2, #31
 800328e:	d5e8      	bpl.n	8003262 <_printf_float+0x18e>
 8003290:	3301      	adds	r3, #1
 8003292:	e7e5      	b.n	8003260 <_printf_float+0x18c>
 8003294:	2b00      	cmp	r3, #0
 8003296:	bfcc      	ite	gt
 8003298:	2301      	movgt	r3, #1
 800329a:	f1c3 0302 	rsble	r3, r3, #2
 800329e:	4413      	add	r3, r2
 80032a0:	e7de      	b.n	8003260 <_printf_float+0x18c>
 80032a2:	6823      	ldr	r3, [r4, #0]
 80032a4:	055a      	lsls	r2, r3, #21
 80032a6:	d407      	bmi.n	80032b8 <_printf_float+0x1e4>
 80032a8:	6923      	ldr	r3, [r4, #16]
 80032aa:	463a      	mov	r2, r7
 80032ac:	4659      	mov	r1, fp
 80032ae:	4628      	mov	r0, r5
 80032b0:	47b0      	blx	r6
 80032b2:	3001      	adds	r0, #1
 80032b4:	d129      	bne.n	800330a <_printf_float+0x236>
 80032b6:	e764      	b.n	8003182 <_printf_float+0xae>
 80032b8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80032bc:	f240 80d7 	bls.w	800346e <_printf_float+0x39a>
 80032c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80032c4:	2200      	movs	r2, #0
 80032c6:	2300      	movs	r3, #0
 80032c8:	f7fd fb6e 	bl	80009a8 <__aeabi_dcmpeq>
 80032cc:	b388      	cbz	r0, 8003332 <_printf_float+0x25e>
 80032ce:	2301      	movs	r3, #1
 80032d0:	4a40      	ldr	r2, [pc, #256]	; (80033d4 <_printf_float+0x300>)
 80032d2:	4659      	mov	r1, fp
 80032d4:	4628      	mov	r0, r5
 80032d6:	47b0      	blx	r6
 80032d8:	3001      	adds	r0, #1
 80032da:	f43f af52 	beq.w	8003182 <_printf_float+0xae>
 80032de:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80032e2:	429a      	cmp	r2, r3
 80032e4:	db02      	blt.n	80032ec <_printf_float+0x218>
 80032e6:	6823      	ldr	r3, [r4, #0]
 80032e8:	07d8      	lsls	r0, r3, #31
 80032ea:	d50e      	bpl.n	800330a <_printf_float+0x236>
 80032ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80032f0:	4659      	mov	r1, fp
 80032f2:	4628      	mov	r0, r5
 80032f4:	47b0      	blx	r6
 80032f6:	3001      	adds	r0, #1
 80032f8:	f43f af43 	beq.w	8003182 <_printf_float+0xae>
 80032fc:	2700      	movs	r7, #0
 80032fe:	f104 081a 	add.w	r8, r4, #26
 8003302:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003304:	3b01      	subs	r3, #1
 8003306:	42bb      	cmp	r3, r7
 8003308:	dc09      	bgt.n	800331e <_printf_float+0x24a>
 800330a:	6823      	ldr	r3, [r4, #0]
 800330c:	079f      	lsls	r7, r3, #30
 800330e:	f100 80fd 	bmi.w	800350c <_printf_float+0x438>
 8003312:	68e0      	ldr	r0, [r4, #12]
 8003314:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003316:	4298      	cmp	r0, r3
 8003318:	bfb8      	it	lt
 800331a:	4618      	movlt	r0, r3
 800331c:	e733      	b.n	8003186 <_printf_float+0xb2>
 800331e:	2301      	movs	r3, #1
 8003320:	4642      	mov	r2, r8
 8003322:	4659      	mov	r1, fp
 8003324:	4628      	mov	r0, r5
 8003326:	47b0      	blx	r6
 8003328:	3001      	adds	r0, #1
 800332a:	f43f af2a 	beq.w	8003182 <_printf_float+0xae>
 800332e:	3701      	adds	r7, #1
 8003330:	e7e7      	b.n	8003302 <_printf_float+0x22e>
 8003332:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003334:	2b00      	cmp	r3, #0
 8003336:	dc2b      	bgt.n	8003390 <_printf_float+0x2bc>
 8003338:	2301      	movs	r3, #1
 800333a:	4a26      	ldr	r2, [pc, #152]	; (80033d4 <_printf_float+0x300>)
 800333c:	4659      	mov	r1, fp
 800333e:	4628      	mov	r0, r5
 8003340:	47b0      	blx	r6
 8003342:	3001      	adds	r0, #1
 8003344:	f43f af1d 	beq.w	8003182 <_printf_float+0xae>
 8003348:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800334a:	b923      	cbnz	r3, 8003356 <_printf_float+0x282>
 800334c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800334e:	b913      	cbnz	r3, 8003356 <_printf_float+0x282>
 8003350:	6823      	ldr	r3, [r4, #0]
 8003352:	07d9      	lsls	r1, r3, #31
 8003354:	d5d9      	bpl.n	800330a <_printf_float+0x236>
 8003356:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800335a:	4659      	mov	r1, fp
 800335c:	4628      	mov	r0, r5
 800335e:	47b0      	blx	r6
 8003360:	3001      	adds	r0, #1
 8003362:	f43f af0e 	beq.w	8003182 <_printf_float+0xae>
 8003366:	f04f 0800 	mov.w	r8, #0
 800336a:	f104 091a 	add.w	r9, r4, #26
 800336e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003370:	425b      	negs	r3, r3
 8003372:	4543      	cmp	r3, r8
 8003374:	dc01      	bgt.n	800337a <_printf_float+0x2a6>
 8003376:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003378:	e797      	b.n	80032aa <_printf_float+0x1d6>
 800337a:	2301      	movs	r3, #1
 800337c:	464a      	mov	r2, r9
 800337e:	4659      	mov	r1, fp
 8003380:	4628      	mov	r0, r5
 8003382:	47b0      	blx	r6
 8003384:	3001      	adds	r0, #1
 8003386:	f43f aefc 	beq.w	8003182 <_printf_float+0xae>
 800338a:	f108 0801 	add.w	r8, r8, #1
 800338e:	e7ee      	b.n	800336e <_printf_float+0x29a>
 8003390:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003392:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003394:	429a      	cmp	r2, r3
 8003396:	bfa8      	it	ge
 8003398:	461a      	movge	r2, r3
 800339a:	2a00      	cmp	r2, #0
 800339c:	4690      	mov	r8, r2
 800339e:	dd07      	ble.n	80033b0 <_printf_float+0x2dc>
 80033a0:	4613      	mov	r3, r2
 80033a2:	4659      	mov	r1, fp
 80033a4:	463a      	mov	r2, r7
 80033a6:	4628      	mov	r0, r5
 80033a8:	47b0      	blx	r6
 80033aa:	3001      	adds	r0, #1
 80033ac:	f43f aee9 	beq.w	8003182 <_printf_float+0xae>
 80033b0:	f104 031a 	add.w	r3, r4, #26
 80033b4:	f04f 0a00 	mov.w	sl, #0
 80033b8:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 80033bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80033be:	e015      	b.n	80033ec <_printf_float+0x318>
 80033c0:	7fefffff 	.word	0x7fefffff
 80033c4:	08005674 	.word	0x08005674
 80033c8:	08005670 	.word	0x08005670
 80033cc:	0800567c 	.word	0x0800567c
 80033d0:	08005678 	.word	0x08005678
 80033d4:	08005680 	.word	0x08005680
 80033d8:	2301      	movs	r3, #1
 80033da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80033dc:	4659      	mov	r1, fp
 80033de:	4628      	mov	r0, r5
 80033e0:	47b0      	blx	r6
 80033e2:	3001      	adds	r0, #1
 80033e4:	f43f aecd 	beq.w	8003182 <_printf_float+0xae>
 80033e8:	f10a 0a01 	add.w	sl, sl, #1
 80033ec:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 80033f0:	eba9 0308 	sub.w	r3, r9, r8
 80033f4:	4553      	cmp	r3, sl
 80033f6:	dcef      	bgt.n	80033d8 <_printf_float+0x304>
 80033f8:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80033fc:	429a      	cmp	r2, r3
 80033fe:	444f      	add	r7, r9
 8003400:	db14      	blt.n	800342c <_printf_float+0x358>
 8003402:	6823      	ldr	r3, [r4, #0]
 8003404:	07da      	lsls	r2, r3, #31
 8003406:	d411      	bmi.n	800342c <_printf_float+0x358>
 8003408:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800340a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800340c:	eba3 0209 	sub.w	r2, r3, r9
 8003410:	eba3 0901 	sub.w	r9, r3, r1
 8003414:	4591      	cmp	r9, r2
 8003416:	bfa8      	it	ge
 8003418:	4691      	movge	r9, r2
 800341a:	f1b9 0f00 	cmp.w	r9, #0
 800341e:	dc0d      	bgt.n	800343c <_printf_float+0x368>
 8003420:	2700      	movs	r7, #0
 8003422:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003426:	f104 081a 	add.w	r8, r4, #26
 800342a:	e018      	b.n	800345e <_printf_float+0x38a>
 800342c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003430:	4659      	mov	r1, fp
 8003432:	4628      	mov	r0, r5
 8003434:	47b0      	blx	r6
 8003436:	3001      	adds	r0, #1
 8003438:	d1e6      	bne.n	8003408 <_printf_float+0x334>
 800343a:	e6a2      	b.n	8003182 <_printf_float+0xae>
 800343c:	464b      	mov	r3, r9
 800343e:	463a      	mov	r2, r7
 8003440:	4659      	mov	r1, fp
 8003442:	4628      	mov	r0, r5
 8003444:	47b0      	blx	r6
 8003446:	3001      	adds	r0, #1
 8003448:	d1ea      	bne.n	8003420 <_printf_float+0x34c>
 800344a:	e69a      	b.n	8003182 <_printf_float+0xae>
 800344c:	2301      	movs	r3, #1
 800344e:	4642      	mov	r2, r8
 8003450:	4659      	mov	r1, fp
 8003452:	4628      	mov	r0, r5
 8003454:	47b0      	blx	r6
 8003456:	3001      	adds	r0, #1
 8003458:	f43f ae93 	beq.w	8003182 <_printf_float+0xae>
 800345c:	3701      	adds	r7, #1
 800345e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003462:	1a9b      	subs	r3, r3, r2
 8003464:	eba3 0309 	sub.w	r3, r3, r9
 8003468:	42bb      	cmp	r3, r7
 800346a:	dcef      	bgt.n	800344c <_printf_float+0x378>
 800346c:	e74d      	b.n	800330a <_printf_float+0x236>
 800346e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003470:	2a01      	cmp	r2, #1
 8003472:	dc01      	bgt.n	8003478 <_printf_float+0x3a4>
 8003474:	07db      	lsls	r3, r3, #31
 8003476:	d538      	bpl.n	80034ea <_printf_float+0x416>
 8003478:	2301      	movs	r3, #1
 800347a:	463a      	mov	r2, r7
 800347c:	4659      	mov	r1, fp
 800347e:	4628      	mov	r0, r5
 8003480:	47b0      	blx	r6
 8003482:	3001      	adds	r0, #1
 8003484:	f43f ae7d 	beq.w	8003182 <_printf_float+0xae>
 8003488:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800348c:	4659      	mov	r1, fp
 800348e:	4628      	mov	r0, r5
 8003490:	47b0      	blx	r6
 8003492:	3001      	adds	r0, #1
 8003494:	f107 0701 	add.w	r7, r7, #1
 8003498:	f43f ae73 	beq.w	8003182 <_printf_float+0xae>
 800349c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80034a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80034a2:	2200      	movs	r2, #0
 80034a4:	f103 38ff 	add.w	r8, r3, #4294967295
 80034a8:	2300      	movs	r3, #0
 80034aa:	f7fd fa7d 	bl	80009a8 <__aeabi_dcmpeq>
 80034ae:	b9c0      	cbnz	r0, 80034e2 <_printf_float+0x40e>
 80034b0:	4643      	mov	r3, r8
 80034b2:	463a      	mov	r2, r7
 80034b4:	4659      	mov	r1, fp
 80034b6:	4628      	mov	r0, r5
 80034b8:	47b0      	blx	r6
 80034ba:	3001      	adds	r0, #1
 80034bc:	d10d      	bne.n	80034da <_printf_float+0x406>
 80034be:	e660      	b.n	8003182 <_printf_float+0xae>
 80034c0:	2301      	movs	r3, #1
 80034c2:	4642      	mov	r2, r8
 80034c4:	4659      	mov	r1, fp
 80034c6:	4628      	mov	r0, r5
 80034c8:	47b0      	blx	r6
 80034ca:	3001      	adds	r0, #1
 80034cc:	f43f ae59 	beq.w	8003182 <_printf_float+0xae>
 80034d0:	3701      	adds	r7, #1
 80034d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80034d4:	3b01      	subs	r3, #1
 80034d6:	42bb      	cmp	r3, r7
 80034d8:	dcf2      	bgt.n	80034c0 <_printf_float+0x3ec>
 80034da:	464b      	mov	r3, r9
 80034dc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80034e0:	e6e4      	b.n	80032ac <_printf_float+0x1d8>
 80034e2:	2700      	movs	r7, #0
 80034e4:	f104 081a 	add.w	r8, r4, #26
 80034e8:	e7f3      	b.n	80034d2 <_printf_float+0x3fe>
 80034ea:	2301      	movs	r3, #1
 80034ec:	e7e1      	b.n	80034b2 <_printf_float+0x3de>
 80034ee:	2301      	movs	r3, #1
 80034f0:	4642      	mov	r2, r8
 80034f2:	4659      	mov	r1, fp
 80034f4:	4628      	mov	r0, r5
 80034f6:	47b0      	blx	r6
 80034f8:	3001      	adds	r0, #1
 80034fa:	f43f ae42 	beq.w	8003182 <_printf_float+0xae>
 80034fe:	3701      	adds	r7, #1
 8003500:	68e3      	ldr	r3, [r4, #12]
 8003502:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8003504:	1a9b      	subs	r3, r3, r2
 8003506:	42bb      	cmp	r3, r7
 8003508:	dcf1      	bgt.n	80034ee <_printf_float+0x41a>
 800350a:	e702      	b.n	8003312 <_printf_float+0x23e>
 800350c:	2700      	movs	r7, #0
 800350e:	f104 0819 	add.w	r8, r4, #25
 8003512:	e7f5      	b.n	8003500 <_printf_float+0x42c>
 8003514:	2b00      	cmp	r3, #0
 8003516:	f43f ae94 	beq.w	8003242 <_printf_float+0x16e>
 800351a:	f04f 0c00 	mov.w	ip, #0
 800351e:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8003522:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8003526:	6022      	str	r2, [r4, #0]
 8003528:	e9cd 0803 	strd	r0, r8, [sp, #12]
 800352c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	463a      	mov	r2, r7
 8003534:	464b      	mov	r3, r9
 8003536:	4628      	mov	r0, r5
 8003538:	f7ff fd3a 	bl	8002fb0 <__cvt>
 800353c:	4607      	mov	r7, r0
 800353e:	e64f      	b.n	80031e0 <_printf_float+0x10c>

08003540 <_printf_common>:
 8003540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003544:	4691      	mov	r9, r2
 8003546:	461f      	mov	r7, r3
 8003548:	688a      	ldr	r2, [r1, #8]
 800354a:	690b      	ldr	r3, [r1, #16]
 800354c:	4606      	mov	r6, r0
 800354e:	4293      	cmp	r3, r2
 8003550:	bfb8      	it	lt
 8003552:	4613      	movlt	r3, r2
 8003554:	f8c9 3000 	str.w	r3, [r9]
 8003558:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800355c:	460c      	mov	r4, r1
 800355e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003562:	b112      	cbz	r2, 800356a <_printf_common+0x2a>
 8003564:	3301      	adds	r3, #1
 8003566:	f8c9 3000 	str.w	r3, [r9]
 800356a:	6823      	ldr	r3, [r4, #0]
 800356c:	0699      	lsls	r1, r3, #26
 800356e:	bf42      	ittt	mi
 8003570:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003574:	3302      	addmi	r3, #2
 8003576:	f8c9 3000 	strmi.w	r3, [r9]
 800357a:	6825      	ldr	r5, [r4, #0]
 800357c:	f015 0506 	ands.w	r5, r5, #6
 8003580:	d107      	bne.n	8003592 <_printf_common+0x52>
 8003582:	f104 0a19 	add.w	sl, r4, #25
 8003586:	68e3      	ldr	r3, [r4, #12]
 8003588:	f8d9 2000 	ldr.w	r2, [r9]
 800358c:	1a9b      	subs	r3, r3, r2
 800358e:	42ab      	cmp	r3, r5
 8003590:	dc29      	bgt.n	80035e6 <_printf_common+0xa6>
 8003592:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003596:	6822      	ldr	r2, [r4, #0]
 8003598:	3300      	adds	r3, #0
 800359a:	bf18      	it	ne
 800359c:	2301      	movne	r3, #1
 800359e:	0692      	lsls	r2, r2, #26
 80035a0:	d42e      	bmi.n	8003600 <_printf_common+0xc0>
 80035a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80035a6:	4639      	mov	r1, r7
 80035a8:	4630      	mov	r0, r6
 80035aa:	47c0      	blx	r8
 80035ac:	3001      	adds	r0, #1
 80035ae:	d021      	beq.n	80035f4 <_printf_common+0xb4>
 80035b0:	6823      	ldr	r3, [r4, #0]
 80035b2:	68e5      	ldr	r5, [r4, #12]
 80035b4:	f003 0306 	and.w	r3, r3, #6
 80035b8:	2b04      	cmp	r3, #4
 80035ba:	bf18      	it	ne
 80035bc:	2500      	movne	r5, #0
 80035be:	f8d9 2000 	ldr.w	r2, [r9]
 80035c2:	f04f 0900 	mov.w	r9, #0
 80035c6:	bf08      	it	eq
 80035c8:	1aad      	subeq	r5, r5, r2
 80035ca:	68a3      	ldr	r3, [r4, #8]
 80035cc:	6922      	ldr	r2, [r4, #16]
 80035ce:	bf08      	it	eq
 80035d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80035d4:	4293      	cmp	r3, r2
 80035d6:	bfc4      	itt	gt
 80035d8:	1a9b      	subgt	r3, r3, r2
 80035da:	18ed      	addgt	r5, r5, r3
 80035dc:	341a      	adds	r4, #26
 80035de:	454d      	cmp	r5, r9
 80035e0:	d11a      	bne.n	8003618 <_printf_common+0xd8>
 80035e2:	2000      	movs	r0, #0
 80035e4:	e008      	b.n	80035f8 <_printf_common+0xb8>
 80035e6:	2301      	movs	r3, #1
 80035e8:	4652      	mov	r2, sl
 80035ea:	4639      	mov	r1, r7
 80035ec:	4630      	mov	r0, r6
 80035ee:	47c0      	blx	r8
 80035f0:	3001      	adds	r0, #1
 80035f2:	d103      	bne.n	80035fc <_printf_common+0xbc>
 80035f4:	f04f 30ff 	mov.w	r0, #4294967295
 80035f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035fc:	3501      	adds	r5, #1
 80035fe:	e7c2      	b.n	8003586 <_printf_common+0x46>
 8003600:	2030      	movs	r0, #48	; 0x30
 8003602:	18e1      	adds	r1, r4, r3
 8003604:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003608:	1c5a      	adds	r2, r3, #1
 800360a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800360e:	4422      	add	r2, r4
 8003610:	3302      	adds	r3, #2
 8003612:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003616:	e7c4      	b.n	80035a2 <_printf_common+0x62>
 8003618:	2301      	movs	r3, #1
 800361a:	4622      	mov	r2, r4
 800361c:	4639      	mov	r1, r7
 800361e:	4630      	mov	r0, r6
 8003620:	47c0      	blx	r8
 8003622:	3001      	adds	r0, #1
 8003624:	d0e6      	beq.n	80035f4 <_printf_common+0xb4>
 8003626:	f109 0901 	add.w	r9, r9, #1
 800362a:	e7d8      	b.n	80035de <_printf_common+0x9e>

0800362c <_printf_i>:
 800362c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003630:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003634:	460c      	mov	r4, r1
 8003636:	7e09      	ldrb	r1, [r1, #24]
 8003638:	b085      	sub	sp, #20
 800363a:	296e      	cmp	r1, #110	; 0x6e
 800363c:	4617      	mov	r7, r2
 800363e:	4606      	mov	r6, r0
 8003640:	4698      	mov	r8, r3
 8003642:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003644:	f000 80b3 	beq.w	80037ae <_printf_i+0x182>
 8003648:	d822      	bhi.n	8003690 <_printf_i+0x64>
 800364a:	2963      	cmp	r1, #99	; 0x63
 800364c:	d036      	beq.n	80036bc <_printf_i+0x90>
 800364e:	d80a      	bhi.n	8003666 <_printf_i+0x3a>
 8003650:	2900      	cmp	r1, #0
 8003652:	f000 80b9 	beq.w	80037c8 <_printf_i+0x19c>
 8003656:	2958      	cmp	r1, #88	; 0x58
 8003658:	f000 8083 	beq.w	8003762 <_printf_i+0x136>
 800365c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003660:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003664:	e032      	b.n	80036cc <_printf_i+0xa0>
 8003666:	2964      	cmp	r1, #100	; 0x64
 8003668:	d001      	beq.n	800366e <_printf_i+0x42>
 800366a:	2969      	cmp	r1, #105	; 0x69
 800366c:	d1f6      	bne.n	800365c <_printf_i+0x30>
 800366e:	6820      	ldr	r0, [r4, #0]
 8003670:	6813      	ldr	r3, [r2, #0]
 8003672:	0605      	lsls	r5, r0, #24
 8003674:	f103 0104 	add.w	r1, r3, #4
 8003678:	d52a      	bpl.n	80036d0 <_printf_i+0xa4>
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6011      	str	r1, [r2, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	da03      	bge.n	800368a <_printf_i+0x5e>
 8003682:	222d      	movs	r2, #45	; 0x2d
 8003684:	425b      	negs	r3, r3
 8003686:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800368a:	486f      	ldr	r0, [pc, #444]	; (8003848 <_printf_i+0x21c>)
 800368c:	220a      	movs	r2, #10
 800368e:	e039      	b.n	8003704 <_printf_i+0xd8>
 8003690:	2973      	cmp	r1, #115	; 0x73
 8003692:	f000 809d 	beq.w	80037d0 <_printf_i+0x1a4>
 8003696:	d808      	bhi.n	80036aa <_printf_i+0x7e>
 8003698:	296f      	cmp	r1, #111	; 0x6f
 800369a:	d020      	beq.n	80036de <_printf_i+0xb2>
 800369c:	2970      	cmp	r1, #112	; 0x70
 800369e:	d1dd      	bne.n	800365c <_printf_i+0x30>
 80036a0:	6823      	ldr	r3, [r4, #0]
 80036a2:	f043 0320 	orr.w	r3, r3, #32
 80036a6:	6023      	str	r3, [r4, #0]
 80036a8:	e003      	b.n	80036b2 <_printf_i+0x86>
 80036aa:	2975      	cmp	r1, #117	; 0x75
 80036ac:	d017      	beq.n	80036de <_printf_i+0xb2>
 80036ae:	2978      	cmp	r1, #120	; 0x78
 80036b0:	d1d4      	bne.n	800365c <_printf_i+0x30>
 80036b2:	2378      	movs	r3, #120	; 0x78
 80036b4:	4865      	ldr	r0, [pc, #404]	; (800384c <_printf_i+0x220>)
 80036b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80036ba:	e055      	b.n	8003768 <_printf_i+0x13c>
 80036bc:	6813      	ldr	r3, [r2, #0]
 80036be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80036c2:	1d19      	adds	r1, r3, #4
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6011      	str	r1, [r2, #0]
 80036c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80036cc:	2301      	movs	r3, #1
 80036ce:	e08c      	b.n	80037ea <_printf_i+0x1be>
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80036d6:	6011      	str	r1, [r2, #0]
 80036d8:	bf18      	it	ne
 80036da:	b21b      	sxthne	r3, r3
 80036dc:	e7cf      	b.n	800367e <_printf_i+0x52>
 80036de:	6813      	ldr	r3, [r2, #0]
 80036e0:	6825      	ldr	r5, [r4, #0]
 80036e2:	1d18      	adds	r0, r3, #4
 80036e4:	6010      	str	r0, [r2, #0]
 80036e6:	0628      	lsls	r0, r5, #24
 80036e8:	d501      	bpl.n	80036ee <_printf_i+0xc2>
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	e002      	b.n	80036f4 <_printf_i+0xc8>
 80036ee:	0668      	lsls	r0, r5, #25
 80036f0:	d5fb      	bpl.n	80036ea <_printf_i+0xbe>
 80036f2:	881b      	ldrh	r3, [r3, #0]
 80036f4:	296f      	cmp	r1, #111	; 0x6f
 80036f6:	bf14      	ite	ne
 80036f8:	220a      	movne	r2, #10
 80036fa:	2208      	moveq	r2, #8
 80036fc:	4852      	ldr	r0, [pc, #328]	; (8003848 <_printf_i+0x21c>)
 80036fe:	2100      	movs	r1, #0
 8003700:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003704:	6865      	ldr	r5, [r4, #4]
 8003706:	2d00      	cmp	r5, #0
 8003708:	60a5      	str	r5, [r4, #8]
 800370a:	f2c0 8095 	blt.w	8003838 <_printf_i+0x20c>
 800370e:	6821      	ldr	r1, [r4, #0]
 8003710:	f021 0104 	bic.w	r1, r1, #4
 8003714:	6021      	str	r1, [r4, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d13d      	bne.n	8003796 <_printf_i+0x16a>
 800371a:	2d00      	cmp	r5, #0
 800371c:	f040 808e 	bne.w	800383c <_printf_i+0x210>
 8003720:	4665      	mov	r5, ip
 8003722:	2a08      	cmp	r2, #8
 8003724:	d10b      	bne.n	800373e <_printf_i+0x112>
 8003726:	6823      	ldr	r3, [r4, #0]
 8003728:	07db      	lsls	r3, r3, #31
 800372a:	d508      	bpl.n	800373e <_printf_i+0x112>
 800372c:	6923      	ldr	r3, [r4, #16]
 800372e:	6862      	ldr	r2, [r4, #4]
 8003730:	429a      	cmp	r2, r3
 8003732:	bfde      	ittt	le
 8003734:	2330      	movle	r3, #48	; 0x30
 8003736:	f805 3c01 	strble.w	r3, [r5, #-1]
 800373a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800373e:	ebac 0305 	sub.w	r3, ip, r5
 8003742:	6123      	str	r3, [r4, #16]
 8003744:	f8cd 8000 	str.w	r8, [sp]
 8003748:	463b      	mov	r3, r7
 800374a:	aa03      	add	r2, sp, #12
 800374c:	4621      	mov	r1, r4
 800374e:	4630      	mov	r0, r6
 8003750:	f7ff fef6 	bl	8003540 <_printf_common>
 8003754:	3001      	adds	r0, #1
 8003756:	d14d      	bne.n	80037f4 <_printf_i+0x1c8>
 8003758:	f04f 30ff 	mov.w	r0, #4294967295
 800375c:	b005      	add	sp, #20
 800375e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003762:	4839      	ldr	r0, [pc, #228]	; (8003848 <_printf_i+0x21c>)
 8003764:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003768:	6813      	ldr	r3, [r2, #0]
 800376a:	6821      	ldr	r1, [r4, #0]
 800376c:	1d1d      	adds	r5, r3, #4
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	6015      	str	r5, [r2, #0]
 8003772:	060a      	lsls	r2, r1, #24
 8003774:	d50b      	bpl.n	800378e <_printf_i+0x162>
 8003776:	07ca      	lsls	r2, r1, #31
 8003778:	bf44      	itt	mi
 800377a:	f041 0120 	orrmi.w	r1, r1, #32
 800377e:	6021      	strmi	r1, [r4, #0]
 8003780:	b91b      	cbnz	r3, 800378a <_printf_i+0x15e>
 8003782:	6822      	ldr	r2, [r4, #0]
 8003784:	f022 0220 	bic.w	r2, r2, #32
 8003788:	6022      	str	r2, [r4, #0]
 800378a:	2210      	movs	r2, #16
 800378c:	e7b7      	b.n	80036fe <_printf_i+0xd2>
 800378e:	064d      	lsls	r5, r1, #25
 8003790:	bf48      	it	mi
 8003792:	b29b      	uxthmi	r3, r3
 8003794:	e7ef      	b.n	8003776 <_printf_i+0x14a>
 8003796:	4665      	mov	r5, ip
 8003798:	fbb3 f1f2 	udiv	r1, r3, r2
 800379c:	fb02 3311 	mls	r3, r2, r1, r3
 80037a0:	5cc3      	ldrb	r3, [r0, r3]
 80037a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80037a6:	460b      	mov	r3, r1
 80037a8:	2900      	cmp	r1, #0
 80037aa:	d1f5      	bne.n	8003798 <_printf_i+0x16c>
 80037ac:	e7b9      	b.n	8003722 <_printf_i+0xf6>
 80037ae:	6813      	ldr	r3, [r2, #0]
 80037b0:	6825      	ldr	r5, [r4, #0]
 80037b2:	1d18      	adds	r0, r3, #4
 80037b4:	6961      	ldr	r1, [r4, #20]
 80037b6:	6010      	str	r0, [r2, #0]
 80037b8:	0628      	lsls	r0, r5, #24
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	d501      	bpl.n	80037c2 <_printf_i+0x196>
 80037be:	6019      	str	r1, [r3, #0]
 80037c0:	e002      	b.n	80037c8 <_printf_i+0x19c>
 80037c2:	066a      	lsls	r2, r5, #25
 80037c4:	d5fb      	bpl.n	80037be <_printf_i+0x192>
 80037c6:	8019      	strh	r1, [r3, #0]
 80037c8:	2300      	movs	r3, #0
 80037ca:	4665      	mov	r5, ip
 80037cc:	6123      	str	r3, [r4, #16]
 80037ce:	e7b9      	b.n	8003744 <_printf_i+0x118>
 80037d0:	6813      	ldr	r3, [r2, #0]
 80037d2:	1d19      	adds	r1, r3, #4
 80037d4:	6011      	str	r1, [r2, #0]
 80037d6:	681d      	ldr	r5, [r3, #0]
 80037d8:	6862      	ldr	r2, [r4, #4]
 80037da:	2100      	movs	r1, #0
 80037dc:	4628      	mov	r0, r5
 80037de:	f000 ff73 	bl	80046c8 <memchr>
 80037e2:	b108      	cbz	r0, 80037e8 <_printf_i+0x1bc>
 80037e4:	1b40      	subs	r0, r0, r5
 80037e6:	6060      	str	r0, [r4, #4]
 80037e8:	6863      	ldr	r3, [r4, #4]
 80037ea:	6123      	str	r3, [r4, #16]
 80037ec:	2300      	movs	r3, #0
 80037ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037f2:	e7a7      	b.n	8003744 <_printf_i+0x118>
 80037f4:	6923      	ldr	r3, [r4, #16]
 80037f6:	462a      	mov	r2, r5
 80037f8:	4639      	mov	r1, r7
 80037fa:	4630      	mov	r0, r6
 80037fc:	47c0      	blx	r8
 80037fe:	3001      	adds	r0, #1
 8003800:	d0aa      	beq.n	8003758 <_printf_i+0x12c>
 8003802:	6823      	ldr	r3, [r4, #0]
 8003804:	079b      	lsls	r3, r3, #30
 8003806:	d413      	bmi.n	8003830 <_printf_i+0x204>
 8003808:	68e0      	ldr	r0, [r4, #12]
 800380a:	9b03      	ldr	r3, [sp, #12]
 800380c:	4298      	cmp	r0, r3
 800380e:	bfb8      	it	lt
 8003810:	4618      	movlt	r0, r3
 8003812:	e7a3      	b.n	800375c <_printf_i+0x130>
 8003814:	2301      	movs	r3, #1
 8003816:	464a      	mov	r2, r9
 8003818:	4639      	mov	r1, r7
 800381a:	4630      	mov	r0, r6
 800381c:	47c0      	blx	r8
 800381e:	3001      	adds	r0, #1
 8003820:	d09a      	beq.n	8003758 <_printf_i+0x12c>
 8003822:	3501      	adds	r5, #1
 8003824:	68e3      	ldr	r3, [r4, #12]
 8003826:	9a03      	ldr	r2, [sp, #12]
 8003828:	1a9b      	subs	r3, r3, r2
 800382a:	42ab      	cmp	r3, r5
 800382c:	dcf2      	bgt.n	8003814 <_printf_i+0x1e8>
 800382e:	e7eb      	b.n	8003808 <_printf_i+0x1dc>
 8003830:	2500      	movs	r5, #0
 8003832:	f104 0919 	add.w	r9, r4, #25
 8003836:	e7f5      	b.n	8003824 <_printf_i+0x1f8>
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1ac      	bne.n	8003796 <_printf_i+0x16a>
 800383c:	7803      	ldrb	r3, [r0, #0]
 800383e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003842:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003846:	e76c      	b.n	8003722 <_printf_i+0xf6>
 8003848:	08005682 	.word	0x08005682
 800384c:	08005693 	.word	0x08005693

08003850 <iprintf>:
 8003850:	b40f      	push	{r0, r1, r2, r3}
 8003852:	4b0a      	ldr	r3, [pc, #40]	; (800387c <iprintf+0x2c>)
 8003854:	b513      	push	{r0, r1, r4, lr}
 8003856:	681c      	ldr	r4, [r3, #0]
 8003858:	b124      	cbz	r4, 8003864 <iprintf+0x14>
 800385a:	69a3      	ldr	r3, [r4, #24]
 800385c:	b913      	cbnz	r3, 8003864 <iprintf+0x14>
 800385e:	4620      	mov	r0, r4
 8003860:	f000 fe92 	bl	8004588 <__sinit>
 8003864:	ab05      	add	r3, sp, #20
 8003866:	9a04      	ldr	r2, [sp, #16]
 8003868:	68a1      	ldr	r1, [r4, #8]
 800386a:	4620      	mov	r0, r4
 800386c:	9301      	str	r3, [sp, #4]
 800386e:	f001 fafd 	bl	8004e6c <_vfiprintf_r>
 8003872:	b002      	add	sp, #8
 8003874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003878:	b004      	add	sp, #16
 800387a:	4770      	bx	lr
 800387c:	2000000c 	.word	0x2000000c

08003880 <quorem>:
 8003880:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003884:	6903      	ldr	r3, [r0, #16]
 8003886:	690c      	ldr	r4, [r1, #16]
 8003888:	4680      	mov	r8, r0
 800388a:	42a3      	cmp	r3, r4
 800388c:	f2c0 8084 	blt.w	8003998 <quorem+0x118>
 8003890:	3c01      	subs	r4, #1
 8003892:	f101 0714 	add.w	r7, r1, #20
 8003896:	f100 0614 	add.w	r6, r0, #20
 800389a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800389e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80038a2:	3501      	adds	r5, #1
 80038a4:	fbb0 f5f5 	udiv	r5, r0, r5
 80038a8:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80038ac:	eb06 030c 	add.w	r3, r6, ip
 80038b0:	eb07 090c 	add.w	r9, r7, ip
 80038b4:	9301      	str	r3, [sp, #4]
 80038b6:	b39d      	cbz	r5, 8003920 <quorem+0xa0>
 80038b8:	f04f 0a00 	mov.w	sl, #0
 80038bc:	4638      	mov	r0, r7
 80038be:	46b6      	mov	lr, r6
 80038c0:	46d3      	mov	fp, sl
 80038c2:	f850 2b04 	ldr.w	r2, [r0], #4
 80038c6:	b293      	uxth	r3, r2
 80038c8:	fb05 a303 	mla	r3, r5, r3, sl
 80038cc:	0c12      	lsrs	r2, r2, #16
 80038ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80038d2:	fb05 a202 	mla	r2, r5, r2, sl
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	ebab 0303 	sub.w	r3, fp, r3
 80038dc:	f8de b000 	ldr.w	fp, [lr]
 80038e0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80038e4:	fa1f fb8b 	uxth.w	fp, fp
 80038e8:	445b      	add	r3, fp
 80038ea:	fa1f fb82 	uxth.w	fp, r2
 80038ee:	f8de 2000 	ldr.w	r2, [lr]
 80038f2:	4581      	cmp	r9, r0
 80038f4:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80038f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003902:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8003906:	f84e 3b04 	str.w	r3, [lr], #4
 800390a:	d2da      	bcs.n	80038c2 <quorem+0x42>
 800390c:	f856 300c 	ldr.w	r3, [r6, ip]
 8003910:	b933      	cbnz	r3, 8003920 <quorem+0xa0>
 8003912:	9b01      	ldr	r3, [sp, #4]
 8003914:	3b04      	subs	r3, #4
 8003916:	429e      	cmp	r6, r3
 8003918:	461a      	mov	r2, r3
 800391a:	d331      	bcc.n	8003980 <quorem+0x100>
 800391c:	f8c8 4010 	str.w	r4, [r8, #16]
 8003920:	4640      	mov	r0, r8
 8003922:	f001 f8ff 	bl	8004b24 <__mcmp>
 8003926:	2800      	cmp	r0, #0
 8003928:	db26      	blt.n	8003978 <quorem+0xf8>
 800392a:	4630      	mov	r0, r6
 800392c:	f04f 0c00 	mov.w	ip, #0
 8003930:	3501      	adds	r5, #1
 8003932:	f857 1b04 	ldr.w	r1, [r7], #4
 8003936:	f8d0 e000 	ldr.w	lr, [r0]
 800393a:	b28b      	uxth	r3, r1
 800393c:	ebac 0303 	sub.w	r3, ip, r3
 8003940:	fa1f f28e 	uxth.w	r2, lr
 8003944:	4413      	add	r3, r2
 8003946:	0c0a      	lsrs	r2, r1, #16
 8003948:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800394c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003950:	b29b      	uxth	r3, r3
 8003952:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003956:	45b9      	cmp	r9, r7
 8003958:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800395c:	f840 3b04 	str.w	r3, [r0], #4
 8003960:	d2e7      	bcs.n	8003932 <quorem+0xb2>
 8003962:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8003966:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800396a:	b92a      	cbnz	r2, 8003978 <quorem+0xf8>
 800396c:	3b04      	subs	r3, #4
 800396e:	429e      	cmp	r6, r3
 8003970:	461a      	mov	r2, r3
 8003972:	d30b      	bcc.n	800398c <quorem+0x10c>
 8003974:	f8c8 4010 	str.w	r4, [r8, #16]
 8003978:	4628      	mov	r0, r5
 800397a:	b003      	add	sp, #12
 800397c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003980:	6812      	ldr	r2, [r2, #0]
 8003982:	3b04      	subs	r3, #4
 8003984:	2a00      	cmp	r2, #0
 8003986:	d1c9      	bne.n	800391c <quorem+0x9c>
 8003988:	3c01      	subs	r4, #1
 800398a:	e7c4      	b.n	8003916 <quorem+0x96>
 800398c:	6812      	ldr	r2, [r2, #0]
 800398e:	3b04      	subs	r3, #4
 8003990:	2a00      	cmp	r2, #0
 8003992:	d1ef      	bne.n	8003974 <quorem+0xf4>
 8003994:	3c01      	subs	r4, #1
 8003996:	e7ea      	b.n	800396e <quorem+0xee>
 8003998:	2000      	movs	r0, #0
 800399a:	e7ee      	b.n	800397a <quorem+0xfa>
 800399c:	0000      	movs	r0, r0
	...

080039a0 <_dtoa_r>:
 80039a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039a4:	4616      	mov	r6, r2
 80039a6:	461f      	mov	r7, r3
 80039a8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80039aa:	b095      	sub	sp, #84	; 0x54
 80039ac:	4604      	mov	r4, r0
 80039ae:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80039b2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80039b6:	b93d      	cbnz	r5, 80039c8 <_dtoa_r+0x28>
 80039b8:	2010      	movs	r0, #16
 80039ba:	f000 fe7d 	bl	80046b8 <malloc>
 80039be:	6260      	str	r0, [r4, #36]	; 0x24
 80039c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80039c4:	6005      	str	r5, [r0, #0]
 80039c6:	60c5      	str	r5, [r0, #12]
 80039c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80039ca:	6819      	ldr	r1, [r3, #0]
 80039cc:	b151      	cbz	r1, 80039e4 <_dtoa_r+0x44>
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	2301      	movs	r3, #1
 80039d2:	4093      	lsls	r3, r2
 80039d4:	604a      	str	r2, [r1, #4]
 80039d6:	608b      	str	r3, [r1, #8]
 80039d8:	4620      	mov	r0, r4
 80039da:	f000 fec2 	bl	8004762 <_Bfree>
 80039de:	2200      	movs	r2, #0
 80039e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80039e2:	601a      	str	r2, [r3, #0]
 80039e4:	1e3b      	subs	r3, r7, #0
 80039e6:	bfaf      	iteee	ge
 80039e8:	2300      	movge	r3, #0
 80039ea:	2201      	movlt	r2, #1
 80039ec:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80039f0:	9303      	strlt	r3, [sp, #12]
 80039f2:	bfac      	ite	ge
 80039f4:	f8c8 3000 	strge.w	r3, [r8]
 80039f8:	f8c8 2000 	strlt.w	r2, [r8]
 80039fc:	4bae      	ldr	r3, [pc, #696]	; (8003cb8 <_dtoa_r+0x318>)
 80039fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8003a02:	ea33 0308 	bics.w	r3, r3, r8
 8003a06:	d11b      	bne.n	8003a40 <_dtoa_r+0xa0>
 8003a08:	f242 730f 	movw	r3, #9999	; 0x270f
 8003a0c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003a0e:	6013      	str	r3, [r2, #0]
 8003a10:	9b02      	ldr	r3, [sp, #8]
 8003a12:	b923      	cbnz	r3, 8003a1e <_dtoa_r+0x7e>
 8003a14:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8003a18:	2800      	cmp	r0, #0
 8003a1a:	f000 8545 	beq.w	80044a8 <_dtoa_r+0xb08>
 8003a1e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003a20:	b953      	cbnz	r3, 8003a38 <_dtoa_r+0x98>
 8003a22:	4ba6      	ldr	r3, [pc, #664]	; (8003cbc <_dtoa_r+0x31c>)
 8003a24:	e021      	b.n	8003a6a <_dtoa_r+0xca>
 8003a26:	4ba6      	ldr	r3, [pc, #664]	; (8003cc0 <_dtoa_r+0x320>)
 8003a28:	9306      	str	r3, [sp, #24]
 8003a2a:	3308      	adds	r3, #8
 8003a2c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003a2e:	6013      	str	r3, [r2, #0]
 8003a30:	9806      	ldr	r0, [sp, #24]
 8003a32:	b015      	add	sp, #84	; 0x54
 8003a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a38:	4ba0      	ldr	r3, [pc, #640]	; (8003cbc <_dtoa_r+0x31c>)
 8003a3a:	9306      	str	r3, [sp, #24]
 8003a3c:	3303      	adds	r3, #3
 8003a3e:	e7f5      	b.n	8003a2c <_dtoa_r+0x8c>
 8003a40:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003a44:	2200      	movs	r2, #0
 8003a46:	2300      	movs	r3, #0
 8003a48:	4630      	mov	r0, r6
 8003a4a:	4639      	mov	r1, r7
 8003a4c:	f7fc ffac 	bl	80009a8 <__aeabi_dcmpeq>
 8003a50:	4682      	mov	sl, r0
 8003a52:	b160      	cbz	r0, 8003a6e <_dtoa_r+0xce>
 8003a54:	2301      	movs	r3, #1
 8003a56:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003a58:	6013      	str	r3, [r2, #0]
 8003a5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 8520 	beq.w	80044a2 <_dtoa_r+0xb02>
 8003a62:	4b98      	ldr	r3, [pc, #608]	; (8003cc4 <_dtoa_r+0x324>)
 8003a64:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003a66:	6013      	str	r3, [r2, #0]
 8003a68:	3b01      	subs	r3, #1
 8003a6a:	9306      	str	r3, [sp, #24]
 8003a6c:	e7e0      	b.n	8003a30 <_dtoa_r+0x90>
 8003a6e:	ab12      	add	r3, sp, #72	; 0x48
 8003a70:	9301      	str	r3, [sp, #4]
 8003a72:	ab13      	add	r3, sp, #76	; 0x4c
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	4632      	mov	r2, r6
 8003a78:	463b      	mov	r3, r7
 8003a7a:	4620      	mov	r0, r4
 8003a7c:	f001 f8ca 	bl	8004c14 <__d2b>
 8003a80:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8003a84:	4683      	mov	fp, r0
 8003a86:	2d00      	cmp	r5, #0
 8003a88:	d07d      	beq.n	8003b86 <_dtoa_r+0x1e6>
 8003a8a:	46b0      	mov	r8, r6
 8003a8c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003a90:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8003a94:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8003a98:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003a9c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	4b89      	ldr	r3, [pc, #548]	; (8003cc8 <_dtoa_r+0x328>)
 8003aa4:	4640      	mov	r0, r8
 8003aa6:	4649      	mov	r1, r9
 8003aa8:	f7fc fb5e 	bl	8000168 <__aeabi_dsub>
 8003aac:	a37c      	add	r3, pc, #496	; (adr r3, 8003ca0 <_dtoa_r+0x300>)
 8003aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab2:	f7fc fd11 	bl	80004d8 <__aeabi_dmul>
 8003ab6:	a37c      	add	r3, pc, #496	; (adr r3, 8003ca8 <_dtoa_r+0x308>)
 8003ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003abc:	f7fc fb56 	bl	800016c <__adddf3>
 8003ac0:	4606      	mov	r6, r0
 8003ac2:	4628      	mov	r0, r5
 8003ac4:	460f      	mov	r7, r1
 8003ac6:	f7fc fc9d 	bl	8000404 <__aeabi_i2d>
 8003aca:	a379      	add	r3, pc, #484	; (adr r3, 8003cb0 <_dtoa_r+0x310>)
 8003acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad0:	f7fc fd02 	bl	80004d8 <__aeabi_dmul>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	4630      	mov	r0, r6
 8003ada:	4639      	mov	r1, r7
 8003adc:	f7fc fb46 	bl	800016c <__adddf3>
 8003ae0:	4606      	mov	r6, r0
 8003ae2:	460f      	mov	r7, r1
 8003ae4:	f7fc ffa8 	bl	8000a38 <__aeabi_d2iz>
 8003ae8:	2200      	movs	r2, #0
 8003aea:	4682      	mov	sl, r0
 8003aec:	2300      	movs	r3, #0
 8003aee:	4630      	mov	r0, r6
 8003af0:	4639      	mov	r1, r7
 8003af2:	f7fc ff63 	bl	80009bc <__aeabi_dcmplt>
 8003af6:	b148      	cbz	r0, 8003b0c <_dtoa_r+0x16c>
 8003af8:	4650      	mov	r0, sl
 8003afa:	f7fc fc83 	bl	8000404 <__aeabi_i2d>
 8003afe:	4632      	mov	r2, r6
 8003b00:	463b      	mov	r3, r7
 8003b02:	f7fc ff51 	bl	80009a8 <__aeabi_dcmpeq>
 8003b06:	b908      	cbnz	r0, 8003b0c <_dtoa_r+0x16c>
 8003b08:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003b0c:	f1ba 0f16 	cmp.w	sl, #22
 8003b10:	d85a      	bhi.n	8003bc8 <_dtoa_r+0x228>
 8003b12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003b16:	496d      	ldr	r1, [pc, #436]	; (8003ccc <_dtoa_r+0x32c>)
 8003b18:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8003b1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003b20:	f7fc ff6a 	bl	80009f8 <__aeabi_dcmpgt>
 8003b24:	2800      	cmp	r0, #0
 8003b26:	d051      	beq.n	8003bcc <_dtoa_r+0x22c>
 8003b28:	2300      	movs	r3, #0
 8003b2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003b2e:	930d      	str	r3, [sp, #52]	; 0x34
 8003b30:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003b32:	1b5d      	subs	r5, r3, r5
 8003b34:	1e6b      	subs	r3, r5, #1
 8003b36:	9307      	str	r3, [sp, #28]
 8003b38:	bf43      	ittte	mi
 8003b3a:	2300      	movmi	r3, #0
 8003b3c:	f1c5 0901 	rsbmi	r9, r5, #1
 8003b40:	9307      	strmi	r3, [sp, #28]
 8003b42:	f04f 0900 	movpl.w	r9, #0
 8003b46:	f1ba 0f00 	cmp.w	sl, #0
 8003b4a:	db41      	blt.n	8003bd0 <_dtoa_r+0x230>
 8003b4c:	9b07      	ldr	r3, [sp, #28]
 8003b4e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8003b52:	4453      	add	r3, sl
 8003b54:	9307      	str	r3, [sp, #28]
 8003b56:	2300      	movs	r3, #0
 8003b58:	9308      	str	r3, [sp, #32]
 8003b5a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003b5c:	2b09      	cmp	r3, #9
 8003b5e:	f200 808f 	bhi.w	8003c80 <_dtoa_r+0x2e0>
 8003b62:	2b05      	cmp	r3, #5
 8003b64:	bfc4      	itt	gt
 8003b66:	3b04      	subgt	r3, #4
 8003b68:	931e      	strgt	r3, [sp, #120]	; 0x78
 8003b6a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003b6c:	bfc8      	it	gt
 8003b6e:	2500      	movgt	r5, #0
 8003b70:	f1a3 0302 	sub.w	r3, r3, #2
 8003b74:	bfd8      	it	le
 8003b76:	2501      	movle	r5, #1
 8003b78:	2b03      	cmp	r3, #3
 8003b7a:	f200 808d 	bhi.w	8003c98 <_dtoa_r+0x2f8>
 8003b7e:	e8df f003 	tbb	[pc, r3]
 8003b82:	7d7b      	.short	0x7d7b
 8003b84:	6f2f      	.short	0x6f2f
 8003b86:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8003b8a:	441d      	add	r5, r3
 8003b8c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8003b90:	2820      	cmp	r0, #32
 8003b92:	dd13      	ble.n	8003bbc <_dtoa_r+0x21c>
 8003b94:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8003b98:	9b02      	ldr	r3, [sp, #8]
 8003b9a:	fa08 f800 	lsl.w	r8, r8, r0
 8003b9e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8003ba2:	fa23 f000 	lsr.w	r0, r3, r0
 8003ba6:	ea48 0000 	orr.w	r0, r8, r0
 8003baa:	f7fc fc1b 	bl	80003e4 <__aeabi_ui2d>
 8003bae:	2301      	movs	r3, #1
 8003bb0:	4680      	mov	r8, r0
 8003bb2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 8003bb6:	3d01      	subs	r5, #1
 8003bb8:	9310      	str	r3, [sp, #64]	; 0x40
 8003bba:	e771      	b.n	8003aa0 <_dtoa_r+0x100>
 8003bbc:	9b02      	ldr	r3, [sp, #8]
 8003bbe:	f1c0 0020 	rsb	r0, r0, #32
 8003bc2:	fa03 f000 	lsl.w	r0, r3, r0
 8003bc6:	e7f0      	b.n	8003baa <_dtoa_r+0x20a>
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e7b0      	b.n	8003b2e <_dtoa_r+0x18e>
 8003bcc:	900d      	str	r0, [sp, #52]	; 0x34
 8003bce:	e7af      	b.n	8003b30 <_dtoa_r+0x190>
 8003bd0:	f1ca 0300 	rsb	r3, sl, #0
 8003bd4:	9308      	str	r3, [sp, #32]
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	eba9 090a 	sub.w	r9, r9, sl
 8003bdc:	930c      	str	r3, [sp, #48]	; 0x30
 8003bde:	e7bc      	b.n	8003b5a <_dtoa_r+0x1ba>
 8003be0:	2301      	movs	r3, #1
 8003be2:	9309      	str	r3, [sp, #36]	; 0x24
 8003be4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	dd74      	ble.n	8003cd4 <_dtoa_r+0x334>
 8003bea:	4698      	mov	r8, r3
 8003bec:	9304      	str	r3, [sp, #16]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003bf2:	6072      	str	r2, [r6, #4]
 8003bf4:	2204      	movs	r2, #4
 8003bf6:	f102 0014 	add.w	r0, r2, #20
 8003bfa:	4298      	cmp	r0, r3
 8003bfc:	6871      	ldr	r1, [r6, #4]
 8003bfe:	d96e      	bls.n	8003cde <_dtoa_r+0x33e>
 8003c00:	4620      	mov	r0, r4
 8003c02:	f000 fd7a 	bl	80046fa <_Balloc>
 8003c06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c08:	6030      	str	r0, [r6, #0]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f1b8 0f0e 	cmp.w	r8, #14
 8003c10:	9306      	str	r3, [sp, #24]
 8003c12:	f200 80ed 	bhi.w	8003df0 <_dtoa_r+0x450>
 8003c16:	2d00      	cmp	r5, #0
 8003c18:	f000 80ea 	beq.w	8003df0 <_dtoa_r+0x450>
 8003c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003c20:	f1ba 0f00 	cmp.w	sl, #0
 8003c24:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8003c28:	dd77      	ble.n	8003d1a <_dtoa_r+0x37a>
 8003c2a:	4a28      	ldr	r2, [pc, #160]	; (8003ccc <_dtoa_r+0x32c>)
 8003c2c:	f00a 030f 	and.w	r3, sl, #15
 8003c30:	ea4f 162a 	mov.w	r6, sl, asr #4
 8003c34:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003c38:	06f0      	lsls	r0, r6, #27
 8003c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c3e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003c42:	d568      	bpl.n	8003d16 <_dtoa_r+0x376>
 8003c44:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003c48:	4b21      	ldr	r3, [pc, #132]	; (8003cd0 <_dtoa_r+0x330>)
 8003c4a:	2503      	movs	r5, #3
 8003c4c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003c50:	f7fc fd6c 	bl	800072c <__aeabi_ddiv>
 8003c54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c58:	f006 060f 	and.w	r6, r6, #15
 8003c5c:	4f1c      	ldr	r7, [pc, #112]	; (8003cd0 <_dtoa_r+0x330>)
 8003c5e:	e04f      	b.n	8003d00 <_dtoa_r+0x360>
 8003c60:	2301      	movs	r3, #1
 8003c62:	9309      	str	r3, [sp, #36]	; 0x24
 8003c64:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003c66:	4453      	add	r3, sl
 8003c68:	f103 0801 	add.w	r8, r3, #1
 8003c6c:	9304      	str	r3, [sp, #16]
 8003c6e:	4643      	mov	r3, r8
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	bfb8      	it	lt
 8003c74:	2301      	movlt	r3, #1
 8003c76:	e7ba      	b.n	8003bee <_dtoa_r+0x24e>
 8003c78:	2300      	movs	r3, #0
 8003c7a:	e7b2      	b.n	8003be2 <_dtoa_r+0x242>
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	e7f0      	b.n	8003c62 <_dtoa_r+0x2c2>
 8003c80:	2501      	movs	r5, #1
 8003c82:	2300      	movs	r3, #0
 8003c84:	9509      	str	r5, [sp, #36]	; 0x24
 8003c86:	931e      	str	r3, [sp, #120]	; 0x78
 8003c88:	f04f 33ff 	mov.w	r3, #4294967295
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	9304      	str	r3, [sp, #16]
 8003c90:	4698      	mov	r8, r3
 8003c92:	2312      	movs	r3, #18
 8003c94:	921f      	str	r2, [sp, #124]	; 0x7c
 8003c96:	e7aa      	b.n	8003bee <_dtoa_r+0x24e>
 8003c98:	2301      	movs	r3, #1
 8003c9a:	9309      	str	r3, [sp, #36]	; 0x24
 8003c9c:	e7f4      	b.n	8003c88 <_dtoa_r+0x2e8>
 8003c9e:	bf00      	nop
 8003ca0:	636f4361 	.word	0x636f4361
 8003ca4:	3fd287a7 	.word	0x3fd287a7
 8003ca8:	8b60c8b3 	.word	0x8b60c8b3
 8003cac:	3fc68a28 	.word	0x3fc68a28
 8003cb0:	509f79fb 	.word	0x509f79fb
 8003cb4:	3fd34413 	.word	0x3fd34413
 8003cb8:	7ff00000 	.word	0x7ff00000
 8003cbc:	080056ad 	.word	0x080056ad
 8003cc0:	080056a4 	.word	0x080056a4
 8003cc4:	08005681 	.word	0x08005681
 8003cc8:	3ff80000 	.word	0x3ff80000
 8003ccc:	08005740 	.word	0x08005740
 8003cd0:	08005718 	.word	0x08005718
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	9304      	str	r3, [sp, #16]
 8003cd8:	4698      	mov	r8, r3
 8003cda:	461a      	mov	r2, r3
 8003cdc:	e7da      	b.n	8003c94 <_dtoa_r+0x2f4>
 8003cde:	3101      	adds	r1, #1
 8003ce0:	6071      	str	r1, [r6, #4]
 8003ce2:	0052      	lsls	r2, r2, #1
 8003ce4:	e787      	b.n	8003bf6 <_dtoa_r+0x256>
 8003ce6:	07f1      	lsls	r1, r6, #31
 8003ce8:	d508      	bpl.n	8003cfc <_dtoa_r+0x35c>
 8003cea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003cee:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cf2:	f7fc fbf1 	bl	80004d8 <__aeabi_dmul>
 8003cf6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003cfa:	3501      	adds	r5, #1
 8003cfc:	1076      	asrs	r6, r6, #1
 8003cfe:	3708      	adds	r7, #8
 8003d00:	2e00      	cmp	r6, #0
 8003d02:	d1f0      	bne.n	8003ce6 <_dtoa_r+0x346>
 8003d04:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003d08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d0c:	f7fc fd0e 	bl	800072c <__aeabi_ddiv>
 8003d10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d14:	e01b      	b.n	8003d4e <_dtoa_r+0x3ae>
 8003d16:	2502      	movs	r5, #2
 8003d18:	e7a0      	b.n	8003c5c <_dtoa_r+0x2bc>
 8003d1a:	f000 80a4 	beq.w	8003e66 <_dtoa_r+0x4c6>
 8003d1e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003d22:	f1ca 0600 	rsb	r6, sl, #0
 8003d26:	4ba0      	ldr	r3, [pc, #640]	; (8003fa8 <_dtoa_r+0x608>)
 8003d28:	f006 020f 	and.w	r2, r6, #15
 8003d2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d34:	f7fc fbd0 	bl	80004d8 <__aeabi_dmul>
 8003d38:	2502      	movs	r5, #2
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d40:	4f9a      	ldr	r7, [pc, #616]	; (8003fac <_dtoa_r+0x60c>)
 8003d42:	1136      	asrs	r6, r6, #4
 8003d44:	2e00      	cmp	r6, #0
 8003d46:	f040 8083 	bne.w	8003e50 <_dtoa_r+0x4b0>
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1e0      	bne.n	8003d10 <_dtoa_r+0x370>
 8003d4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 808a 	beq.w	8003e6a <_dtoa_r+0x4ca>
 8003d56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003d5a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003d5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003d62:	2200      	movs	r2, #0
 8003d64:	4b92      	ldr	r3, [pc, #584]	; (8003fb0 <_dtoa_r+0x610>)
 8003d66:	f7fc fe29 	bl	80009bc <__aeabi_dcmplt>
 8003d6a:	2800      	cmp	r0, #0
 8003d6c:	d07d      	beq.n	8003e6a <_dtoa_r+0x4ca>
 8003d6e:	f1b8 0f00 	cmp.w	r8, #0
 8003d72:	d07a      	beq.n	8003e6a <_dtoa_r+0x4ca>
 8003d74:	9b04      	ldr	r3, [sp, #16]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	dd36      	ble.n	8003de8 <_dtoa_r+0x448>
 8003d7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003d7e:	2200      	movs	r2, #0
 8003d80:	4b8c      	ldr	r3, [pc, #560]	; (8003fb4 <_dtoa_r+0x614>)
 8003d82:	f7fc fba9 	bl	80004d8 <__aeabi_dmul>
 8003d86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d8a:	9e04      	ldr	r6, [sp, #16]
 8003d8c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8003d90:	3501      	adds	r5, #1
 8003d92:	4628      	mov	r0, r5
 8003d94:	f7fc fb36 	bl	8000404 <__aeabi_i2d>
 8003d98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003d9c:	f7fc fb9c 	bl	80004d8 <__aeabi_dmul>
 8003da0:	2200      	movs	r2, #0
 8003da2:	4b85      	ldr	r3, [pc, #532]	; (8003fb8 <_dtoa_r+0x618>)
 8003da4:	f7fc f9e2 	bl	800016c <__adddf3>
 8003da8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8003dac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003db0:	950b      	str	r5, [sp, #44]	; 0x2c
 8003db2:	2e00      	cmp	r6, #0
 8003db4:	d15c      	bne.n	8003e70 <_dtoa_r+0x4d0>
 8003db6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	4b7f      	ldr	r3, [pc, #508]	; (8003fbc <_dtoa_r+0x61c>)
 8003dbe:	f7fc f9d3 	bl	8000168 <__aeabi_dsub>
 8003dc2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003dc4:	462b      	mov	r3, r5
 8003dc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003dca:	f7fc fe15 	bl	80009f8 <__aeabi_dcmpgt>
 8003dce:	2800      	cmp	r0, #0
 8003dd0:	f040 8281 	bne.w	80042d6 <_dtoa_r+0x936>
 8003dd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003dd8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003dda:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8003dde:	f7fc fded 	bl	80009bc <__aeabi_dcmplt>
 8003de2:	2800      	cmp	r0, #0
 8003de4:	f040 8275 	bne.w	80042d2 <_dtoa_r+0x932>
 8003de8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8003dec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003df0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f2c0 814b 	blt.w	800408e <_dtoa_r+0x6ee>
 8003df8:	f1ba 0f0e 	cmp.w	sl, #14
 8003dfc:	f300 8147 	bgt.w	800408e <_dtoa_r+0x6ee>
 8003e00:	4b69      	ldr	r3, [pc, #420]	; (8003fa8 <_dtoa_r+0x608>)
 8003e02:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8003e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003e0e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f280 80d7 	bge.w	8003fc4 <_dtoa_r+0x624>
 8003e16:	f1b8 0f00 	cmp.w	r8, #0
 8003e1a:	f300 80d3 	bgt.w	8003fc4 <_dtoa_r+0x624>
 8003e1e:	f040 8257 	bne.w	80042d0 <_dtoa_r+0x930>
 8003e22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003e26:	2200      	movs	r2, #0
 8003e28:	4b64      	ldr	r3, [pc, #400]	; (8003fbc <_dtoa_r+0x61c>)
 8003e2a:	f7fc fb55 	bl	80004d8 <__aeabi_dmul>
 8003e2e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003e32:	f7fc fdd7 	bl	80009e4 <__aeabi_dcmpge>
 8003e36:	4646      	mov	r6, r8
 8003e38:	4647      	mov	r7, r8
 8003e3a:	2800      	cmp	r0, #0
 8003e3c:	f040 822d 	bne.w	800429a <_dtoa_r+0x8fa>
 8003e40:	9b06      	ldr	r3, [sp, #24]
 8003e42:	9a06      	ldr	r2, [sp, #24]
 8003e44:	1c5d      	adds	r5, r3, #1
 8003e46:	2331      	movs	r3, #49	; 0x31
 8003e48:	f10a 0a01 	add.w	sl, sl, #1
 8003e4c:	7013      	strb	r3, [r2, #0]
 8003e4e:	e228      	b.n	80042a2 <_dtoa_r+0x902>
 8003e50:	07f2      	lsls	r2, r6, #31
 8003e52:	d505      	bpl.n	8003e60 <_dtoa_r+0x4c0>
 8003e54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e58:	f7fc fb3e 	bl	80004d8 <__aeabi_dmul>
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	3501      	adds	r5, #1
 8003e60:	1076      	asrs	r6, r6, #1
 8003e62:	3708      	adds	r7, #8
 8003e64:	e76e      	b.n	8003d44 <_dtoa_r+0x3a4>
 8003e66:	2502      	movs	r5, #2
 8003e68:	e771      	b.n	8003d4e <_dtoa_r+0x3ae>
 8003e6a:	4657      	mov	r7, sl
 8003e6c:	4646      	mov	r6, r8
 8003e6e:	e790      	b.n	8003d92 <_dtoa_r+0x3f2>
 8003e70:	4b4d      	ldr	r3, [pc, #308]	; (8003fa8 <_dtoa_r+0x608>)
 8003e72:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003e76:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8003e7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d048      	beq.n	8003f12 <_dtoa_r+0x572>
 8003e80:	4602      	mov	r2, r0
 8003e82:	460b      	mov	r3, r1
 8003e84:	2000      	movs	r0, #0
 8003e86:	494e      	ldr	r1, [pc, #312]	; (8003fc0 <_dtoa_r+0x620>)
 8003e88:	f7fc fc50 	bl	800072c <__aeabi_ddiv>
 8003e8c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003e90:	f7fc f96a 	bl	8000168 <__aeabi_dsub>
 8003e94:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003e98:	9d06      	ldr	r5, [sp, #24]
 8003e9a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e9e:	f7fc fdcb 	bl	8000a38 <__aeabi_d2iz>
 8003ea2:	9011      	str	r0, [sp, #68]	; 0x44
 8003ea4:	f7fc faae 	bl	8000404 <__aeabi_i2d>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	460b      	mov	r3, r1
 8003eac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003eb0:	f7fc f95a 	bl	8000168 <__aeabi_dsub>
 8003eb4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003eb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003eba:	3330      	adds	r3, #48	; 0x30
 8003ebc:	f805 3b01 	strb.w	r3, [r5], #1
 8003ec0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003ec4:	f7fc fd7a 	bl	80009bc <__aeabi_dcmplt>
 8003ec8:	2800      	cmp	r0, #0
 8003eca:	d163      	bne.n	8003f94 <_dtoa_r+0x5f4>
 8003ecc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003ed0:	2000      	movs	r0, #0
 8003ed2:	4937      	ldr	r1, [pc, #220]	; (8003fb0 <_dtoa_r+0x610>)
 8003ed4:	f7fc f948 	bl	8000168 <__aeabi_dsub>
 8003ed8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003edc:	f7fc fd6e 	bl	80009bc <__aeabi_dcmplt>
 8003ee0:	2800      	cmp	r0, #0
 8003ee2:	f040 80b5 	bne.w	8004050 <_dtoa_r+0x6b0>
 8003ee6:	9b06      	ldr	r3, [sp, #24]
 8003ee8:	1aeb      	subs	r3, r5, r3
 8003eea:	429e      	cmp	r6, r3
 8003eec:	f77f af7c 	ble.w	8003de8 <_dtoa_r+0x448>
 8003ef0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	4b2f      	ldr	r3, [pc, #188]	; (8003fb4 <_dtoa_r+0x614>)
 8003ef8:	f7fc faee 	bl	80004d8 <__aeabi_dmul>
 8003efc:	2200      	movs	r2, #0
 8003efe:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003f02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f06:	4b2b      	ldr	r3, [pc, #172]	; (8003fb4 <_dtoa_r+0x614>)
 8003f08:	f7fc fae6 	bl	80004d8 <__aeabi_dmul>
 8003f0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f10:	e7c3      	b.n	8003e9a <_dtoa_r+0x4fa>
 8003f12:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003f16:	f7fc fadf 	bl	80004d8 <__aeabi_dmul>
 8003f1a:	9b06      	ldr	r3, [sp, #24]
 8003f1c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003f20:	199d      	adds	r5, r3, r6
 8003f22:	461e      	mov	r6, r3
 8003f24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f28:	f7fc fd86 	bl	8000a38 <__aeabi_d2iz>
 8003f2c:	9011      	str	r0, [sp, #68]	; 0x44
 8003f2e:	f7fc fa69 	bl	8000404 <__aeabi_i2d>
 8003f32:	4602      	mov	r2, r0
 8003f34:	460b      	mov	r3, r1
 8003f36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f3a:	f7fc f915 	bl	8000168 <__aeabi_dsub>
 8003f3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003f40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003f44:	3330      	adds	r3, #48	; 0x30
 8003f46:	f806 3b01 	strb.w	r3, [r6], #1
 8003f4a:	42ae      	cmp	r6, r5
 8003f4c:	f04f 0200 	mov.w	r2, #0
 8003f50:	d124      	bne.n	8003f9c <_dtoa_r+0x5fc>
 8003f52:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003f56:	4b1a      	ldr	r3, [pc, #104]	; (8003fc0 <_dtoa_r+0x620>)
 8003f58:	f7fc f908 	bl	800016c <__adddf3>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	460b      	mov	r3, r1
 8003f60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f64:	f7fc fd48 	bl	80009f8 <__aeabi_dcmpgt>
 8003f68:	2800      	cmp	r0, #0
 8003f6a:	d171      	bne.n	8004050 <_dtoa_r+0x6b0>
 8003f6c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003f70:	2000      	movs	r0, #0
 8003f72:	4913      	ldr	r1, [pc, #76]	; (8003fc0 <_dtoa_r+0x620>)
 8003f74:	f7fc f8f8 	bl	8000168 <__aeabi_dsub>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f80:	f7fc fd1c 	bl	80009bc <__aeabi_dcmplt>
 8003f84:	2800      	cmp	r0, #0
 8003f86:	f43f af2f 	beq.w	8003de8 <_dtoa_r+0x448>
 8003f8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003f8e:	1e6a      	subs	r2, r5, #1
 8003f90:	2b30      	cmp	r3, #48	; 0x30
 8003f92:	d001      	beq.n	8003f98 <_dtoa_r+0x5f8>
 8003f94:	46ba      	mov	sl, r7
 8003f96:	e04a      	b.n	800402e <_dtoa_r+0x68e>
 8003f98:	4615      	mov	r5, r2
 8003f9a:	e7f6      	b.n	8003f8a <_dtoa_r+0x5ea>
 8003f9c:	4b05      	ldr	r3, [pc, #20]	; (8003fb4 <_dtoa_r+0x614>)
 8003f9e:	f7fc fa9b 	bl	80004d8 <__aeabi_dmul>
 8003fa2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003fa6:	e7bd      	b.n	8003f24 <_dtoa_r+0x584>
 8003fa8:	08005740 	.word	0x08005740
 8003fac:	08005718 	.word	0x08005718
 8003fb0:	3ff00000 	.word	0x3ff00000
 8003fb4:	40240000 	.word	0x40240000
 8003fb8:	401c0000 	.word	0x401c0000
 8003fbc:	40140000 	.word	0x40140000
 8003fc0:	3fe00000 	.word	0x3fe00000
 8003fc4:	9d06      	ldr	r5, [sp, #24]
 8003fc6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003fca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003fce:	4630      	mov	r0, r6
 8003fd0:	4639      	mov	r1, r7
 8003fd2:	f7fc fbab 	bl	800072c <__aeabi_ddiv>
 8003fd6:	f7fc fd2f 	bl	8000a38 <__aeabi_d2iz>
 8003fda:	4681      	mov	r9, r0
 8003fdc:	f7fc fa12 	bl	8000404 <__aeabi_i2d>
 8003fe0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003fe4:	f7fc fa78 	bl	80004d8 <__aeabi_dmul>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	460b      	mov	r3, r1
 8003fec:	4630      	mov	r0, r6
 8003fee:	4639      	mov	r1, r7
 8003ff0:	f7fc f8ba 	bl	8000168 <__aeabi_dsub>
 8003ff4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8003ff8:	f805 6b01 	strb.w	r6, [r5], #1
 8003ffc:	9e06      	ldr	r6, [sp, #24]
 8003ffe:	4602      	mov	r2, r0
 8004000:	1bae      	subs	r6, r5, r6
 8004002:	45b0      	cmp	r8, r6
 8004004:	460b      	mov	r3, r1
 8004006:	d135      	bne.n	8004074 <_dtoa_r+0x6d4>
 8004008:	f7fc f8b0 	bl	800016c <__adddf3>
 800400c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004010:	4606      	mov	r6, r0
 8004012:	460f      	mov	r7, r1
 8004014:	f7fc fcf0 	bl	80009f8 <__aeabi_dcmpgt>
 8004018:	b9c8      	cbnz	r0, 800404e <_dtoa_r+0x6ae>
 800401a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800401e:	4630      	mov	r0, r6
 8004020:	4639      	mov	r1, r7
 8004022:	f7fc fcc1 	bl	80009a8 <__aeabi_dcmpeq>
 8004026:	b110      	cbz	r0, 800402e <_dtoa_r+0x68e>
 8004028:	f019 0f01 	tst.w	r9, #1
 800402c:	d10f      	bne.n	800404e <_dtoa_r+0x6ae>
 800402e:	4659      	mov	r1, fp
 8004030:	4620      	mov	r0, r4
 8004032:	f000 fb96 	bl	8004762 <_Bfree>
 8004036:	2300      	movs	r3, #0
 8004038:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800403a:	702b      	strb	r3, [r5, #0]
 800403c:	f10a 0301 	add.w	r3, sl, #1
 8004040:	6013      	str	r3, [r2, #0]
 8004042:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004044:	2b00      	cmp	r3, #0
 8004046:	f43f acf3 	beq.w	8003a30 <_dtoa_r+0x90>
 800404a:	601d      	str	r5, [r3, #0]
 800404c:	e4f0      	b.n	8003a30 <_dtoa_r+0x90>
 800404e:	4657      	mov	r7, sl
 8004050:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004054:	1e6b      	subs	r3, r5, #1
 8004056:	2a39      	cmp	r2, #57	; 0x39
 8004058:	d106      	bne.n	8004068 <_dtoa_r+0x6c8>
 800405a:	9a06      	ldr	r2, [sp, #24]
 800405c:	429a      	cmp	r2, r3
 800405e:	d107      	bne.n	8004070 <_dtoa_r+0x6d0>
 8004060:	2330      	movs	r3, #48	; 0x30
 8004062:	7013      	strb	r3, [r2, #0]
 8004064:	4613      	mov	r3, r2
 8004066:	3701      	adds	r7, #1
 8004068:	781a      	ldrb	r2, [r3, #0]
 800406a:	3201      	adds	r2, #1
 800406c:	701a      	strb	r2, [r3, #0]
 800406e:	e791      	b.n	8003f94 <_dtoa_r+0x5f4>
 8004070:	461d      	mov	r5, r3
 8004072:	e7ed      	b.n	8004050 <_dtoa_r+0x6b0>
 8004074:	2200      	movs	r2, #0
 8004076:	4b99      	ldr	r3, [pc, #612]	; (80042dc <_dtoa_r+0x93c>)
 8004078:	f7fc fa2e 	bl	80004d8 <__aeabi_dmul>
 800407c:	2200      	movs	r2, #0
 800407e:	2300      	movs	r3, #0
 8004080:	4606      	mov	r6, r0
 8004082:	460f      	mov	r7, r1
 8004084:	f7fc fc90 	bl	80009a8 <__aeabi_dcmpeq>
 8004088:	2800      	cmp	r0, #0
 800408a:	d09e      	beq.n	8003fca <_dtoa_r+0x62a>
 800408c:	e7cf      	b.n	800402e <_dtoa_r+0x68e>
 800408e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004090:	2a00      	cmp	r2, #0
 8004092:	f000 8088 	beq.w	80041a6 <_dtoa_r+0x806>
 8004096:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004098:	2a01      	cmp	r2, #1
 800409a:	dc6d      	bgt.n	8004178 <_dtoa_r+0x7d8>
 800409c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800409e:	2a00      	cmp	r2, #0
 80040a0:	d066      	beq.n	8004170 <_dtoa_r+0x7d0>
 80040a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80040a6:	464d      	mov	r5, r9
 80040a8:	9e08      	ldr	r6, [sp, #32]
 80040aa:	9a07      	ldr	r2, [sp, #28]
 80040ac:	2101      	movs	r1, #1
 80040ae:	441a      	add	r2, r3
 80040b0:	4620      	mov	r0, r4
 80040b2:	4499      	add	r9, r3
 80040b4:	9207      	str	r2, [sp, #28]
 80040b6:	f000 fbf4 	bl	80048a2 <__i2b>
 80040ba:	4607      	mov	r7, r0
 80040bc:	2d00      	cmp	r5, #0
 80040be:	dd0b      	ble.n	80040d8 <_dtoa_r+0x738>
 80040c0:	9b07      	ldr	r3, [sp, #28]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	dd08      	ble.n	80040d8 <_dtoa_r+0x738>
 80040c6:	42ab      	cmp	r3, r5
 80040c8:	bfa8      	it	ge
 80040ca:	462b      	movge	r3, r5
 80040cc:	9a07      	ldr	r2, [sp, #28]
 80040ce:	eba9 0903 	sub.w	r9, r9, r3
 80040d2:	1aed      	subs	r5, r5, r3
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	9307      	str	r3, [sp, #28]
 80040d8:	9b08      	ldr	r3, [sp, #32]
 80040da:	b1eb      	cbz	r3, 8004118 <_dtoa_r+0x778>
 80040dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d065      	beq.n	80041ae <_dtoa_r+0x80e>
 80040e2:	b18e      	cbz	r6, 8004108 <_dtoa_r+0x768>
 80040e4:	4639      	mov	r1, r7
 80040e6:	4632      	mov	r2, r6
 80040e8:	4620      	mov	r0, r4
 80040ea:	f000 fc79 	bl	80049e0 <__pow5mult>
 80040ee:	465a      	mov	r2, fp
 80040f0:	4601      	mov	r1, r0
 80040f2:	4607      	mov	r7, r0
 80040f4:	4620      	mov	r0, r4
 80040f6:	f000 fbdd 	bl	80048b4 <__multiply>
 80040fa:	4659      	mov	r1, fp
 80040fc:	900a      	str	r0, [sp, #40]	; 0x28
 80040fe:	4620      	mov	r0, r4
 8004100:	f000 fb2f 	bl	8004762 <_Bfree>
 8004104:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004106:	469b      	mov	fp, r3
 8004108:	9b08      	ldr	r3, [sp, #32]
 800410a:	1b9a      	subs	r2, r3, r6
 800410c:	d004      	beq.n	8004118 <_dtoa_r+0x778>
 800410e:	4659      	mov	r1, fp
 8004110:	4620      	mov	r0, r4
 8004112:	f000 fc65 	bl	80049e0 <__pow5mult>
 8004116:	4683      	mov	fp, r0
 8004118:	2101      	movs	r1, #1
 800411a:	4620      	mov	r0, r4
 800411c:	f000 fbc1 	bl	80048a2 <__i2b>
 8004120:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004122:	4606      	mov	r6, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 81c6 	beq.w	80044b6 <_dtoa_r+0xb16>
 800412a:	461a      	mov	r2, r3
 800412c:	4601      	mov	r1, r0
 800412e:	4620      	mov	r0, r4
 8004130:	f000 fc56 	bl	80049e0 <__pow5mult>
 8004134:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004136:	4606      	mov	r6, r0
 8004138:	2b01      	cmp	r3, #1
 800413a:	dc3e      	bgt.n	80041ba <_dtoa_r+0x81a>
 800413c:	9b02      	ldr	r3, [sp, #8]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d137      	bne.n	80041b2 <_dtoa_r+0x812>
 8004142:	9b03      	ldr	r3, [sp, #12]
 8004144:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004148:	2b00      	cmp	r3, #0
 800414a:	d134      	bne.n	80041b6 <_dtoa_r+0x816>
 800414c:	9b03      	ldr	r3, [sp, #12]
 800414e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004152:	0d1b      	lsrs	r3, r3, #20
 8004154:	051b      	lsls	r3, r3, #20
 8004156:	b12b      	cbz	r3, 8004164 <_dtoa_r+0x7c4>
 8004158:	9b07      	ldr	r3, [sp, #28]
 800415a:	f109 0901 	add.w	r9, r9, #1
 800415e:	3301      	adds	r3, #1
 8004160:	9307      	str	r3, [sp, #28]
 8004162:	2301      	movs	r3, #1
 8004164:	9308      	str	r3, [sp, #32]
 8004166:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004168:	2b00      	cmp	r3, #0
 800416a:	d128      	bne.n	80041be <_dtoa_r+0x81e>
 800416c:	2001      	movs	r0, #1
 800416e:	e02e      	b.n	80041ce <_dtoa_r+0x82e>
 8004170:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004172:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004176:	e796      	b.n	80040a6 <_dtoa_r+0x706>
 8004178:	9b08      	ldr	r3, [sp, #32]
 800417a:	f108 36ff 	add.w	r6, r8, #4294967295
 800417e:	42b3      	cmp	r3, r6
 8004180:	bfb7      	itett	lt
 8004182:	9b08      	ldrlt	r3, [sp, #32]
 8004184:	1b9e      	subge	r6, r3, r6
 8004186:	1af2      	sublt	r2, r6, r3
 8004188:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800418a:	bfbf      	itttt	lt
 800418c:	9608      	strlt	r6, [sp, #32]
 800418e:	189b      	addlt	r3, r3, r2
 8004190:	930c      	strlt	r3, [sp, #48]	; 0x30
 8004192:	2600      	movlt	r6, #0
 8004194:	f1b8 0f00 	cmp.w	r8, #0
 8004198:	bfb9      	ittee	lt
 800419a:	eba9 0508 	sublt.w	r5, r9, r8
 800419e:	2300      	movlt	r3, #0
 80041a0:	464d      	movge	r5, r9
 80041a2:	4643      	movge	r3, r8
 80041a4:	e781      	b.n	80040aa <_dtoa_r+0x70a>
 80041a6:	9e08      	ldr	r6, [sp, #32]
 80041a8:	464d      	mov	r5, r9
 80041aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80041ac:	e786      	b.n	80040bc <_dtoa_r+0x71c>
 80041ae:	9a08      	ldr	r2, [sp, #32]
 80041b0:	e7ad      	b.n	800410e <_dtoa_r+0x76e>
 80041b2:	2300      	movs	r3, #0
 80041b4:	e7d6      	b.n	8004164 <_dtoa_r+0x7c4>
 80041b6:	9b02      	ldr	r3, [sp, #8]
 80041b8:	e7d4      	b.n	8004164 <_dtoa_r+0x7c4>
 80041ba:	2300      	movs	r3, #0
 80041bc:	9308      	str	r3, [sp, #32]
 80041be:	6933      	ldr	r3, [r6, #16]
 80041c0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80041c4:	6918      	ldr	r0, [r3, #16]
 80041c6:	f000 fb1e 	bl	8004806 <__hi0bits>
 80041ca:	f1c0 0020 	rsb	r0, r0, #32
 80041ce:	9b07      	ldr	r3, [sp, #28]
 80041d0:	4418      	add	r0, r3
 80041d2:	f010 001f 	ands.w	r0, r0, #31
 80041d6:	d047      	beq.n	8004268 <_dtoa_r+0x8c8>
 80041d8:	f1c0 0320 	rsb	r3, r0, #32
 80041dc:	2b04      	cmp	r3, #4
 80041de:	dd3b      	ble.n	8004258 <_dtoa_r+0x8b8>
 80041e0:	9b07      	ldr	r3, [sp, #28]
 80041e2:	f1c0 001c 	rsb	r0, r0, #28
 80041e6:	4481      	add	r9, r0
 80041e8:	4405      	add	r5, r0
 80041ea:	4403      	add	r3, r0
 80041ec:	9307      	str	r3, [sp, #28]
 80041ee:	f1b9 0f00 	cmp.w	r9, #0
 80041f2:	dd05      	ble.n	8004200 <_dtoa_r+0x860>
 80041f4:	4659      	mov	r1, fp
 80041f6:	464a      	mov	r2, r9
 80041f8:	4620      	mov	r0, r4
 80041fa:	f000 fc3f 	bl	8004a7c <__lshift>
 80041fe:	4683      	mov	fp, r0
 8004200:	9b07      	ldr	r3, [sp, #28]
 8004202:	2b00      	cmp	r3, #0
 8004204:	dd05      	ble.n	8004212 <_dtoa_r+0x872>
 8004206:	4631      	mov	r1, r6
 8004208:	461a      	mov	r2, r3
 800420a:	4620      	mov	r0, r4
 800420c:	f000 fc36 	bl	8004a7c <__lshift>
 8004210:	4606      	mov	r6, r0
 8004212:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004214:	b353      	cbz	r3, 800426c <_dtoa_r+0x8cc>
 8004216:	4631      	mov	r1, r6
 8004218:	4658      	mov	r0, fp
 800421a:	f000 fc83 	bl	8004b24 <__mcmp>
 800421e:	2800      	cmp	r0, #0
 8004220:	da24      	bge.n	800426c <_dtoa_r+0x8cc>
 8004222:	2300      	movs	r3, #0
 8004224:	4659      	mov	r1, fp
 8004226:	220a      	movs	r2, #10
 8004228:	4620      	mov	r0, r4
 800422a:	f000 fab1 	bl	8004790 <__multadd>
 800422e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004230:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004234:	4683      	mov	fp, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	f000 8144 	beq.w	80044c4 <_dtoa_r+0xb24>
 800423c:	2300      	movs	r3, #0
 800423e:	4639      	mov	r1, r7
 8004240:	220a      	movs	r2, #10
 8004242:	4620      	mov	r0, r4
 8004244:	f000 faa4 	bl	8004790 <__multadd>
 8004248:	9b04      	ldr	r3, [sp, #16]
 800424a:	4607      	mov	r7, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	dc4d      	bgt.n	80042ec <_dtoa_r+0x94c>
 8004250:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004252:	2b02      	cmp	r3, #2
 8004254:	dd4a      	ble.n	80042ec <_dtoa_r+0x94c>
 8004256:	e011      	b.n	800427c <_dtoa_r+0x8dc>
 8004258:	d0c9      	beq.n	80041ee <_dtoa_r+0x84e>
 800425a:	9a07      	ldr	r2, [sp, #28]
 800425c:	331c      	adds	r3, #28
 800425e:	441a      	add	r2, r3
 8004260:	4499      	add	r9, r3
 8004262:	441d      	add	r5, r3
 8004264:	4613      	mov	r3, r2
 8004266:	e7c1      	b.n	80041ec <_dtoa_r+0x84c>
 8004268:	4603      	mov	r3, r0
 800426a:	e7f6      	b.n	800425a <_dtoa_r+0x8ba>
 800426c:	f1b8 0f00 	cmp.w	r8, #0
 8004270:	dc36      	bgt.n	80042e0 <_dtoa_r+0x940>
 8004272:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8004274:	2b02      	cmp	r3, #2
 8004276:	dd33      	ble.n	80042e0 <_dtoa_r+0x940>
 8004278:	f8cd 8010 	str.w	r8, [sp, #16]
 800427c:	9b04      	ldr	r3, [sp, #16]
 800427e:	b963      	cbnz	r3, 800429a <_dtoa_r+0x8fa>
 8004280:	4631      	mov	r1, r6
 8004282:	2205      	movs	r2, #5
 8004284:	4620      	mov	r0, r4
 8004286:	f000 fa83 	bl	8004790 <__multadd>
 800428a:	4601      	mov	r1, r0
 800428c:	4606      	mov	r6, r0
 800428e:	4658      	mov	r0, fp
 8004290:	f000 fc48 	bl	8004b24 <__mcmp>
 8004294:	2800      	cmp	r0, #0
 8004296:	f73f add3 	bgt.w	8003e40 <_dtoa_r+0x4a0>
 800429a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800429c:	9d06      	ldr	r5, [sp, #24]
 800429e:	ea6f 0a03 	mvn.w	sl, r3
 80042a2:	f04f 0900 	mov.w	r9, #0
 80042a6:	4631      	mov	r1, r6
 80042a8:	4620      	mov	r0, r4
 80042aa:	f000 fa5a 	bl	8004762 <_Bfree>
 80042ae:	2f00      	cmp	r7, #0
 80042b0:	f43f aebd 	beq.w	800402e <_dtoa_r+0x68e>
 80042b4:	f1b9 0f00 	cmp.w	r9, #0
 80042b8:	d005      	beq.n	80042c6 <_dtoa_r+0x926>
 80042ba:	45b9      	cmp	r9, r7
 80042bc:	d003      	beq.n	80042c6 <_dtoa_r+0x926>
 80042be:	4649      	mov	r1, r9
 80042c0:	4620      	mov	r0, r4
 80042c2:	f000 fa4e 	bl	8004762 <_Bfree>
 80042c6:	4639      	mov	r1, r7
 80042c8:	4620      	mov	r0, r4
 80042ca:	f000 fa4a 	bl	8004762 <_Bfree>
 80042ce:	e6ae      	b.n	800402e <_dtoa_r+0x68e>
 80042d0:	2600      	movs	r6, #0
 80042d2:	4637      	mov	r7, r6
 80042d4:	e7e1      	b.n	800429a <_dtoa_r+0x8fa>
 80042d6:	46ba      	mov	sl, r7
 80042d8:	4637      	mov	r7, r6
 80042da:	e5b1      	b.n	8003e40 <_dtoa_r+0x4a0>
 80042dc:	40240000 	.word	0x40240000
 80042e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042e2:	f8cd 8010 	str.w	r8, [sp, #16]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f000 80f3 	beq.w	80044d2 <_dtoa_r+0xb32>
 80042ec:	2d00      	cmp	r5, #0
 80042ee:	dd05      	ble.n	80042fc <_dtoa_r+0x95c>
 80042f0:	4639      	mov	r1, r7
 80042f2:	462a      	mov	r2, r5
 80042f4:	4620      	mov	r0, r4
 80042f6:	f000 fbc1 	bl	8004a7c <__lshift>
 80042fa:	4607      	mov	r7, r0
 80042fc:	9b08      	ldr	r3, [sp, #32]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d04c      	beq.n	800439c <_dtoa_r+0x9fc>
 8004302:	6879      	ldr	r1, [r7, #4]
 8004304:	4620      	mov	r0, r4
 8004306:	f000 f9f8 	bl	80046fa <_Balloc>
 800430a:	4605      	mov	r5, r0
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	f107 010c 	add.w	r1, r7, #12
 8004312:	3202      	adds	r2, #2
 8004314:	0092      	lsls	r2, r2, #2
 8004316:	300c      	adds	r0, #12
 8004318:	f000 f9e4 	bl	80046e4 <memcpy>
 800431c:	2201      	movs	r2, #1
 800431e:	4629      	mov	r1, r5
 8004320:	4620      	mov	r0, r4
 8004322:	f000 fbab 	bl	8004a7c <__lshift>
 8004326:	46b9      	mov	r9, r7
 8004328:	4607      	mov	r7, r0
 800432a:	9b06      	ldr	r3, [sp, #24]
 800432c:	9307      	str	r3, [sp, #28]
 800432e:	9b02      	ldr	r3, [sp, #8]
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	9308      	str	r3, [sp, #32]
 8004336:	4631      	mov	r1, r6
 8004338:	4658      	mov	r0, fp
 800433a:	f7ff faa1 	bl	8003880 <quorem>
 800433e:	4649      	mov	r1, r9
 8004340:	4605      	mov	r5, r0
 8004342:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004346:	4658      	mov	r0, fp
 8004348:	f000 fbec 	bl	8004b24 <__mcmp>
 800434c:	463a      	mov	r2, r7
 800434e:	9002      	str	r0, [sp, #8]
 8004350:	4631      	mov	r1, r6
 8004352:	4620      	mov	r0, r4
 8004354:	f000 fc00 	bl	8004b58 <__mdiff>
 8004358:	68c3      	ldr	r3, [r0, #12]
 800435a:	4602      	mov	r2, r0
 800435c:	bb03      	cbnz	r3, 80043a0 <_dtoa_r+0xa00>
 800435e:	4601      	mov	r1, r0
 8004360:	9009      	str	r0, [sp, #36]	; 0x24
 8004362:	4658      	mov	r0, fp
 8004364:	f000 fbde 	bl	8004b24 <__mcmp>
 8004368:	4603      	mov	r3, r0
 800436a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800436c:	4611      	mov	r1, r2
 800436e:	4620      	mov	r0, r4
 8004370:	9309      	str	r3, [sp, #36]	; 0x24
 8004372:	f000 f9f6 	bl	8004762 <_Bfree>
 8004376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004378:	b9a3      	cbnz	r3, 80043a4 <_dtoa_r+0xa04>
 800437a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800437c:	b992      	cbnz	r2, 80043a4 <_dtoa_r+0xa04>
 800437e:	9a08      	ldr	r2, [sp, #32]
 8004380:	b982      	cbnz	r2, 80043a4 <_dtoa_r+0xa04>
 8004382:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004386:	d029      	beq.n	80043dc <_dtoa_r+0xa3c>
 8004388:	9b02      	ldr	r3, [sp, #8]
 800438a:	2b00      	cmp	r3, #0
 800438c:	dd01      	ble.n	8004392 <_dtoa_r+0x9f2>
 800438e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8004392:	9b07      	ldr	r3, [sp, #28]
 8004394:	1c5d      	adds	r5, r3, #1
 8004396:	f883 8000 	strb.w	r8, [r3]
 800439a:	e784      	b.n	80042a6 <_dtoa_r+0x906>
 800439c:	4638      	mov	r0, r7
 800439e:	e7c2      	b.n	8004326 <_dtoa_r+0x986>
 80043a0:	2301      	movs	r3, #1
 80043a2:	e7e3      	b.n	800436c <_dtoa_r+0x9cc>
 80043a4:	9a02      	ldr	r2, [sp, #8]
 80043a6:	2a00      	cmp	r2, #0
 80043a8:	db04      	blt.n	80043b4 <_dtoa_r+0xa14>
 80043aa:	d123      	bne.n	80043f4 <_dtoa_r+0xa54>
 80043ac:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80043ae:	bb0a      	cbnz	r2, 80043f4 <_dtoa_r+0xa54>
 80043b0:	9a08      	ldr	r2, [sp, #32]
 80043b2:	b9fa      	cbnz	r2, 80043f4 <_dtoa_r+0xa54>
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	ddec      	ble.n	8004392 <_dtoa_r+0x9f2>
 80043b8:	4659      	mov	r1, fp
 80043ba:	2201      	movs	r2, #1
 80043bc:	4620      	mov	r0, r4
 80043be:	f000 fb5d 	bl	8004a7c <__lshift>
 80043c2:	4631      	mov	r1, r6
 80043c4:	4683      	mov	fp, r0
 80043c6:	f000 fbad 	bl	8004b24 <__mcmp>
 80043ca:	2800      	cmp	r0, #0
 80043cc:	dc03      	bgt.n	80043d6 <_dtoa_r+0xa36>
 80043ce:	d1e0      	bne.n	8004392 <_dtoa_r+0x9f2>
 80043d0:	f018 0f01 	tst.w	r8, #1
 80043d4:	d0dd      	beq.n	8004392 <_dtoa_r+0x9f2>
 80043d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80043da:	d1d8      	bne.n	800438e <_dtoa_r+0x9ee>
 80043dc:	9b07      	ldr	r3, [sp, #28]
 80043de:	9a07      	ldr	r2, [sp, #28]
 80043e0:	1c5d      	adds	r5, r3, #1
 80043e2:	2339      	movs	r3, #57	; 0x39
 80043e4:	7013      	strb	r3, [r2, #0]
 80043e6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80043ea:	1e6a      	subs	r2, r5, #1
 80043ec:	2b39      	cmp	r3, #57	; 0x39
 80043ee:	d04d      	beq.n	800448c <_dtoa_r+0xaec>
 80043f0:	3301      	adds	r3, #1
 80043f2:	e052      	b.n	800449a <_dtoa_r+0xafa>
 80043f4:	9a07      	ldr	r2, [sp, #28]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f102 0501 	add.w	r5, r2, #1
 80043fc:	dd06      	ble.n	800440c <_dtoa_r+0xa6c>
 80043fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004402:	d0eb      	beq.n	80043dc <_dtoa_r+0xa3c>
 8004404:	f108 0801 	add.w	r8, r8, #1
 8004408:	9b07      	ldr	r3, [sp, #28]
 800440a:	e7c4      	b.n	8004396 <_dtoa_r+0x9f6>
 800440c:	9b06      	ldr	r3, [sp, #24]
 800440e:	9a04      	ldr	r2, [sp, #16]
 8004410:	1aeb      	subs	r3, r5, r3
 8004412:	4293      	cmp	r3, r2
 8004414:	f805 8c01 	strb.w	r8, [r5, #-1]
 8004418:	d021      	beq.n	800445e <_dtoa_r+0xabe>
 800441a:	4659      	mov	r1, fp
 800441c:	2300      	movs	r3, #0
 800441e:	220a      	movs	r2, #10
 8004420:	4620      	mov	r0, r4
 8004422:	f000 f9b5 	bl	8004790 <__multadd>
 8004426:	45b9      	cmp	r9, r7
 8004428:	4683      	mov	fp, r0
 800442a:	f04f 0300 	mov.w	r3, #0
 800442e:	f04f 020a 	mov.w	r2, #10
 8004432:	4649      	mov	r1, r9
 8004434:	4620      	mov	r0, r4
 8004436:	d105      	bne.n	8004444 <_dtoa_r+0xaa4>
 8004438:	f000 f9aa 	bl	8004790 <__multadd>
 800443c:	4681      	mov	r9, r0
 800443e:	4607      	mov	r7, r0
 8004440:	9507      	str	r5, [sp, #28]
 8004442:	e778      	b.n	8004336 <_dtoa_r+0x996>
 8004444:	f000 f9a4 	bl	8004790 <__multadd>
 8004448:	4639      	mov	r1, r7
 800444a:	4681      	mov	r9, r0
 800444c:	2300      	movs	r3, #0
 800444e:	220a      	movs	r2, #10
 8004450:	4620      	mov	r0, r4
 8004452:	f000 f99d 	bl	8004790 <__multadd>
 8004456:	4607      	mov	r7, r0
 8004458:	e7f2      	b.n	8004440 <_dtoa_r+0xaa0>
 800445a:	f04f 0900 	mov.w	r9, #0
 800445e:	4659      	mov	r1, fp
 8004460:	2201      	movs	r2, #1
 8004462:	4620      	mov	r0, r4
 8004464:	f000 fb0a 	bl	8004a7c <__lshift>
 8004468:	4631      	mov	r1, r6
 800446a:	4683      	mov	fp, r0
 800446c:	f000 fb5a 	bl	8004b24 <__mcmp>
 8004470:	2800      	cmp	r0, #0
 8004472:	dcb8      	bgt.n	80043e6 <_dtoa_r+0xa46>
 8004474:	d102      	bne.n	800447c <_dtoa_r+0xadc>
 8004476:	f018 0f01 	tst.w	r8, #1
 800447a:	d1b4      	bne.n	80043e6 <_dtoa_r+0xa46>
 800447c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004480:	1e6a      	subs	r2, r5, #1
 8004482:	2b30      	cmp	r3, #48	; 0x30
 8004484:	f47f af0f 	bne.w	80042a6 <_dtoa_r+0x906>
 8004488:	4615      	mov	r5, r2
 800448a:	e7f7      	b.n	800447c <_dtoa_r+0xadc>
 800448c:	9b06      	ldr	r3, [sp, #24]
 800448e:	4293      	cmp	r3, r2
 8004490:	d105      	bne.n	800449e <_dtoa_r+0xafe>
 8004492:	2331      	movs	r3, #49	; 0x31
 8004494:	9a06      	ldr	r2, [sp, #24]
 8004496:	f10a 0a01 	add.w	sl, sl, #1
 800449a:	7013      	strb	r3, [r2, #0]
 800449c:	e703      	b.n	80042a6 <_dtoa_r+0x906>
 800449e:	4615      	mov	r5, r2
 80044a0:	e7a1      	b.n	80043e6 <_dtoa_r+0xa46>
 80044a2:	4b17      	ldr	r3, [pc, #92]	; (8004500 <_dtoa_r+0xb60>)
 80044a4:	f7ff bae1 	b.w	8003a6a <_dtoa_r+0xca>
 80044a8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	f47f aabb 	bne.w	8003a26 <_dtoa_r+0x86>
 80044b0:	4b14      	ldr	r3, [pc, #80]	; (8004504 <_dtoa_r+0xb64>)
 80044b2:	f7ff bada 	b.w	8003a6a <_dtoa_r+0xca>
 80044b6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	f77f ae3f 	ble.w	800413c <_dtoa_r+0x79c>
 80044be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80044c0:	9308      	str	r3, [sp, #32]
 80044c2:	e653      	b.n	800416c <_dtoa_r+0x7cc>
 80044c4:	9b04      	ldr	r3, [sp, #16]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	dc03      	bgt.n	80044d2 <_dtoa_r+0xb32>
 80044ca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	f73f aed5 	bgt.w	800427c <_dtoa_r+0x8dc>
 80044d2:	9d06      	ldr	r5, [sp, #24]
 80044d4:	4631      	mov	r1, r6
 80044d6:	4658      	mov	r0, fp
 80044d8:	f7ff f9d2 	bl	8003880 <quorem>
 80044dc:	9b06      	ldr	r3, [sp, #24]
 80044de:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80044e2:	f805 8b01 	strb.w	r8, [r5], #1
 80044e6:	9a04      	ldr	r2, [sp, #16]
 80044e8:	1aeb      	subs	r3, r5, r3
 80044ea:	429a      	cmp	r2, r3
 80044ec:	ddb5      	ble.n	800445a <_dtoa_r+0xaba>
 80044ee:	4659      	mov	r1, fp
 80044f0:	2300      	movs	r3, #0
 80044f2:	220a      	movs	r2, #10
 80044f4:	4620      	mov	r0, r4
 80044f6:	f000 f94b 	bl	8004790 <__multadd>
 80044fa:	4683      	mov	fp, r0
 80044fc:	e7ea      	b.n	80044d4 <_dtoa_r+0xb34>
 80044fe:	bf00      	nop
 8004500:	08005680 	.word	0x08005680
 8004504:	080056a4 	.word	0x080056a4

08004508 <std>:
 8004508:	2300      	movs	r3, #0
 800450a:	b510      	push	{r4, lr}
 800450c:	4604      	mov	r4, r0
 800450e:	e9c0 3300 	strd	r3, r3, [r0]
 8004512:	6083      	str	r3, [r0, #8]
 8004514:	8181      	strh	r1, [r0, #12]
 8004516:	6643      	str	r3, [r0, #100]	; 0x64
 8004518:	81c2      	strh	r2, [r0, #14]
 800451a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800451e:	6183      	str	r3, [r0, #24]
 8004520:	4619      	mov	r1, r3
 8004522:	2208      	movs	r2, #8
 8004524:	305c      	adds	r0, #92	; 0x5c
 8004526:	f7fe fd3b 	bl	8002fa0 <memset>
 800452a:	4b05      	ldr	r3, [pc, #20]	; (8004540 <std+0x38>)
 800452c:	6224      	str	r4, [r4, #32]
 800452e:	6263      	str	r3, [r4, #36]	; 0x24
 8004530:	4b04      	ldr	r3, [pc, #16]	; (8004544 <std+0x3c>)
 8004532:	62a3      	str	r3, [r4, #40]	; 0x28
 8004534:	4b04      	ldr	r3, [pc, #16]	; (8004548 <std+0x40>)
 8004536:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004538:	4b04      	ldr	r3, [pc, #16]	; (800454c <std+0x44>)
 800453a:	6323      	str	r3, [r4, #48]	; 0x30
 800453c:	bd10      	pop	{r4, pc}
 800453e:	bf00      	nop
 8004540:	080050b9 	.word	0x080050b9
 8004544:	080050db 	.word	0x080050db
 8004548:	08005113 	.word	0x08005113
 800454c:	08005137 	.word	0x08005137

08004550 <_cleanup_r>:
 8004550:	4901      	ldr	r1, [pc, #4]	; (8004558 <_cleanup_r+0x8>)
 8004552:	f000 b885 	b.w	8004660 <_fwalk_reent>
 8004556:	bf00      	nop
 8004558:	08005411 	.word	0x08005411

0800455c <__sfmoreglue>:
 800455c:	b570      	push	{r4, r5, r6, lr}
 800455e:	2568      	movs	r5, #104	; 0x68
 8004560:	1e4a      	subs	r2, r1, #1
 8004562:	4355      	muls	r5, r2
 8004564:	460e      	mov	r6, r1
 8004566:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800456a:	f000 fbfd 	bl	8004d68 <_malloc_r>
 800456e:	4604      	mov	r4, r0
 8004570:	b140      	cbz	r0, 8004584 <__sfmoreglue+0x28>
 8004572:	2100      	movs	r1, #0
 8004574:	e9c0 1600 	strd	r1, r6, [r0]
 8004578:	300c      	adds	r0, #12
 800457a:	60a0      	str	r0, [r4, #8]
 800457c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004580:	f7fe fd0e 	bl	8002fa0 <memset>
 8004584:	4620      	mov	r0, r4
 8004586:	bd70      	pop	{r4, r5, r6, pc}

08004588 <__sinit>:
 8004588:	6983      	ldr	r3, [r0, #24]
 800458a:	b510      	push	{r4, lr}
 800458c:	4604      	mov	r4, r0
 800458e:	bb33      	cbnz	r3, 80045de <__sinit+0x56>
 8004590:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004594:	6503      	str	r3, [r0, #80]	; 0x50
 8004596:	4b12      	ldr	r3, [pc, #72]	; (80045e0 <__sinit+0x58>)
 8004598:	4a12      	ldr	r2, [pc, #72]	; (80045e4 <__sinit+0x5c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	6282      	str	r2, [r0, #40]	; 0x28
 800459e:	4298      	cmp	r0, r3
 80045a0:	bf04      	itt	eq
 80045a2:	2301      	moveq	r3, #1
 80045a4:	6183      	streq	r3, [r0, #24]
 80045a6:	f000 f81f 	bl	80045e8 <__sfp>
 80045aa:	6060      	str	r0, [r4, #4]
 80045ac:	4620      	mov	r0, r4
 80045ae:	f000 f81b 	bl	80045e8 <__sfp>
 80045b2:	60a0      	str	r0, [r4, #8]
 80045b4:	4620      	mov	r0, r4
 80045b6:	f000 f817 	bl	80045e8 <__sfp>
 80045ba:	2200      	movs	r2, #0
 80045bc:	60e0      	str	r0, [r4, #12]
 80045be:	2104      	movs	r1, #4
 80045c0:	6860      	ldr	r0, [r4, #4]
 80045c2:	f7ff ffa1 	bl	8004508 <std>
 80045c6:	2201      	movs	r2, #1
 80045c8:	2109      	movs	r1, #9
 80045ca:	68a0      	ldr	r0, [r4, #8]
 80045cc:	f7ff ff9c 	bl	8004508 <std>
 80045d0:	2202      	movs	r2, #2
 80045d2:	2112      	movs	r1, #18
 80045d4:	68e0      	ldr	r0, [r4, #12]
 80045d6:	f7ff ff97 	bl	8004508 <std>
 80045da:	2301      	movs	r3, #1
 80045dc:	61a3      	str	r3, [r4, #24]
 80045de:	bd10      	pop	{r4, pc}
 80045e0:	0800566c 	.word	0x0800566c
 80045e4:	08004551 	.word	0x08004551

080045e8 <__sfp>:
 80045e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ea:	4b1b      	ldr	r3, [pc, #108]	; (8004658 <__sfp+0x70>)
 80045ec:	4607      	mov	r7, r0
 80045ee:	681e      	ldr	r6, [r3, #0]
 80045f0:	69b3      	ldr	r3, [r6, #24]
 80045f2:	b913      	cbnz	r3, 80045fa <__sfp+0x12>
 80045f4:	4630      	mov	r0, r6
 80045f6:	f7ff ffc7 	bl	8004588 <__sinit>
 80045fa:	3648      	adds	r6, #72	; 0x48
 80045fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004600:	3b01      	subs	r3, #1
 8004602:	d503      	bpl.n	800460c <__sfp+0x24>
 8004604:	6833      	ldr	r3, [r6, #0]
 8004606:	b133      	cbz	r3, 8004616 <__sfp+0x2e>
 8004608:	6836      	ldr	r6, [r6, #0]
 800460a:	e7f7      	b.n	80045fc <__sfp+0x14>
 800460c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004610:	b16d      	cbz	r5, 800462e <__sfp+0x46>
 8004612:	3468      	adds	r4, #104	; 0x68
 8004614:	e7f4      	b.n	8004600 <__sfp+0x18>
 8004616:	2104      	movs	r1, #4
 8004618:	4638      	mov	r0, r7
 800461a:	f7ff ff9f 	bl	800455c <__sfmoreglue>
 800461e:	6030      	str	r0, [r6, #0]
 8004620:	2800      	cmp	r0, #0
 8004622:	d1f1      	bne.n	8004608 <__sfp+0x20>
 8004624:	230c      	movs	r3, #12
 8004626:	4604      	mov	r4, r0
 8004628:	603b      	str	r3, [r7, #0]
 800462a:	4620      	mov	r0, r4
 800462c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800462e:	4b0b      	ldr	r3, [pc, #44]	; (800465c <__sfp+0x74>)
 8004630:	6665      	str	r5, [r4, #100]	; 0x64
 8004632:	e9c4 5500 	strd	r5, r5, [r4]
 8004636:	60a5      	str	r5, [r4, #8]
 8004638:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800463c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004640:	2208      	movs	r2, #8
 8004642:	4629      	mov	r1, r5
 8004644:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004648:	f7fe fcaa 	bl	8002fa0 <memset>
 800464c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004650:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004654:	e7e9      	b.n	800462a <__sfp+0x42>
 8004656:	bf00      	nop
 8004658:	0800566c 	.word	0x0800566c
 800465c:	ffff0001 	.word	0xffff0001

08004660 <_fwalk_reent>:
 8004660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004664:	4680      	mov	r8, r0
 8004666:	4689      	mov	r9, r1
 8004668:	2600      	movs	r6, #0
 800466a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800466e:	b914      	cbnz	r4, 8004676 <_fwalk_reent+0x16>
 8004670:	4630      	mov	r0, r6
 8004672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004676:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800467a:	3f01      	subs	r7, #1
 800467c:	d501      	bpl.n	8004682 <_fwalk_reent+0x22>
 800467e:	6824      	ldr	r4, [r4, #0]
 8004680:	e7f5      	b.n	800466e <_fwalk_reent+0xe>
 8004682:	89ab      	ldrh	r3, [r5, #12]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d907      	bls.n	8004698 <_fwalk_reent+0x38>
 8004688:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800468c:	3301      	adds	r3, #1
 800468e:	d003      	beq.n	8004698 <_fwalk_reent+0x38>
 8004690:	4629      	mov	r1, r5
 8004692:	4640      	mov	r0, r8
 8004694:	47c8      	blx	r9
 8004696:	4306      	orrs	r6, r0
 8004698:	3568      	adds	r5, #104	; 0x68
 800469a:	e7ee      	b.n	800467a <_fwalk_reent+0x1a>

0800469c <_localeconv_r>:
 800469c:	4b04      	ldr	r3, [pc, #16]	; (80046b0 <_localeconv_r+0x14>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6a18      	ldr	r0, [r3, #32]
 80046a2:	4b04      	ldr	r3, [pc, #16]	; (80046b4 <_localeconv_r+0x18>)
 80046a4:	2800      	cmp	r0, #0
 80046a6:	bf08      	it	eq
 80046a8:	4618      	moveq	r0, r3
 80046aa:	30f0      	adds	r0, #240	; 0xf0
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	2000000c 	.word	0x2000000c
 80046b4:	20000070 	.word	0x20000070

080046b8 <malloc>:
 80046b8:	4b02      	ldr	r3, [pc, #8]	; (80046c4 <malloc+0xc>)
 80046ba:	4601      	mov	r1, r0
 80046bc:	6818      	ldr	r0, [r3, #0]
 80046be:	f000 bb53 	b.w	8004d68 <_malloc_r>
 80046c2:	bf00      	nop
 80046c4:	2000000c 	.word	0x2000000c

080046c8 <memchr>:
 80046c8:	b510      	push	{r4, lr}
 80046ca:	b2c9      	uxtb	r1, r1
 80046cc:	4402      	add	r2, r0
 80046ce:	4290      	cmp	r0, r2
 80046d0:	4603      	mov	r3, r0
 80046d2:	d101      	bne.n	80046d8 <memchr+0x10>
 80046d4:	2300      	movs	r3, #0
 80046d6:	e003      	b.n	80046e0 <memchr+0x18>
 80046d8:	781c      	ldrb	r4, [r3, #0]
 80046da:	3001      	adds	r0, #1
 80046dc:	428c      	cmp	r4, r1
 80046de:	d1f6      	bne.n	80046ce <memchr+0x6>
 80046e0:	4618      	mov	r0, r3
 80046e2:	bd10      	pop	{r4, pc}

080046e4 <memcpy>:
 80046e4:	b510      	push	{r4, lr}
 80046e6:	1e43      	subs	r3, r0, #1
 80046e8:	440a      	add	r2, r1
 80046ea:	4291      	cmp	r1, r2
 80046ec:	d100      	bne.n	80046f0 <memcpy+0xc>
 80046ee:	bd10      	pop	{r4, pc}
 80046f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046f8:	e7f7      	b.n	80046ea <memcpy+0x6>

080046fa <_Balloc>:
 80046fa:	b570      	push	{r4, r5, r6, lr}
 80046fc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80046fe:	4604      	mov	r4, r0
 8004700:	460e      	mov	r6, r1
 8004702:	b93d      	cbnz	r5, 8004714 <_Balloc+0x1a>
 8004704:	2010      	movs	r0, #16
 8004706:	f7ff ffd7 	bl	80046b8 <malloc>
 800470a:	6260      	str	r0, [r4, #36]	; 0x24
 800470c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004710:	6005      	str	r5, [r0, #0]
 8004712:	60c5      	str	r5, [r0, #12]
 8004714:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004716:	68eb      	ldr	r3, [r5, #12]
 8004718:	b183      	cbz	r3, 800473c <_Balloc+0x42>
 800471a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004722:	b9b8      	cbnz	r0, 8004754 <_Balloc+0x5a>
 8004724:	2101      	movs	r1, #1
 8004726:	fa01 f506 	lsl.w	r5, r1, r6
 800472a:	1d6a      	adds	r2, r5, #5
 800472c:	0092      	lsls	r2, r2, #2
 800472e:	4620      	mov	r0, r4
 8004730:	f000 fabf 	bl	8004cb2 <_calloc_r>
 8004734:	b160      	cbz	r0, 8004750 <_Balloc+0x56>
 8004736:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800473a:	e00e      	b.n	800475a <_Balloc+0x60>
 800473c:	2221      	movs	r2, #33	; 0x21
 800473e:	2104      	movs	r1, #4
 8004740:	4620      	mov	r0, r4
 8004742:	f000 fab6 	bl	8004cb2 <_calloc_r>
 8004746:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004748:	60e8      	str	r0, [r5, #12]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1e4      	bne.n	800471a <_Balloc+0x20>
 8004750:	2000      	movs	r0, #0
 8004752:	bd70      	pop	{r4, r5, r6, pc}
 8004754:	6802      	ldr	r2, [r0, #0]
 8004756:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800475a:	2300      	movs	r3, #0
 800475c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004760:	e7f7      	b.n	8004752 <_Balloc+0x58>

08004762 <_Bfree>:
 8004762:	b570      	push	{r4, r5, r6, lr}
 8004764:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004766:	4606      	mov	r6, r0
 8004768:	460d      	mov	r5, r1
 800476a:	b93c      	cbnz	r4, 800477c <_Bfree+0x1a>
 800476c:	2010      	movs	r0, #16
 800476e:	f7ff ffa3 	bl	80046b8 <malloc>
 8004772:	6270      	str	r0, [r6, #36]	; 0x24
 8004774:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004778:	6004      	str	r4, [r0, #0]
 800477a:	60c4      	str	r4, [r0, #12]
 800477c:	b13d      	cbz	r5, 800478e <_Bfree+0x2c>
 800477e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004780:	686a      	ldr	r2, [r5, #4]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004788:	6029      	str	r1, [r5, #0]
 800478a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800478e:	bd70      	pop	{r4, r5, r6, pc}

08004790 <__multadd>:
 8004790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004794:	461f      	mov	r7, r3
 8004796:	4606      	mov	r6, r0
 8004798:	460c      	mov	r4, r1
 800479a:	2300      	movs	r3, #0
 800479c:	690d      	ldr	r5, [r1, #16]
 800479e:	f101 0c14 	add.w	ip, r1, #20
 80047a2:	f8dc 0000 	ldr.w	r0, [ip]
 80047a6:	3301      	adds	r3, #1
 80047a8:	b281      	uxth	r1, r0
 80047aa:	fb02 7101 	mla	r1, r2, r1, r7
 80047ae:	0c00      	lsrs	r0, r0, #16
 80047b0:	0c0f      	lsrs	r7, r1, #16
 80047b2:	fb02 7000 	mla	r0, r2, r0, r7
 80047b6:	b289      	uxth	r1, r1
 80047b8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80047bc:	429d      	cmp	r5, r3
 80047be:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80047c2:	f84c 1b04 	str.w	r1, [ip], #4
 80047c6:	dcec      	bgt.n	80047a2 <__multadd+0x12>
 80047c8:	b1d7      	cbz	r7, 8004800 <__multadd+0x70>
 80047ca:	68a3      	ldr	r3, [r4, #8]
 80047cc:	42ab      	cmp	r3, r5
 80047ce:	dc12      	bgt.n	80047f6 <__multadd+0x66>
 80047d0:	6861      	ldr	r1, [r4, #4]
 80047d2:	4630      	mov	r0, r6
 80047d4:	3101      	adds	r1, #1
 80047d6:	f7ff ff90 	bl	80046fa <_Balloc>
 80047da:	4680      	mov	r8, r0
 80047dc:	6922      	ldr	r2, [r4, #16]
 80047de:	f104 010c 	add.w	r1, r4, #12
 80047e2:	3202      	adds	r2, #2
 80047e4:	0092      	lsls	r2, r2, #2
 80047e6:	300c      	adds	r0, #12
 80047e8:	f7ff ff7c 	bl	80046e4 <memcpy>
 80047ec:	4621      	mov	r1, r4
 80047ee:	4630      	mov	r0, r6
 80047f0:	f7ff ffb7 	bl	8004762 <_Bfree>
 80047f4:	4644      	mov	r4, r8
 80047f6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80047fa:	3501      	adds	r5, #1
 80047fc:	615f      	str	r7, [r3, #20]
 80047fe:	6125      	str	r5, [r4, #16]
 8004800:	4620      	mov	r0, r4
 8004802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004806 <__hi0bits>:
 8004806:	0c02      	lsrs	r2, r0, #16
 8004808:	0412      	lsls	r2, r2, #16
 800480a:	4603      	mov	r3, r0
 800480c:	b9b2      	cbnz	r2, 800483c <__hi0bits+0x36>
 800480e:	0403      	lsls	r3, r0, #16
 8004810:	2010      	movs	r0, #16
 8004812:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004816:	bf04      	itt	eq
 8004818:	021b      	lsleq	r3, r3, #8
 800481a:	3008      	addeq	r0, #8
 800481c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004820:	bf04      	itt	eq
 8004822:	011b      	lsleq	r3, r3, #4
 8004824:	3004      	addeq	r0, #4
 8004826:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800482a:	bf04      	itt	eq
 800482c:	009b      	lsleq	r3, r3, #2
 800482e:	3002      	addeq	r0, #2
 8004830:	2b00      	cmp	r3, #0
 8004832:	db06      	blt.n	8004842 <__hi0bits+0x3c>
 8004834:	005b      	lsls	r3, r3, #1
 8004836:	d503      	bpl.n	8004840 <__hi0bits+0x3a>
 8004838:	3001      	adds	r0, #1
 800483a:	4770      	bx	lr
 800483c:	2000      	movs	r0, #0
 800483e:	e7e8      	b.n	8004812 <__hi0bits+0xc>
 8004840:	2020      	movs	r0, #32
 8004842:	4770      	bx	lr

08004844 <__lo0bits>:
 8004844:	6803      	ldr	r3, [r0, #0]
 8004846:	4601      	mov	r1, r0
 8004848:	f013 0207 	ands.w	r2, r3, #7
 800484c:	d00b      	beq.n	8004866 <__lo0bits+0x22>
 800484e:	07da      	lsls	r2, r3, #31
 8004850:	d423      	bmi.n	800489a <__lo0bits+0x56>
 8004852:	0798      	lsls	r0, r3, #30
 8004854:	bf49      	itett	mi
 8004856:	085b      	lsrmi	r3, r3, #1
 8004858:	089b      	lsrpl	r3, r3, #2
 800485a:	2001      	movmi	r0, #1
 800485c:	600b      	strmi	r3, [r1, #0]
 800485e:	bf5c      	itt	pl
 8004860:	600b      	strpl	r3, [r1, #0]
 8004862:	2002      	movpl	r0, #2
 8004864:	4770      	bx	lr
 8004866:	b298      	uxth	r0, r3
 8004868:	b9a8      	cbnz	r0, 8004896 <__lo0bits+0x52>
 800486a:	2010      	movs	r0, #16
 800486c:	0c1b      	lsrs	r3, r3, #16
 800486e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004872:	bf04      	itt	eq
 8004874:	0a1b      	lsreq	r3, r3, #8
 8004876:	3008      	addeq	r0, #8
 8004878:	071a      	lsls	r2, r3, #28
 800487a:	bf04      	itt	eq
 800487c:	091b      	lsreq	r3, r3, #4
 800487e:	3004      	addeq	r0, #4
 8004880:	079a      	lsls	r2, r3, #30
 8004882:	bf04      	itt	eq
 8004884:	089b      	lsreq	r3, r3, #2
 8004886:	3002      	addeq	r0, #2
 8004888:	07da      	lsls	r2, r3, #31
 800488a:	d402      	bmi.n	8004892 <__lo0bits+0x4e>
 800488c:	085b      	lsrs	r3, r3, #1
 800488e:	d006      	beq.n	800489e <__lo0bits+0x5a>
 8004890:	3001      	adds	r0, #1
 8004892:	600b      	str	r3, [r1, #0]
 8004894:	4770      	bx	lr
 8004896:	4610      	mov	r0, r2
 8004898:	e7e9      	b.n	800486e <__lo0bits+0x2a>
 800489a:	2000      	movs	r0, #0
 800489c:	4770      	bx	lr
 800489e:	2020      	movs	r0, #32
 80048a0:	4770      	bx	lr

080048a2 <__i2b>:
 80048a2:	b510      	push	{r4, lr}
 80048a4:	460c      	mov	r4, r1
 80048a6:	2101      	movs	r1, #1
 80048a8:	f7ff ff27 	bl	80046fa <_Balloc>
 80048ac:	2201      	movs	r2, #1
 80048ae:	6144      	str	r4, [r0, #20]
 80048b0:	6102      	str	r2, [r0, #16]
 80048b2:	bd10      	pop	{r4, pc}

080048b4 <__multiply>:
 80048b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048b8:	4614      	mov	r4, r2
 80048ba:	690a      	ldr	r2, [r1, #16]
 80048bc:	6923      	ldr	r3, [r4, #16]
 80048be:	4688      	mov	r8, r1
 80048c0:	429a      	cmp	r2, r3
 80048c2:	bfbe      	ittt	lt
 80048c4:	460b      	movlt	r3, r1
 80048c6:	46a0      	movlt	r8, r4
 80048c8:	461c      	movlt	r4, r3
 80048ca:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80048ce:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80048d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80048d6:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80048da:	eb07 0609 	add.w	r6, r7, r9
 80048de:	42b3      	cmp	r3, r6
 80048e0:	bfb8      	it	lt
 80048e2:	3101      	addlt	r1, #1
 80048e4:	f7ff ff09 	bl	80046fa <_Balloc>
 80048e8:	f100 0514 	add.w	r5, r0, #20
 80048ec:	462b      	mov	r3, r5
 80048ee:	2200      	movs	r2, #0
 80048f0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80048f4:	4573      	cmp	r3, lr
 80048f6:	d316      	bcc.n	8004926 <__multiply+0x72>
 80048f8:	f104 0214 	add.w	r2, r4, #20
 80048fc:	f108 0114 	add.w	r1, r8, #20
 8004900:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8004904:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	9b00      	ldr	r3, [sp, #0]
 800490c:	9201      	str	r2, [sp, #4]
 800490e:	4293      	cmp	r3, r2
 8004910:	d80c      	bhi.n	800492c <__multiply+0x78>
 8004912:	2e00      	cmp	r6, #0
 8004914:	dd03      	ble.n	800491e <__multiply+0x6a>
 8004916:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800491a:	2b00      	cmp	r3, #0
 800491c:	d05d      	beq.n	80049da <__multiply+0x126>
 800491e:	6106      	str	r6, [r0, #16]
 8004920:	b003      	add	sp, #12
 8004922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004926:	f843 2b04 	str.w	r2, [r3], #4
 800492a:	e7e3      	b.n	80048f4 <__multiply+0x40>
 800492c:	f8b2 b000 	ldrh.w	fp, [r2]
 8004930:	f1bb 0f00 	cmp.w	fp, #0
 8004934:	d023      	beq.n	800497e <__multiply+0xca>
 8004936:	4689      	mov	r9, r1
 8004938:	46ac      	mov	ip, r5
 800493a:	f04f 0800 	mov.w	r8, #0
 800493e:	f859 4b04 	ldr.w	r4, [r9], #4
 8004942:	f8dc a000 	ldr.w	sl, [ip]
 8004946:	b2a3      	uxth	r3, r4
 8004948:	fa1f fa8a 	uxth.w	sl, sl
 800494c:	fb0b a303 	mla	r3, fp, r3, sl
 8004950:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8004954:	f8dc 4000 	ldr.w	r4, [ip]
 8004958:	4443      	add	r3, r8
 800495a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800495e:	fb0b 840a 	mla	r4, fp, sl, r8
 8004962:	46e2      	mov	sl, ip
 8004964:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8004968:	b29b      	uxth	r3, r3
 800496a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800496e:	454f      	cmp	r7, r9
 8004970:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8004974:	f84a 3b04 	str.w	r3, [sl], #4
 8004978:	d82b      	bhi.n	80049d2 <__multiply+0x11e>
 800497a:	f8cc 8004 	str.w	r8, [ip, #4]
 800497e:	9b01      	ldr	r3, [sp, #4]
 8004980:	3204      	adds	r2, #4
 8004982:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8004986:	f1ba 0f00 	cmp.w	sl, #0
 800498a:	d020      	beq.n	80049ce <__multiply+0x11a>
 800498c:	4689      	mov	r9, r1
 800498e:	46a8      	mov	r8, r5
 8004990:	f04f 0b00 	mov.w	fp, #0
 8004994:	682b      	ldr	r3, [r5, #0]
 8004996:	f8b9 c000 	ldrh.w	ip, [r9]
 800499a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800499e:	b29b      	uxth	r3, r3
 80049a0:	fb0a 440c 	mla	r4, sl, ip, r4
 80049a4:	46c4      	mov	ip, r8
 80049a6:	445c      	add	r4, fp
 80049a8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80049ac:	f84c 3b04 	str.w	r3, [ip], #4
 80049b0:	f859 3b04 	ldr.w	r3, [r9], #4
 80049b4:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80049b8:	0c1b      	lsrs	r3, r3, #16
 80049ba:	fb0a b303 	mla	r3, sl, r3, fp
 80049be:	454f      	cmp	r7, r9
 80049c0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80049c4:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80049c8:	d805      	bhi.n	80049d6 <__multiply+0x122>
 80049ca:	f8c8 3004 	str.w	r3, [r8, #4]
 80049ce:	3504      	adds	r5, #4
 80049d0:	e79b      	b.n	800490a <__multiply+0x56>
 80049d2:	46d4      	mov	ip, sl
 80049d4:	e7b3      	b.n	800493e <__multiply+0x8a>
 80049d6:	46e0      	mov	r8, ip
 80049d8:	e7dd      	b.n	8004996 <__multiply+0xe2>
 80049da:	3e01      	subs	r6, #1
 80049dc:	e799      	b.n	8004912 <__multiply+0x5e>
	...

080049e0 <__pow5mult>:
 80049e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049e4:	4615      	mov	r5, r2
 80049e6:	f012 0203 	ands.w	r2, r2, #3
 80049ea:	4606      	mov	r6, r0
 80049ec:	460f      	mov	r7, r1
 80049ee:	d007      	beq.n	8004a00 <__pow5mult+0x20>
 80049f0:	4c21      	ldr	r4, [pc, #132]	; (8004a78 <__pow5mult+0x98>)
 80049f2:	3a01      	subs	r2, #1
 80049f4:	2300      	movs	r3, #0
 80049f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80049fa:	f7ff fec9 	bl	8004790 <__multadd>
 80049fe:	4607      	mov	r7, r0
 8004a00:	10ad      	asrs	r5, r5, #2
 8004a02:	d035      	beq.n	8004a70 <__pow5mult+0x90>
 8004a04:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004a06:	b93c      	cbnz	r4, 8004a18 <__pow5mult+0x38>
 8004a08:	2010      	movs	r0, #16
 8004a0a:	f7ff fe55 	bl	80046b8 <malloc>
 8004a0e:	6270      	str	r0, [r6, #36]	; 0x24
 8004a10:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004a14:	6004      	str	r4, [r0, #0]
 8004a16:	60c4      	str	r4, [r0, #12]
 8004a18:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004a1c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004a20:	b94c      	cbnz	r4, 8004a36 <__pow5mult+0x56>
 8004a22:	f240 2171 	movw	r1, #625	; 0x271
 8004a26:	4630      	mov	r0, r6
 8004a28:	f7ff ff3b 	bl	80048a2 <__i2b>
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	4604      	mov	r4, r0
 8004a30:	f8c8 0008 	str.w	r0, [r8, #8]
 8004a34:	6003      	str	r3, [r0, #0]
 8004a36:	f04f 0800 	mov.w	r8, #0
 8004a3a:	07eb      	lsls	r3, r5, #31
 8004a3c:	d50a      	bpl.n	8004a54 <__pow5mult+0x74>
 8004a3e:	4639      	mov	r1, r7
 8004a40:	4622      	mov	r2, r4
 8004a42:	4630      	mov	r0, r6
 8004a44:	f7ff ff36 	bl	80048b4 <__multiply>
 8004a48:	4681      	mov	r9, r0
 8004a4a:	4639      	mov	r1, r7
 8004a4c:	4630      	mov	r0, r6
 8004a4e:	f7ff fe88 	bl	8004762 <_Bfree>
 8004a52:	464f      	mov	r7, r9
 8004a54:	106d      	asrs	r5, r5, #1
 8004a56:	d00b      	beq.n	8004a70 <__pow5mult+0x90>
 8004a58:	6820      	ldr	r0, [r4, #0]
 8004a5a:	b938      	cbnz	r0, 8004a6c <__pow5mult+0x8c>
 8004a5c:	4622      	mov	r2, r4
 8004a5e:	4621      	mov	r1, r4
 8004a60:	4630      	mov	r0, r6
 8004a62:	f7ff ff27 	bl	80048b4 <__multiply>
 8004a66:	6020      	str	r0, [r4, #0]
 8004a68:	f8c0 8000 	str.w	r8, [r0]
 8004a6c:	4604      	mov	r4, r0
 8004a6e:	e7e4      	b.n	8004a3a <__pow5mult+0x5a>
 8004a70:	4638      	mov	r0, r7
 8004a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a76:	bf00      	nop
 8004a78:	08005808 	.word	0x08005808

08004a7c <__lshift>:
 8004a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a80:	460c      	mov	r4, r1
 8004a82:	4607      	mov	r7, r0
 8004a84:	4616      	mov	r6, r2
 8004a86:	6923      	ldr	r3, [r4, #16]
 8004a88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004a8c:	eb0a 0903 	add.w	r9, sl, r3
 8004a90:	6849      	ldr	r1, [r1, #4]
 8004a92:	68a3      	ldr	r3, [r4, #8]
 8004a94:	f109 0501 	add.w	r5, r9, #1
 8004a98:	42ab      	cmp	r3, r5
 8004a9a:	db32      	blt.n	8004b02 <__lshift+0x86>
 8004a9c:	4638      	mov	r0, r7
 8004a9e:	f7ff fe2c 	bl	80046fa <_Balloc>
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	4680      	mov	r8, r0
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	f100 0114 	add.w	r1, r0, #20
 8004aac:	4553      	cmp	r3, sl
 8004aae:	db2b      	blt.n	8004b08 <__lshift+0x8c>
 8004ab0:	6920      	ldr	r0, [r4, #16]
 8004ab2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004ab6:	f104 0314 	add.w	r3, r4, #20
 8004aba:	f016 021f 	ands.w	r2, r6, #31
 8004abe:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004ac2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8004ac6:	d025      	beq.n	8004b14 <__lshift+0x98>
 8004ac8:	2000      	movs	r0, #0
 8004aca:	f1c2 0e20 	rsb	lr, r2, #32
 8004ace:	468a      	mov	sl, r1
 8004ad0:	681e      	ldr	r6, [r3, #0]
 8004ad2:	4096      	lsls	r6, r2
 8004ad4:	4330      	orrs	r0, r6
 8004ad6:	f84a 0b04 	str.w	r0, [sl], #4
 8004ada:	f853 0b04 	ldr.w	r0, [r3], #4
 8004ade:	459c      	cmp	ip, r3
 8004ae0:	fa20 f00e 	lsr.w	r0, r0, lr
 8004ae4:	d814      	bhi.n	8004b10 <__lshift+0x94>
 8004ae6:	6048      	str	r0, [r1, #4]
 8004ae8:	b108      	cbz	r0, 8004aee <__lshift+0x72>
 8004aea:	f109 0502 	add.w	r5, r9, #2
 8004aee:	3d01      	subs	r5, #1
 8004af0:	4638      	mov	r0, r7
 8004af2:	f8c8 5010 	str.w	r5, [r8, #16]
 8004af6:	4621      	mov	r1, r4
 8004af8:	f7ff fe33 	bl	8004762 <_Bfree>
 8004afc:	4640      	mov	r0, r8
 8004afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b02:	3101      	adds	r1, #1
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	e7c7      	b.n	8004a98 <__lshift+0x1c>
 8004b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	e7cd      	b.n	8004aac <__lshift+0x30>
 8004b10:	4651      	mov	r1, sl
 8004b12:	e7dc      	b.n	8004ace <__lshift+0x52>
 8004b14:	3904      	subs	r1, #4
 8004b16:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b1a:	459c      	cmp	ip, r3
 8004b1c:	f841 2f04 	str.w	r2, [r1, #4]!
 8004b20:	d8f9      	bhi.n	8004b16 <__lshift+0x9a>
 8004b22:	e7e4      	b.n	8004aee <__lshift+0x72>

08004b24 <__mcmp>:
 8004b24:	6903      	ldr	r3, [r0, #16]
 8004b26:	690a      	ldr	r2, [r1, #16]
 8004b28:	b530      	push	{r4, r5, lr}
 8004b2a:	1a9b      	subs	r3, r3, r2
 8004b2c:	d10c      	bne.n	8004b48 <__mcmp+0x24>
 8004b2e:	0092      	lsls	r2, r2, #2
 8004b30:	3014      	adds	r0, #20
 8004b32:	3114      	adds	r1, #20
 8004b34:	1884      	adds	r4, r0, r2
 8004b36:	4411      	add	r1, r2
 8004b38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8004b3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004b40:	4295      	cmp	r5, r2
 8004b42:	d003      	beq.n	8004b4c <__mcmp+0x28>
 8004b44:	d305      	bcc.n	8004b52 <__mcmp+0x2e>
 8004b46:	2301      	movs	r3, #1
 8004b48:	4618      	mov	r0, r3
 8004b4a:	bd30      	pop	{r4, r5, pc}
 8004b4c:	42a0      	cmp	r0, r4
 8004b4e:	d3f3      	bcc.n	8004b38 <__mcmp+0x14>
 8004b50:	e7fa      	b.n	8004b48 <__mcmp+0x24>
 8004b52:	f04f 33ff 	mov.w	r3, #4294967295
 8004b56:	e7f7      	b.n	8004b48 <__mcmp+0x24>

08004b58 <__mdiff>:
 8004b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b5c:	460d      	mov	r5, r1
 8004b5e:	4607      	mov	r7, r0
 8004b60:	4611      	mov	r1, r2
 8004b62:	4628      	mov	r0, r5
 8004b64:	4614      	mov	r4, r2
 8004b66:	f7ff ffdd 	bl	8004b24 <__mcmp>
 8004b6a:	1e06      	subs	r6, r0, #0
 8004b6c:	d108      	bne.n	8004b80 <__mdiff+0x28>
 8004b6e:	4631      	mov	r1, r6
 8004b70:	4638      	mov	r0, r7
 8004b72:	f7ff fdc2 	bl	80046fa <_Balloc>
 8004b76:	2301      	movs	r3, #1
 8004b78:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8004b7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b80:	bfa4      	itt	ge
 8004b82:	4623      	movge	r3, r4
 8004b84:	462c      	movge	r4, r5
 8004b86:	4638      	mov	r0, r7
 8004b88:	6861      	ldr	r1, [r4, #4]
 8004b8a:	bfa6      	itte	ge
 8004b8c:	461d      	movge	r5, r3
 8004b8e:	2600      	movge	r6, #0
 8004b90:	2601      	movlt	r6, #1
 8004b92:	f7ff fdb2 	bl	80046fa <_Balloc>
 8004b96:	f04f 0e00 	mov.w	lr, #0
 8004b9a:	60c6      	str	r6, [r0, #12]
 8004b9c:	692b      	ldr	r3, [r5, #16]
 8004b9e:	6926      	ldr	r6, [r4, #16]
 8004ba0:	f104 0214 	add.w	r2, r4, #20
 8004ba4:	f105 0914 	add.w	r9, r5, #20
 8004ba8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8004bac:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8004bb0:	f100 0114 	add.w	r1, r0, #20
 8004bb4:	f852 ab04 	ldr.w	sl, [r2], #4
 8004bb8:	f859 5b04 	ldr.w	r5, [r9], #4
 8004bbc:	fa1f f38a 	uxth.w	r3, sl
 8004bc0:	4473      	add	r3, lr
 8004bc2:	b2ac      	uxth	r4, r5
 8004bc4:	1b1b      	subs	r3, r3, r4
 8004bc6:	0c2c      	lsrs	r4, r5, #16
 8004bc8:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8004bcc:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8004bd6:	45c8      	cmp	r8, r9
 8004bd8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8004bdc:	4694      	mov	ip, r2
 8004bde:	f841 4b04 	str.w	r4, [r1], #4
 8004be2:	d8e7      	bhi.n	8004bb4 <__mdiff+0x5c>
 8004be4:	45bc      	cmp	ip, r7
 8004be6:	d304      	bcc.n	8004bf2 <__mdiff+0x9a>
 8004be8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8004bec:	b183      	cbz	r3, 8004c10 <__mdiff+0xb8>
 8004bee:	6106      	str	r6, [r0, #16]
 8004bf0:	e7c4      	b.n	8004b7c <__mdiff+0x24>
 8004bf2:	f85c 4b04 	ldr.w	r4, [ip], #4
 8004bf6:	b2a2      	uxth	r2, r4
 8004bf8:	4472      	add	r2, lr
 8004bfa:	1413      	asrs	r3, r2, #16
 8004bfc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004c00:	b292      	uxth	r2, r2
 8004c02:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004c06:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8004c0a:	f841 2b04 	str.w	r2, [r1], #4
 8004c0e:	e7e9      	b.n	8004be4 <__mdiff+0x8c>
 8004c10:	3e01      	subs	r6, #1
 8004c12:	e7e9      	b.n	8004be8 <__mdiff+0x90>

08004c14 <__d2b>:
 8004c14:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004c18:	461c      	mov	r4, r3
 8004c1a:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 8004c1e:	2101      	movs	r1, #1
 8004c20:	4690      	mov	r8, r2
 8004c22:	f7ff fd6a 	bl	80046fa <_Balloc>
 8004c26:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8004c2a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8004c2e:	4607      	mov	r7, r0
 8004c30:	bb34      	cbnz	r4, 8004c80 <__d2b+0x6c>
 8004c32:	9201      	str	r2, [sp, #4]
 8004c34:	f1b8 0200 	subs.w	r2, r8, #0
 8004c38:	d027      	beq.n	8004c8a <__d2b+0x76>
 8004c3a:	a802      	add	r0, sp, #8
 8004c3c:	f840 2d08 	str.w	r2, [r0, #-8]!
 8004c40:	f7ff fe00 	bl	8004844 <__lo0bits>
 8004c44:	9900      	ldr	r1, [sp, #0]
 8004c46:	b1f0      	cbz	r0, 8004c86 <__d2b+0x72>
 8004c48:	9a01      	ldr	r2, [sp, #4]
 8004c4a:	f1c0 0320 	rsb	r3, r0, #32
 8004c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c52:	430b      	orrs	r3, r1
 8004c54:	40c2      	lsrs	r2, r0
 8004c56:	617b      	str	r3, [r7, #20]
 8004c58:	9201      	str	r2, [sp, #4]
 8004c5a:	9b01      	ldr	r3, [sp, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	bf14      	ite	ne
 8004c60:	2102      	movne	r1, #2
 8004c62:	2101      	moveq	r1, #1
 8004c64:	61bb      	str	r3, [r7, #24]
 8004c66:	6139      	str	r1, [r7, #16]
 8004c68:	b1c4      	cbz	r4, 8004c9c <__d2b+0x88>
 8004c6a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8004c6e:	4404      	add	r4, r0
 8004c70:	6034      	str	r4, [r6, #0]
 8004c72:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004c76:	6028      	str	r0, [r5, #0]
 8004c78:	4638      	mov	r0, r7
 8004c7a:	b002      	add	sp, #8
 8004c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c80:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004c84:	e7d5      	b.n	8004c32 <__d2b+0x1e>
 8004c86:	6179      	str	r1, [r7, #20]
 8004c88:	e7e7      	b.n	8004c5a <__d2b+0x46>
 8004c8a:	a801      	add	r0, sp, #4
 8004c8c:	f7ff fdda 	bl	8004844 <__lo0bits>
 8004c90:	2101      	movs	r1, #1
 8004c92:	9b01      	ldr	r3, [sp, #4]
 8004c94:	6139      	str	r1, [r7, #16]
 8004c96:	617b      	str	r3, [r7, #20]
 8004c98:	3020      	adds	r0, #32
 8004c9a:	e7e5      	b.n	8004c68 <__d2b+0x54>
 8004c9c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004ca0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004ca4:	6030      	str	r0, [r6, #0]
 8004ca6:	6918      	ldr	r0, [r3, #16]
 8004ca8:	f7ff fdad 	bl	8004806 <__hi0bits>
 8004cac:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004cb0:	e7e1      	b.n	8004c76 <__d2b+0x62>

08004cb2 <_calloc_r>:
 8004cb2:	b538      	push	{r3, r4, r5, lr}
 8004cb4:	fb02 f401 	mul.w	r4, r2, r1
 8004cb8:	4621      	mov	r1, r4
 8004cba:	f000 f855 	bl	8004d68 <_malloc_r>
 8004cbe:	4605      	mov	r5, r0
 8004cc0:	b118      	cbz	r0, 8004cca <_calloc_r+0x18>
 8004cc2:	4622      	mov	r2, r4
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	f7fe f96b 	bl	8002fa0 <memset>
 8004cca:	4628      	mov	r0, r5
 8004ccc:	bd38      	pop	{r3, r4, r5, pc}
	...

08004cd0 <_free_r>:
 8004cd0:	b538      	push	{r3, r4, r5, lr}
 8004cd2:	4605      	mov	r5, r0
 8004cd4:	2900      	cmp	r1, #0
 8004cd6:	d043      	beq.n	8004d60 <_free_r+0x90>
 8004cd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cdc:	1f0c      	subs	r4, r1, #4
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	bfb8      	it	lt
 8004ce2:	18e4      	addlt	r4, r4, r3
 8004ce4:	f000 fc46 	bl	8005574 <__malloc_lock>
 8004ce8:	4a1e      	ldr	r2, [pc, #120]	; (8004d64 <_free_r+0x94>)
 8004cea:	6813      	ldr	r3, [r2, #0]
 8004cec:	4610      	mov	r0, r2
 8004cee:	b933      	cbnz	r3, 8004cfe <_free_r+0x2e>
 8004cf0:	6063      	str	r3, [r4, #4]
 8004cf2:	6014      	str	r4, [r2, #0]
 8004cf4:	4628      	mov	r0, r5
 8004cf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cfa:	f000 bc3c 	b.w	8005576 <__malloc_unlock>
 8004cfe:	42a3      	cmp	r3, r4
 8004d00:	d90b      	bls.n	8004d1a <_free_r+0x4a>
 8004d02:	6821      	ldr	r1, [r4, #0]
 8004d04:	1862      	adds	r2, r4, r1
 8004d06:	4293      	cmp	r3, r2
 8004d08:	bf01      	itttt	eq
 8004d0a:	681a      	ldreq	r2, [r3, #0]
 8004d0c:	685b      	ldreq	r3, [r3, #4]
 8004d0e:	1852      	addeq	r2, r2, r1
 8004d10:	6022      	streq	r2, [r4, #0]
 8004d12:	6063      	str	r3, [r4, #4]
 8004d14:	6004      	str	r4, [r0, #0]
 8004d16:	e7ed      	b.n	8004cf4 <_free_r+0x24>
 8004d18:	4613      	mov	r3, r2
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	b10a      	cbz	r2, 8004d22 <_free_r+0x52>
 8004d1e:	42a2      	cmp	r2, r4
 8004d20:	d9fa      	bls.n	8004d18 <_free_r+0x48>
 8004d22:	6819      	ldr	r1, [r3, #0]
 8004d24:	1858      	adds	r0, r3, r1
 8004d26:	42a0      	cmp	r0, r4
 8004d28:	d10b      	bne.n	8004d42 <_free_r+0x72>
 8004d2a:	6820      	ldr	r0, [r4, #0]
 8004d2c:	4401      	add	r1, r0
 8004d2e:	1858      	adds	r0, r3, r1
 8004d30:	4282      	cmp	r2, r0
 8004d32:	6019      	str	r1, [r3, #0]
 8004d34:	d1de      	bne.n	8004cf4 <_free_r+0x24>
 8004d36:	6810      	ldr	r0, [r2, #0]
 8004d38:	6852      	ldr	r2, [r2, #4]
 8004d3a:	4401      	add	r1, r0
 8004d3c:	6019      	str	r1, [r3, #0]
 8004d3e:	605a      	str	r2, [r3, #4]
 8004d40:	e7d8      	b.n	8004cf4 <_free_r+0x24>
 8004d42:	d902      	bls.n	8004d4a <_free_r+0x7a>
 8004d44:	230c      	movs	r3, #12
 8004d46:	602b      	str	r3, [r5, #0]
 8004d48:	e7d4      	b.n	8004cf4 <_free_r+0x24>
 8004d4a:	6820      	ldr	r0, [r4, #0]
 8004d4c:	1821      	adds	r1, r4, r0
 8004d4e:	428a      	cmp	r2, r1
 8004d50:	bf01      	itttt	eq
 8004d52:	6811      	ldreq	r1, [r2, #0]
 8004d54:	6852      	ldreq	r2, [r2, #4]
 8004d56:	1809      	addeq	r1, r1, r0
 8004d58:	6021      	streq	r1, [r4, #0]
 8004d5a:	6062      	str	r2, [r4, #4]
 8004d5c:	605c      	str	r4, [r3, #4]
 8004d5e:	e7c9      	b.n	8004cf4 <_free_r+0x24>
 8004d60:	bd38      	pop	{r3, r4, r5, pc}
 8004d62:	bf00      	nop
 8004d64:	20000200 	.word	0x20000200

08004d68 <_malloc_r>:
 8004d68:	b570      	push	{r4, r5, r6, lr}
 8004d6a:	1ccd      	adds	r5, r1, #3
 8004d6c:	f025 0503 	bic.w	r5, r5, #3
 8004d70:	3508      	adds	r5, #8
 8004d72:	2d0c      	cmp	r5, #12
 8004d74:	bf38      	it	cc
 8004d76:	250c      	movcc	r5, #12
 8004d78:	2d00      	cmp	r5, #0
 8004d7a:	4606      	mov	r6, r0
 8004d7c:	db01      	blt.n	8004d82 <_malloc_r+0x1a>
 8004d7e:	42a9      	cmp	r1, r5
 8004d80:	d903      	bls.n	8004d8a <_malloc_r+0x22>
 8004d82:	230c      	movs	r3, #12
 8004d84:	6033      	str	r3, [r6, #0]
 8004d86:	2000      	movs	r0, #0
 8004d88:	bd70      	pop	{r4, r5, r6, pc}
 8004d8a:	f000 fbf3 	bl	8005574 <__malloc_lock>
 8004d8e:	4a21      	ldr	r2, [pc, #132]	; (8004e14 <_malloc_r+0xac>)
 8004d90:	6814      	ldr	r4, [r2, #0]
 8004d92:	4621      	mov	r1, r4
 8004d94:	b991      	cbnz	r1, 8004dbc <_malloc_r+0x54>
 8004d96:	4c20      	ldr	r4, [pc, #128]	; (8004e18 <_malloc_r+0xb0>)
 8004d98:	6823      	ldr	r3, [r4, #0]
 8004d9a:	b91b      	cbnz	r3, 8004da4 <_malloc_r+0x3c>
 8004d9c:	4630      	mov	r0, r6
 8004d9e:	f000 f97b 	bl	8005098 <_sbrk_r>
 8004da2:	6020      	str	r0, [r4, #0]
 8004da4:	4629      	mov	r1, r5
 8004da6:	4630      	mov	r0, r6
 8004da8:	f000 f976 	bl	8005098 <_sbrk_r>
 8004dac:	1c43      	adds	r3, r0, #1
 8004dae:	d124      	bne.n	8004dfa <_malloc_r+0x92>
 8004db0:	230c      	movs	r3, #12
 8004db2:	4630      	mov	r0, r6
 8004db4:	6033      	str	r3, [r6, #0]
 8004db6:	f000 fbde 	bl	8005576 <__malloc_unlock>
 8004dba:	e7e4      	b.n	8004d86 <_malloc_r+0x1e>
 8004dbc:	680b      	ldr	r3, [r1, #0]
 8004dbe:	1b5b      	subs	r3, r3, r5
 8004dc0:	d418      	bmi.n	8004df4 <_malloc_r+0x8c>
 8004dc2:	2b0b      	cmp	r3, #11
 8004dc4:	d90f      	bls.n	8004de6 <_malloc_r+0x7e>
 8004dc6:	600b      	str	r3, [r1, #0]
 8004dc8:	18cc      	adds	r4, r1, r3
 8004dca:	50cd      	str	r5, [r1, r3]
 8004dcc:	4630      	mov	r0, r6
 8004dce:	f000 fbd2 	bl	8005576 <__malloc_unlock>
 8004dd2:	f104 000b 	add.w	r0, r4, #11
 8004dd6:	1d23      	adds	r3, r4, #4
 8004dd8:	f020 0007 	bic.w	r0, r0, #7
 8004ddc:	1ac3      	subs	r3, r0, r3
 8004dde:	d0d3      	beq.n	8004d88 <_malloc_r+0x20>
 8004de0:	425a      	negs	r2, r3
 8004de2:	50e2      	str	r2, [r4, r3]
 8004de4:	e7d0      	b.n	8004d88 <_malloc_r+0x20>
 8004de6:	684b      	ldr	r3, [r1, #4]
 8004de8:	428c      	cmp	r4, r1
 8004dea:	bf16      	itet	ne
 8004dec:	6063      	strne	r3, [r4, #4]
 8004dee:	6013      	streq	r3, [r2, #0]
 8004df0:	460c      	movne	r4, r1
 8004df2:	e7eb      	b.n	8004dcc <_malloc_r+0x64>
 8004df4:	460c      	mov	r4, r1
 8004df6:	6849      	ldr	r1, [r1, #4]
 8004df8:	e7cc      	b.n	8004d94 <_malloc_r+0x2c>
 8004dfa:	1cc4      	adds	r4, r0, #3
 8004dfc:	f024 0403 	bic.w	r4, r4, #3
 8004e00:	42a0      	cmp	r0, r4
 8004e02:	d005      	beq.n	8004e10 <_malloc_r+0xa8>
 8004e04:	1a21      	subs	r1, r4, r0
 8004e06:	4630      	mov	r0, r6
 8004e08:	f000 f946 	bl	8005098 <_sbrk_r>
 8004e0c:	3001      	adds	r0, #1
 8004e0e:	d0cf      	beq.n	8004db0 <_malloc_r+0x48>
 8004e10:	6025      	str	r5, [r4, #0]
 8004e12:	e7db      	b.n	8004dcc <_malloc_r+0x64>
 8004e14:	20000200 	.word	0x20000200
 8004e18:	20000204 	.word	0x20000204

08004e1c <__sfputc_r>:
 8004e1c:	6893      	ldr	r3, [r2, #8]
 8004e1e:	b410      	push	{r4}
 8004e20:	3b01      	subs	r3, #1
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	6093      	str	r3, [r2, #8]
 8004e26:	da07      	bge.n	8004e38 <__sfputc_r+0x1c>
 8004e28:	6994      	ldr	r4, [r2, #24]
 8004e2a:	42a3      	cmp	r3, r4
 8004e2c:	db01      	blt.n	8004e32 <__sfputc_r+0x16>
 8004e2e:	290a      	cmp	r1, #10
 8004e30:	d102      	bne.n	8004e38 <__sfputc_r+0x1c>
 8004e32:	bc10      	pop	{r4}
 8004e34:	f000 b984 	b.w	8005140 <__swbuf_r>
 8004e38:	6813      	ldr	r3, [r2, #0]
 8004e3a:	1c58      	adds	r0, r3, #1
 8004e3c:	6010      	str	r0, [r2, #0]
 8004e3e:	7019      	strb	r1, [r3, #0]
 8004e40:	4608      	mov	r0, r1
 8004e42:	bc10      	pop	{r4}
 8004e44:	4770      	bx	lr

08004e46 <__sfputs_r>:
 8004e46:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e48:	4606      	mov	r6, r0
 8004e4a:	460f      	mov	r7, r1
 8004e4c:	4614      	mov	r4, r2
 8004e4e:	18d5      	adds	r5, r2, r3
 8004e50:	42ac      	cmp	r4, r5
 8004e52:	d101      	bne.n	8004e58 <__sfputs_r+0x12>
 8004e54:	2000      	movs	r0, #0
 8004e56:	e007      	b.n	8004e68 <__sfputs_r+0x22>
 8004e58:	463a      	mov	r2, r7
 8004e5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e5e:	4630      	mov	r0, r6
 8004e60:	f7ff ffdc 	bl	8004e1c <__sfputc_r>
 8004e64:	1c43      	adds	r3, r0, #1
 8004e66:	d1f3      	bne.n	8004e50 <__sfputs_r+0xa>
 8004e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004e6c <_vfiprintf_r>:
 8004e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e70:	460c      	mov	r4, r1
 8004e72:	b09d      	sub	sp, #116	; 0x74
 8004e74:	4617      	mov	r7, r2
 8004e76:	461d      	mov	r5, r3
 8004e78:	4606      	mov	r6, r0
 8004e7a:	b118      	cbz	r0, 8004e84 <_vfiprintf_r+0x18>
 8004e7c:	6983      	ldr	r3, [r0, #24]
 8004e7e:	b90b      	cbnz	r3, 8004e84 <_vfiprintf_r+0x18>
 8004e80:	f7ff fb82 	bl	8004588 <__sinit>
 8004e84:	4b7c      	ldr	r3, [pc, #496]	; (8005078 <_vfiprintf_r+0x20c>)
 8004e86:	429c      	cmp	r4, r3
 8004e88:	d158      	bne.n	8004f3c <_vfiprintf_r+0xd0>
 8004e8a:	6874      	ldr	r4, [r6, #4]
 8004e8c:	89a3      	ldrh	r3, [r4, #12]
 8004e8e:	0718      	lsls	r0, r3, #28
 8004e90:	d55e      	bpl.n	8004f50 <_vfiprintf_r+0xe4>
 8004e92:	6923      	ldr	r3, [r4, #16]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d05b      	beq.n	8004f50 <_vfiprintf_r+0xe4>
 8004e98:	2300      	movs	r3, #0
 8004e9a:	9309      	str	r3, [sp, #36]	; 0x24
 8004e9c:	2320      	movs	r3, #32
 8004e9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ea2:	2330      	movs	r3, #48	; 0x30
 8004ea4:	f04f 0b01 	mov.w	fp, #1
 8004ea8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004eac:	9503      	str	r5, [sp, #12]
 8004eae:	46b8      	mov	r8, r7
 8004eb0:	4645      	mov	r5, r8
 8004eb2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004eb6:	b10b      	cbz	r3, 8004ebc <_vfiprintf_r+0x50>
 8004eb8:	2b25      	cmp	r3, #37	; 0x25
 8004eba:	d154      	bne.n	8004f66 <_vfiprintf_r+0xfa>
 8004ebc:	ebb8 0a07 	subs.w	sl, r8, r7
 8004ec0:	d00b      	beq.n	8004eda <_vfiprintf_r+0x6e>
 8004ec2:	4653      	mov	r3, sl
 8004ec4:	463a      	mov	r2, r7
 8004ec6:	4621      	mov	r1, r4
 8004ec8:	4630      	mov	r0, r6
 8004eca:	f7ff ffbc 	bl	8004e46 <__sfputs_r>
 8004ece:	3001      	adds	r0, #1
 8004ed0:	f000 80c2 	beq.w	8005058 <_vfiprintf_r+0x1ec>
 8004ed4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ed6:	4453      	add	r3, sl
 8004ed8:	9309      	str	r3, [sp, #36]	; 0x24
 8004eda:	f898 3000 	ldrb.w	r3, [r8]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	f000 80ba 	beq.w	8005058 <_vfiprintf_r+0x1ec>
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8004eea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004eee:	9304      	str	r3, [sp, #16]
 8004ef0:	9307      	str	r3, [sp, #28]
 8004ef2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ef6:	931a      	str	r3, [sp, #104]	; 0x68
 8004ef8:	46a8      	mov	r8, r5
 8004efa:	2205      	movs	r2, #5
 8004efc:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004f00:	485e      	ldr	r0, [pc, #376]	; (800507c <_vfiprintf_r+0x210>)
 8004f02:	f7ff fbe1 	bl	80046c8 <memchr>
 8004f06:	9b04      	ldr	r3, [sp, #16]
 8004f08:	bb78      	cbnz	r0, 8004f6a <_vfiprintf_r+0xfe>
 8004f0a:	06d9      	lsls	r1, r3, #27
 8004f0c:	bf44      	itt	mi
 8004f0e:	2220      	movmi	r2, #32
 8004f10:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004f14:	071a      	lsls	r2, r3, #28
 8004f16:	bf44      	itt	mi
 8004f18:	222b      	movmi	r2, #43	; 0x2b
 8004f1a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004f1e:	782a      	ldrb	r2, [r5, #0]
 8004f20:	2a2a      	cmp	r2, #42	; 0x2a
 8004f22:	d02a      	beq.n	8004f7a <_vfiprintf_r+0x10e>
 8004f24:	46a8      	mov	r8, r5
 8004f26:	2000      	movs	r0, #0
 8004f28:	250a      	movs	r5, #10
 8004f2a:	9a07      	ldr	r2, [sp, #28]
 8004f2c:	4641      	mov	r1, r8
 8004f2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f32:	3b30      	subs	r3, #48	; 0x30
 8004f34:	2b09      	cmp	r3, #9
 8004f36:	d969      	bls.n	800500c <_vfiprintf_r+0x1a0>
 8004f38:	b360      	cbz	r0, 8004f94 <_vfiprintf_r+0x128>
 8004f3a:	e024      	b.n	8004f86 <_vfiprintf_r+0x11a>
 8004f3c:	4b50      	ldr	r3, [pc, #320]	; (8005080 <_vfiprintf_r+0x214>)
 8004f3e:	429c      	cmp	r4, r3
 8004f40:	d101      	bne.n	8004f46 <_vfiprintf_r+0xda>
 8004f42:	68b4      	ldr	r4, [r6, #8]
 8004f44:	e7a2      	b.n	8004e8c <_vfiprintf_r+0x20>
 8004f46:	4b4f      	ldr	r3, [pc, #316]	; (8005084 <_vfiprintf_r+0x218>)
 8004f48:	429c      	cmp	r4, r3
 8004f4a:	bf08      	it	eq
 8004f4c:	68f4      	ldreq	r4, [r6, #12]
 8004f4e:	e79d      	b.n	8004e8c <_vfiprintf_r+0x20>
 8004f50:	4621      	mov	r1, r4
 8004f52:	4630      	mov	r0, r6
 8004f54:	f000 f958 	bl	8005208 <__swsetup_r>
 8004f58:	2800      	cmp	r0, #0
 8004f5a:	d09d      	beq.n	8004e98 <_vfiprintf_r+0x2c>
 8004f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f60:	b01d      	add	sp, #116	; 0x74
 8004f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f66:	46a8      	mov	r8, r5
 8004f68:	e7a2      	b.n	8004eb0 <_vfiprintf_r+0x44>
 8004f6a:	4a44      	ldr	r2, [pc, #272]	; (800507c <_vfiprintf_r+0x210>)
 8004f6c:	4645      	mov	r5, r8
 8004f6e:	1a80      	subs	r0, r0, r2
 8004f70:	fa0b f000 	lsl.w	r0, fp, r0
 8004f74:	4318      	orrs	r0, r3
 8004f76:	9004      	str	r0, [sp, #16]
 8004f78:	e7be      	b.n	8004ef8 <_vfiprintf_r+0x8c>
 8004f7a:	9a03      	ldr	r2, [sp, #12]
 8004f7c:	1d11      	adds	r1, r2, #4
 8004f7e:	6812      	ldr	r2, [r2, #0]
 8004f80:	9103      	str	r1, [sp, #12]
 8004f82:	2a00      	cmp	r2, #0
 8004f84:	db01      	blt.n	8004f8a <_vfiprintf_r+0x11e>
 8004f86:	9207      	str	r2, [sp, #28]
 8004f88:	e004      	b.n	8004f94 <_vfiprintf_r+0x128>
 8004f8a:	4252      	negs	r2, r2
 8004f8c:	f043 0302 	orr.w	r3, r3, #2
 8004f90:	9207      	str	r2, [sp, #28]
 8004f92:	9304      	str	r3, [sp, #16]
 8004f94:	f898 3000 	ldrb.w	r3, [r8]
 8004f98:	2b2e      	cmp	r3, #46	; 0x2e
 8004f9a:	d10e      	bne.n	8004fba <_vfiprintf_r+0x14e>
 8004f9c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004fa0:	2b2a      	cmp	r3, #42	; 0x2a
 8004fa2:	d138      	bne.n	8005016 <_vfiprintf_r+0x1aa>
 8004fa4:	9b03      	ldr	r3, [sp, #12]
 8004fa6:	f108 0802 	add.w	r8, r8, #2
 8004faa:	1d1a      	adds	r2, r3, #4
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	9203      	str	r2, [sp, #12]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	bfb8      	it	lt
 8004fb4:	f04f 33ff 	movlt.w	r3, #4294967295
 8004fb8:	9305      	str	r3, [sp, #20]
 8004fba:	4d33      	ldr	r5, [pc, #204]	; (8005088 <_vfiprintf_r+0x21c>)
 8004fbc:	2203      	movs	r2, #3
 8004fbe:	f898 1000 	ldrb.w	r1, [r8]
 8004fc2:	4628      	mov	r0, r5
 8004fc4:	f7ff fb80 	bl	80046c8 <memchr>
 8004fc8:	b140      	cbz	r0, 8004fdc <_vfiprintf_r+0x170>
 8004fca:	2340      	movs	r3, #64	; 0x40
 8004fcc:	1b40      	subs	r0, r0, r5
 8004fce:	fa03 f000 	lsl.w	r0, r3, r0
 8004fd2:	9b04      	ldr	r3, [sp, #16]
 8004fd4:	f108 0801 	add.w	r8, r8, #1
 8004fd8:	4303      	orrs	r3, r0
 8004fda:	9304      	str	r3, [sp, #16]
 8004fdc:	f898 1000 	ldrb.w	r1, [r8]
 8004fe0:	2206      	movs	r2, #6
 8004fe2:	482a      	ldr	r0, [pc, #168]	; (800508c <_vfiprintf_r+0x220>)
 8004fe4:	f108 0701 	add.w	r7, r8, #1
 8004fe8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004fec:	f7ff fb6c 	bl	80046c8 <memchr>
 8004ff0:	2800      	cmp	r0, #0
 8004ff2:	d037      	beq.n	8005064 <_vfiprintf_r+0x1f8>
 8004ff4:	4b26      	ldr	r3, [pc, #152]	; (8005090 <_vfiprintf_r+0x224>)
 8004ff6:	bb1b      	cbnz	r3, 8005040 <_vfiprintf_r+0x1d4>
 8004ff8:	9b03      	ldr	r3, [sp, #12]
 8004ffa:	3307      	adds	r3, #7
 8004ffc:	f023 0307 	bic.w	r3, r3, #7
 8005000:	3308      	adds	r3, #8
 8005002:	9303      	str	r3, [sp, #12]
 8005004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005006:	444b      	add	r3, r9
 8005008:	9309      	str	r3, [sp, #36]	; 0x24
 800500a:	e750      	b.n	8004eae <_vfiprintf_r+0x42>
 800500c:	fb05 3202 	mla	r2, r5, r2, r3
 8005010:	2001      	movs	r0, #1
 8005012:	4688      	mov	r8, r1
 8005014:	e78a      	b.n	8004f2c <_vfiprintf_r+0xc0>
 8005016:	2300      	movs	r3, #0
 8005018:	250a      	movs	r5, #10
 800501a:	4619      	mov	r1, r3
 800501c:	f108 0801 	add.w	r8, r8, #1
 8005020:	9305      	str	r3, [sp, #20]
 8005022:	4640      	mov	r0, r8
 8005024:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005028:	3a30      	subs	r2, #48	; 0x30
 800502a:	2a09      	cmp	r2, #9
 800502c:	d903      	bls.n	8005036 <_vfiprintf_r+0x1ca>
 800502e:	2b00      	cmp	r3, #0
 8005030:	d0c3      	beq.n	8004fba <_vfiprintf_r+0x14e>
 8005032:	9105      	str	r1, [sp, #20]
 8005034:	e7c1      	b.n	8004fba <_vfiprintf_r+0x14e>
 8005036:	fb05 2101 	mla	r1, r5, r1, r2
 800503a:	2301      	movs	r3, #1
 800503c:	4680      	mov	r8, r0
 800503e:	e7f0      	b.n	8005022 <_vfiprintf_r+0x1b6>
 8005040:	ab03      	add	r3, sp, #12
 8005042:	9300      	str	r3, [sp, #0]
 8005044:	4622      	mov	r2, r4
 8005046:	4b13      	ldr	r3, [pc, #76]	; (8005094 <_vfiprintf_r+0x228>)
 8005048:	a904      	add	r1, sp, #16
 800504a:	4630      	mov	r0, r6
 800504c:	f7fe f842 	bl	80030d4 <_printf_float>
 8005050:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005054:	4681      	mov	r9, r0
 8005056:	d1d5      	bne.n	8005004 <_vfiprintf_r+0x198>
 8005058:	89a3      	ldrh	r3, [r4, #12]
 800505a:	065b      	lsls	r3, r3, #25
 800505c:	f53f af7e 	bmi.w	8004f5c <_vfiprintf_r+0xf0>
 8005060:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005062:	e77d      	b.n	8004f60 <_vfiprintf_r+0xf4>
 8005064:	ab03      	add	r3, sp, #12
 8005066:	9300      	str	r3, [sp, #0]
 8005068:	4622      	mov	r2, r4
 800506a:	4b0a      	ldr	r3, [pc, #40]	; (8005094 <_vfiprintf_r+0x228>)
 800506c:	a904      	add	r1, sp, #16
 800506e:	4630      	mov	r0, r6
 8005070:	f7fe fadc 	bl	800362c <_printf_i>
 8005074:	e7ec      	b.n	8005050 <_vfiprintf_r+0x1e4>
 8005076:	bf00      	nop
 8005078:	080056d4 	.word	0x080056d4
 800507c:	08005814 	.word	0x08005814
 8005080:	080056f4 	.word	0x080056f4
 8005084:	080056b4 	.word	0x080056b4
 8005088:	0800581a 	.word	0x0800581a
 800508c:	0800581e 	.word	0x0800581e
 8005090:	080030d5 	.word	0x080030d5
 8005094:	08004e47 	.word	0x08004e47

08005098 <_sbrk_r>:
 8005098:	b538      	push	{r3, r4, r5, lr}
 800509a:	2300      	movs	r3, #0
 800509c:	4c05      	ldr	r4, [pc, #20]	; (80050b4 <_sbrk_r+0x1c>)
 800509e:	4605      	mov	r5, r0
 80050a0:	4608      	mov	r0, r1
 80050a2:	6023      	str	r3, [r4, #0]
 80050a4:	f7fb ffbc 	bl	8001020 <_sbrk>
 80050a8:	1c43      	adds	r3, r0, #1
 80050aa:	d102      	bne.n	80050b2 <_sbrk_r+0x1a>
 80050ac:	6823      	ldr	r3, [r4, #0]
 80050ae:	b103      	cbz	r3, 80050b2 <_sbrk_r+0x1a>
 80050b0:	602b      	str	r3, [r5, #0]
 80050b2:	bd38      	pop	{r3, r4, r5, pc}
 80050b4:	20000280 	.word	0x20000280

080050b8 <__sread>:
 80050b8:	b510      	push	{r4, lr}
 80050ba:	460c      	mov	r4, r1
 80050bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050c0:	f000 fa5a 	bl	8005578 <_read_r>
 80050c4:	2800      	cmp	r0, #0
 80050c6:	bfab      	itete	ge
 80050c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80050ca:	89a3      	ldrhlt	r3, [r4, #12]
 80050cc:	181b      	addge	r3, r3, r0
 80050ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80050d2:	bfac      	ite	ge
 80050d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80050d6:	81a3      	strhlt	r3, [r4, #12]
 80050d8:	bd10      	pop	{r4, pc}

080050da <__swrite>:
 80050da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050de:	461f      	mov	r7, r3
 80050e0:	898b      	ldrh	r3, [r1, #12]
 80050e2:	4605      	mov	r5, r0
 80050e4:	05db      	lsls	r3, r3, #23
 80050e6:	460c      	mov	r4, r1
 80050e8:	4616      	mov	r6, r2
 80050ea:	d505      	bpl.n	80050f8 <__swrite+0x1e>
 80050ec:	2302      	movs	r3, #2
 80050ee:	2200      	movs	r2, #0
 80050f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050f4:	f000 f9b6 	bl	8005464 <_lseek_r>
 80050f8:	89a3      	ldrh	r3, [r4, #12]
 80050fa:	4632      	mov	r2, r6
 80050fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005100:	81a3      	strh	r3, [r4, #12]
 8005102:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005106:	463b      	mov	r3, r7
 8005108:	4628      	mov	r0, r5
 800510a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800510e:	f000 b869 	b.w	80051e4 <_write_r>

08005112 <__sseek>:
 8005112:	b510      	push	{r4, lr}
 8005114:	460c      	mov	r4, r1
 8005116:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800511a:	f000 f9a3 	bl	8005464 <_lseek_r>
 800511e:	1c43      	adds	r3, r0, #1
 8005120:	89a3      	ldrh	r3, [r4, #12]
 8005122:	bf15      	itete	ne
 8005124:	6560      	strne	r0, [r4, #84]	; 0x54
 8005126:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800512a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800512e:	81a3      	strheq	r3, [r4, #12]
 8005130:	bf18      	it	ne
 8005132:	81a3      	strhne	r3, [r4, #12]
 8005134:	bd10      	pop	{r4, pc}

08005136 <__sclose>:
 8005136:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800513a:	f000 b8d3 	b.w	80052e4 <_close_r>
	...

08005140 <__swbuf_r>:
 8005140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005142:	460e      	mov	r6, r1
 8005144:	4614      	mov	r4, r2
 8005146:	4605      	mov	r5, r0
 8005148:	b118      	cbz	r0, 8005152 <__swbuf_r+0x12>
 800514a:	6983      	ldr	r3, [r0, #24]
 800514c:	b90b      	cbnz	r3, 8005152 <__swbuf_r+0x12>
 800514e:	f7ff fa1b 	bl	8004588 <__sinit>
 8005152:	4b21      	ldr	r3, [pc, #132]	; (80051d8 <__swbuf_r+0x98>)
 8005154:	429c      	cmp	r4, r3
 8005156:	d12a      	bne.n	80051ae <__swbuf_r+0x6e>
 8005158:	686c      	ldr	r4, [r5, #4]
 800515a:	69a3      	ldr	r3, [r4, #24]
 800515c:	60a3      	str	r3, [r4, #8]
 800515e:	89a3      	ldrh	r3, [r4, #12]
 8005160:	071a      	lsls	r2, r3, #28
 8005162:	d52e      	bpl.n	80051c2 <__swbuf_r+0x82>
 8005164:	6923      	ldr	r3, [r4, #16]
 8005166:	b363      	cbz	r3, 80051c2 <__swbuf_r+0x82>
 8005168:	6923      	ldr	r3, [r4, #16]
 800516a:	6820      	ldr	r0, [r4, #0]
 800516c:	b2f6      	uxtb	r6, r6
 800516e:	1ac0      	subs	r0, r0, r3
 8005170:	6963      	ldr	r3, [r4, #20]
 8005172:	4637      	mov	r7, r6
 8005174:	4283      	cmp	r3, r0
 8005176:	dc04      	bgt.n	8005182 <__swbuf_r+0x42>
 8005178:	4621      	mov	r1, r4
 800517a:	4628      	mov	r0, r5
 800517c:	f000 f948 	bl	8005410 <_fflush_r>
 8005180:	bb28      	cbnz	r0, 80051ce <__swbuf_r+0x8e>
 8005182:	68a3      	ldr	r3, [r4, #8]
 8005184:	3001      	adds	r0, #1
 8005186:	3b01      	subs	r3, #1
 8005188:	60a3      	str	r3, [r4, #8]
 800518a:	6823      	ldr	r3, [r4, #0]
 800518c:	1c5a      	adds	r2, r3, #1
 800518e:	6022      	str	r2, [r4, #0]
 8005190:	701e      	strb	r6, [r3, #0]
 8005192:	6963      	ldr	r3, [r4, #20]
 8005194:	4283      	cmp	r3, r0
 8005196:	d004      	beq.n	80051a2 <__swbuf_r+0x62>
 8005198:	89a3      	ldrh	r3, [r4, #12]
 800519a:	07db      	lsls	r3, r3, #31
 800519c:	d519      	bpl.n	80051d2 <__swbuf_r+0x92>
 800519e:	2e0a      	cmp	r6, #10
 80051a0:	d117      	bne.n	80051d2 <__swbuf_r+0x92>
 80051a2:	4621      	mov	r1, r4
 80051a4:	4628      	mov	r0, r5
 80051a6:	f000 f933 	bl	8005410 <_fflush_r>
 80051aa:	b190      	cbz	r0, 80051d2 <__swbuf_r+0x92>
 80051ac:	e00f      	b.n	80051ce <__swbuf_r+0x8e>
 80051ae:	4b0b      	ldr	r3, [pc, #44]	; (80051dc <__swbuf_r+0x9c>)
 80051b0:	429c      	cmp	r4, r3
 80051b2:	d101      	bne.n	80051b8 <__swbuf_r+0x78>
 80051b4:	68ac      	ldr	r4, [r5, #8]
 80051b6:	e7d0      	b.n	800515a <__swbuf_r+0x1a>
 80051b8:	4b09      	ldr	r3, [pc, #36]	; (80051e0 <__swbuf_r+0xa0>)
 80051ba:	429c      	cmp	r4, r3
 80051bc:	bf08      	it	eq
 80051be:	68ec      	ldreq	r4, [r5, #12]
 80051c0:	e7cb      	b.n	800515a <__swbuf_r+0x1a>
 80051c2:	4621      	mov	r1, r4
 80051c4:	4628      	mov	r0, r5
 80051c6:	f000 f81f 	bl	8005208 <__swsetup_r>
 80051ca:	2800      	cmp	r0, #0
 80051cc:	d0cc      	beq.n	8005168 <__swbuf_r+0x28>
 80051ce:	f04f 37ff 	mov.w	r7, #4294967295
 80051d2:	4638      	mov	r0, r7
 80051d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051d6:	bf00      	nop
 80051d8:	080056d4 	.word	0x080056d4
 80051dc:	080056f4 	.word	0x080056f4
 80051e0:	080056b4 	.word	0x080056b4

080051e4 <_write_r>:
 80051e4:	b538      	push	{r3, r4, r5, lr}
 80051e6:	4605      	mov	r5, r0
 80051e8:	4608      	mov	r0, r1
 80051ea:	4611      	mov	r1, r2
 80051ec:	2200      	movs	r2, #0
 80051ee:	4c05      	ldr	r4, [pc, #20]	; (8005204 <_write_r+0x20>)
 80051f0:	6022      	str	r2, [r4, #0]
 80051f2:	461a      	mov	r2, r3
 80051f4:	f7fb fc98 	bl	8000b28 <_write>
 80051f8:	1c43      	adds	r3, r0, #1
 80051fa:	d102      	bne.n	8005202 <_write_r+0x1e>
 80051fc:	6823      	ldr	r3, [r4, #0]
 80051fe:	b103      	cbz	r3, 8005202 <_write_r+0x1e>
 8005200:	602b      	str	r3, [r5, #0]
 8005202:	bd38      	pop	{r3, r4, r5, pc}
 8005204:	20000280 	.word	0x20000280

08005208 <__swsetup_r>:
 8005208:	4b32      	ldr	r3, [pc, #200]	; (80052d4 <__swsetup_r+0xcc>)
 800520a:	b570      	push	{r4, r5, r6, lr}
 800520c:	681d      	ldr	r5, [r3, #0]
 800520e:	4606      	mov	r6, r0
 8005210:	460c      	mov	r4, r1
 8005212:	b125      	cbz	r5, 800521e <__swsetup_r+0x16>
 8005214:	69ab      	ldr	r3, [r5, #24]
 8005216:	b913      	cbnz	r3, 800521e <__swsetup_r+0x16>
 8005218:	4628      	mov	r0, r5
 800521a:	f7ff f9b5 	bl	8004588 <__sinit>
 800521e:	4b2e      	ldr	r3, [pc, #184]	; (80052d8 <__swsetup_r+0xd0>)
 8005220:	429c      	cmp	r4, r3
 8005222:	d10f      	bne.n	8005244 <__swsetup_r+0x3c>
 8005224:	686c      	ldr	r4, [r5, #4]
 8005226:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800522a:	b29a      	uxth	r2, r3
 800522c:	0715      	lsls	r5, r2, #28
 800522e:	d42c      	bmi.n	800528a <__swsetup_r+0x82>
 8005230:	06d0      	lsls	r0, r2, #27
 8005232:	d411      	bmi.n	8005258 <__swsetup_r+0x50>
 8005234:	2209      	movs	r2, #9
 8005236:	6032      	str	r2, [r6, #0]
 8005238:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800523c:	81a3      	strh	r3, [r4, #12]
 800523e:	f04f 30ff 	mov.w	r0, #4294967295
 8005242:	e03e      	b.n	80052c2 <__swsetup_r+0xba>
 8005244:	4b25      	ldr	r3, [pc, #148]	; (80052dc <__swsetup_r+0xd4>)
 8005246:	429c      	cmp	r4, r3
 8005248:	d101      	bne.n	800524e <__swsetup_r+0x46>
 800524a:	68ac      	ldr	r4, [r5, #8]
 800524c:	e7eb      	b.n	8005226 <__swsetup_r+0x1e>
 800524e:	4b24      	ldr	r3, [pc, #144]	; (80052e0 <__swsetup_r+0xd8>)
 8005250:	429c      	cmp	r4, r3
 8005252:	bf08      	it	eq
 8005254:	68ec      	ldreq	r4, [r5, #12]
 8005256:	e7e6      	b.n	8005226 <__swsetup_r+0x1e>
 8005258:	0751      	lsls	r1, r2, #29
 800525a:	d512      	bpl.n	8005282 <__swsetup_r+0x7a>
 800525c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800525e:	b141      	cbz	r1, 8005272 <__swsetup_r+0x6a>
 8005260:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005264:	4299      	cmp	r1, r3
 8005266:	d002      	beq.n	800526e <__swsetup_r+0x66>
 8005268:	4630      	mov	r0, r6
 800526a:	f7ff fd31 	bl	8004cd0 <_free_r>
 800526e:	2300      	movs	r3, #0
 8005270:	6363      	str	r3, [r4, #52]	; 0x34
 8005272:	89a3      	ldrh	r3, [r4, #12]
 8005274:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005278:	81a3      	strh	r3, [r4, #12]
 800527a:	2300      	movs	r3, #0
 800527c:	6063      	str	r3, [r4, #4]
 800527e:	6923      	ldr	r3, [r4, #16]
 8005280:	6023      	str	r3, [r4, #0]
 8005282:	89a3      	ldrh	r3, [r4, #12]
 8005284:	f043 0308 	orr.w	r3, r3, #8
 8005288:	81a3      	strh	r3, [r4, #12]
 800528a:	6923      	ldr	r3, [r4, #16]
 800528c:	b94b      	cbnz	r3, 80052a2 <__swsetup_r+0x9a>
 800528e:	89a3      	ldrh	r3, [r4, #12]
 8005290:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005298:	d003      	beq.n	80052a2 <__swsetup_r+0x9a>
 800529a:	4621      	mov	r1, r4
 800529c:	4630      	mov	r0, r6
 800529e:	f000 f917 	bl	80054d0 <__smakebuf_r>
 80052a2:	89a2      	ldrh	r2, [r4, #12]
 80052a4:	f012 0301 	ands.w	r3, r2, #1
 80052a8:	d00c      	beq.n	80052c4 <__swsetup_r+0xbc>
 80052aa:	2300      	movs	r3, #0
 80052ac:	60a3      	str	r3, [r4, #8]
 80052ae:	6963      	ldr	r3, [r4, #20]
 80052b0:	425b      	negs	r3, r3
 80052b2:	61a3      	str	r3, [r4, #24]
 80052b4:	6923      	ldr	r3, [r4, #16]
 80052b6:	b953      	cbnz	r3, 80052ce <__swsetup_r+0xc6>
 80052b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80052bc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80052c0:	d1ba      	bne.n	8005238 <__swsetup_r+0x30>
 80052c2:	bd70      	pop	{r4, r5, r6, pc}
 80052c4:	0792      	lsls	r2, r2, #30
 80052c6:	bf58      	it	pl
 80052c8:	6963      	ldrpl	r3, [r4, #20]
 80052ca:	60a3      	str	r3, [r4, #8]
 80052cc:	e7f2      	b.n	80052b4 <__swsetup_r+0xac>
 80052ce:	2000      	movs	r0, #0
 80052d0:	e7f7      	b.n	80052c2 <__swsetup_r+0xba>
 80052d2:	bf00      	nop
 80052d4:	2000000c 	.word	0x2000000c
 80052d8:	080056d4 	.word	0x080056d4
 80052dc:	080056f4 	.word	0x080056f4
 80052e0:	080056b4 	.word	0x080056b4

080052e4 <_close_r>:
 80052e4:	b538      	push	{r3, r4, r5, lr}
 80052e6:	2300      	movs	r3, #0
 80052e8:	4c05      	ldr	r4, [pc, #20]	; (8005300 <_close_r+0x1c>)
 80052ea:	4605      	mov	r5, r0
 80052ec:	4608      	mov	r0, r1
 80052ee:	6023      	str	r3, [r4, #0]
 80052f0:	f7fb fe65 	bl	8000fbe <_close>
 80052f4:	1c43      	adds	r3, r0, #1
 80052f6:	d102      	bne.n	80052fe <_close_r+0x1a>
 80052f8:	6823      	ldr	r3, [r4, #0]
 80052fa:	b103      	cbz	r3, 80052fe <_close_r+0x1a>
 80052fc:	602b      	str	r3, [r5, #0]
 80052fe:	bd38      	pop	{r3, r4, r5, pc}
 8005300:	20000280 	.word	0x20000280

08005304 <__sflush_r>:
 8005304:	898a      	ldrh	r2, [r1, #12]
 8005306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800530a:	4605      	mov	r5, r0
 800530c:	0710      	lsls	r0, r2, #28
 800530e:	460c      	mov	r4, r1
 8005310:	d458      	bmi.n	80053c4 <__sflush_r+0xc0>
 8005312:	684b      	ldr	r3, [r1, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	dc05      	bgt.n	8005324 <__sflush_r+0x20>
 8005318:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800531a:	2b00      	cmp	r3, #0
 800531c:	dc02      	bgt.n	8005324 <__sflush_r+0x20>
 800531e:	2000      	movs	r0, #0
 8005320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005324:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005326:	2e00      	cmp	r6, #0
 8005328:	d0f9      	beq.n	800531e <__sflush_r+0x1a>
 800532a:	2300      	movs	r3, #0
 800532c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005330:	682f      	ldr	r7, [r5, #0]
 8005332:	6a21      	ldr	r1, [r4, #32]
 8005334:	602b      	str	r3, [r5, #0]
 8005336:	d032      	beq.n	800539e <__sflush_r+0x9a>
 8005338:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800533a:	89a3      	ldrh	r3, [r4, #12]
 800533c:	075a      	lsls	r2, r3, #29
 800533e:	d505      	bpl.n	800534c <__sflush_r+0x48>
 8005340:	6863      	ldr	r3, [r4, #4]
 8005342:	1ac0      	subs	r0, r0, r3
 8005344:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005346:	b10b      	cbz	r3, 800534c <__sflush_r+0x48>
 8005348:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800534a:	1ac0      	subs	r0, r0, r3
 800534c:	2300      	movs	r3, #0
 800534e:	4602      	mov	r2, r0
 8005350:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005352:	6a21      	ldr	r1, [r4, #32]
 8005354:	4628      	mov	r0, r5
 8005356:	47b0      	blx	r6
 8005358:	1c43      	adds	r3, r0, #1
 800535a:	89a3      	ldrh	r3, [r4, #12]
 800535c:	d106      	bne.n	800536c <__sflush_r+0x68>
 800535e:	6829      	ldr	r1, [r5, #0]
 8005360:	291d      	cmp	r1, #29
 8005362:	d848      	bhi.n	80053f6 <__sflush_r+0xf2>
 8005364:	4a29      	ldr	r2, [pc, #164]	; (800540c <__sflush_r+0x108>)
 8005366:	40ca      	lsrs	r2, r1
 8005368:	07d6      	lsls	r6, r2, #31
 800536a:	d544      	bpl.n	80053f6 <__sflush_r+0xf2>
 800536c:	2200      	movs	r2, #0
 800536e:	6062      	str	r2, [r4, #4]
 8005370:	6922      	ldr	r2, [r4, #16]
 8005372:	04d9      	lsls	r1, r3, #19
 8005374:	6022      	str	r2, [r4, #0]
 8005376:	d504      	bpl.n	8005382 <__sflush_r+0x7e>
 8005378:	1c42      	adds	r2, r0, #1
 800537a:	d101      	bne.n	8005380 <__sflush_r+0x7c>
 800537c:	682b      	ldr	r3, [r5, #0]
 800537e:	b903      	cbnz	r3, 8005382 <__sflush_r+0x7e>
 8005380:	6560      	str	r0, [r4, #84]	; 0x54
 8005382:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005384:	602f      	str	r7, [r5, #0]
 8005386:	2900      	cmp	r1, #0
 8005388:	d0c9      	beq.n	800531e <__sflush_r+0x1a>
 800538a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800538e:	4299      	cmp	r1, r3
 8005390:	d002      	beq.n	8005398 <__sflush_r+0x94>
 8005392:	4628      	mov	r0, r5
 8005394:	f7ff fc9c 	bl	8004cd0 <_free_r>
 8005398:	2000      	movs	r0, #0
 800539a:	6360      	str	r0, [r4, #52]	; 0x34
 800539c:	e7c0      	b.n	8005320 <__sflush_r+0x1c>
 800539e:	2301      	movs	r3, #1
 80053a0:	4628      	mov	r0, r5
 80053a2:	47b0      	blx	r6
 80053a4:	1c41      	adds	r1, r0, #1
 80053a6:	d1c8      	bne.n	800533a <__sflush_r+0x36>
 80053a8:	682b      	ldr	r3, [r5, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d0c5      	beq.n	800533a <__sflush_r+0x36>
 80053ae:	2b1d      	cmp	r3, #29
 80053b0:	d001      	beq.n	80053b6 <__sflush_r+0xb2>
 80053b2:	2b16      	cmp	r3, #22
 80053b4:	d101      	bne.n	80053ba <__sflush_r+0xb6>
 80053b6:	602f      	str	r7, [r5, #0]
 80053b8:	e7b1      	b.n	800531e <__sflush_r+0x1a>
 80053ba:	89a3      	ldrh	r3, [r4, #12]
 80053bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053c0:	81a3      	strh	r3, [r4, #12]
 80053c2:	e7ad      	b.n	8005320 <__sflush_r+0x1c>
 80053c4:	690f      	ldr	r7, [r1, #16]
 80053c6:	2f00      	cmp	r7, #0
 80053c8:	d0a9      	beq.n	800531e <__sflush_r+0x1a>
 80053ca:	0793      	lsls	r3, r2, #30
 80053cc:	bf18      	it	ne
 80053ce:	2300      	movne	r3, #0
 80053d0:	680e      	ldr	r6, [r1, #0]
 80053d2:	bf08      	it	eq
 80053d4:	694b      	ldreq	r3, [r1, #20]
 80053d6:	eba6 0807 	sub.w	r8, r6, r7
 80053da:	600f      	str	r7, [r1, #0]
 80053dc:	608b      	str	r3, [r1, #8]
 80053de:	f1b8 0f00 	cmp.w	r8, #0
 80053e2:	dd9c      	ble.n	800531e <__sflush_r+0x1a>
 80053e4:	4643      	mov	r3, r8
 80053e6:	463a      	mov	r2, r7
 80053e8:	6a21      	ldr	r1, [r4, #32]
 80053ea:	4628      	mov	r0, r5
 80053ec:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80053ee:	47b0      	blx	r6
 80053f0:	2800      	cmp	r0, #0
 80053f2:	dc06      	bgt.n	8005402 <__sflush_r+0xfe>
 80053f4:	89a3      	ldrh	r3, [r4, #12]
 80053f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053fa:	81a3      	strh	r3, [r4, #12]
 80053fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005400:	e78e      	b.n	8005320 <__sflush_r+0x1c>
 8005402:	4407      	add	r7, r0
 8005404:	eba8 0800 	sub.w	r8, r8, r0
 8005408:	e7e9      	b.n	80053de <__sflush_r+0xda>
 800540a:	bf00      	nop
 800540c:	20400001 	.word	0x20400001

08005410 <_fflush_r>:
 8005410:	b538      	push	{r3, r4, r5, lr}
 8005412:	690b      	ldr	r3, [r1, #16]
 8005414:	4605      	mov	r5, r0
 8005416:	460c      	mov	r4, r1
 8005418:	b1db      	cbz	r3, 8005452 <_fflush_r+0x42>
 800541a:	b118      	cbz	r0, 8005424 <_fflush_r+0x14>
 800541c:	6983      	ldr	r3, [r0, #24]
 800541e:	b90b      	cbnz	r3, 8005424 <_fflush_r+0x14>
 8005420:	f7ff f8b2 	bl	8004588 <__sinit>
 8005424:	4b0c      	ldr	r3, [pc, #48]	; (8005458 <_fflush_r+0x48>)
 8005426:	429c      	cmp	r4, r3
 8005428:	d109      	bne.n	800543e <_fflush_r+0x2e>
 800542a:	686c      	ldr	r4, [r5, #4]
 800542c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005430:	b17b      	cbz	r3, 8005452 <_fflush_r+0x42>
 8005432:	4621      	mov	r1, r4
 8005434:	4628      	mov	r0, r5
 8005436:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800543a:	f7ff bf63 	b.w	8005304 <__sflush_r>
 800543e:	4b07      	ldr	r3, [pc, #28]	; (800545c <_fflush_r+0x4c>)
 8005440:	429c      	cmp	r4, r3
 8005442:	d101      	bne.n	8005448 <_fflush_r+0x38>
 8005444:	68ac      	ldr	r4, [r5, #8]
 8005446:	e7f1      	b.n	800542c <_fflush_r+0x1c>
 8005448:	4b05      	ldr	r3, [pc, #20]	; (8005460 <_fflush_r+0x50>)
 800544a:	429c      	cmp	r4, r3
 800544c:	bf08      	it	eq
 800544e:	68ec      	ldreq	r4, [r5, #12]
 8005450:	e7ec      	b.n	800542c <_fflush_r+0x1c>
 8005452:	2000      	movs	r0, #0
 8005454:	bd38      	pop	{r3, r4, r5, pc}
 8005456:	bf00      	nop
 8005458:	080056d4 	.word	0x080056d4
 800545c:	080056f4 	.word	0x080056f4
 8005460:	080056b4 	.word	0x080056b4

08005464 <_lseek_r>:
 8005464:	b538      	push	{r3, r4, r5, lr}
 8005466:	4605      	mov	r5, r0
 8005468:	4608      	mov	r0, r1
 800546a:	4611      	mov	r1, r2
 800546c:	2200      	movs	r2, #0
 800546e:	4c05      	ldr	r4, [pc, #20]	; (8005484 <_lseek_r+0x20>)
 8005470:	6022      	str	r2, [r4, #0]
 8005472:	461a      	mov	r2, r3
 8005474:	f7fb fdc7 	bl	8001006 <_lseek>
 8005478:	1c43      	adds	r3, r0, #1
 800547a:	d102      	bne.n	8005482 <_lseek_r+0x1e>
 800547c:	6823      	ldr	r3, [r4, #0]
 800547e:	b103      	cbz	r3, 8005482 <_lseek_r+0x1e>
 8005480:	602b      	str	r3, [r5, #0]
 8005482:	bd38      	pop	{r3, r4, r5, pc}
 8005484:	20000280 	.word	0x20000280

08005488 <__swhatbuf_r>:
 8005488:	b570      	push	{r4, r5, r6, lr}
 800548a:	460e      	mov	r6, r1
 800548c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005490:	b096      	sub	sp, #88	; 0x58
 8005492:	2900      	cmp	r1, #0
 8005494:	4614      	mov	r4, r2
 8005496:	461d      	mov	r5, r3
 8005498:	da07      	bge.n	80054aa <__swhatbuf_r+0x22>
 800549a:	2300      	movs	r3, #0
 800549c:	602b      	str	r3, [r5, #0]
 800549e:	89b3      	ldrh	r3, [r6, #12]
 80054a0:	061a      	lsls	r2, r3, #24
 80054a2:	d410      	bmi.n	80054c6 <__swhatbuf_r+0x3e>
 80054a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054a8:	e00e      	b.n	80054c8 <__swhatbuf_r+0x40>
 80054aa:	466a      	mov	r2, sp
 80054ac:	f000 f884 	bl	80055b8 <_fstat_r>
 80054b0:	2800      	cmp	r0, #0
 80054b2:	dbf2      	blt.n	800549a <__swhatbuf_r+0x12>
 80054b4:	9a01      	ldr	r2, [sp, #4]
 80054b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80054ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80054be:	425a      	negs	r2, r3
 80054c0:	415a      	adcs	r2, r3
 80054c2:	602a      	str	r2, [r5, #0]
 80054c4:	e7ee      	b.n	80054a4 <__swhatbuf_r+0x1c>
 80054c6:	2340      	movs	r3, #64	; 0x40
 80054c8:	2000      	movs	r0, #0
 80054ca:	6023      	str	r3, [r4, #0]
 80054cc:	b016      	add	sp, #88	; 0x58
 80054ce:	bd70      	pop	{r4, r5, r6, pc}

080054d0 <__smakebuf_r>:
 80054d0:	898b      	ldrh	r3, [r1, #12]
 80054d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80054d4:	079d      	lsls	r5, r3, #30
 80054d6:	4606      	mov	r6, r0
 80054d8:	460c      	mov	r4, r1
 80054da:	d507      	bpl.n	80054ec <__smakebuf_r+0x1c>
 80054dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80054e0:	6023      	str	r3, [r4, #0]
 80054e2:	6123      	str	r3, [r4, #16]
 80054e4:	2301      	movs	r3, #1
 80054e6:	6163      	str	r3, [r4, #20]
 80054e8:	b002      	add	sp, #8
 80054ea:	bd70      	pop	{r4, r5, r6, pc}
 80054ec:	ab01      	add	r3, sp, #4
 80054ee:	466a      	mov	r2, sp
 80054f0:	f7ff ffca 	bl	8005488 <__swhatbuf_r>
 80054f4:	9900      	ldr	r1, [sp, #0]
 80054f6:	4605      	mov	r5, r0
 80054f8:	4630      	mov	r0, r6
 80054fa:	f7ff fc35 	bl	8004d68 <_malloc_r>
 80054fe:	b948      	cbnz	r0, 8005514 <__smakebuf_r+0x44>
 8005500:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005504:	059a      	lsls	r2, r3, #22
 8005506:	d4ef      	bmi.n	80054e8 <__smakebuf_r+0x18>
 8005508:	f023 0303 	bic.w	r3, r3, #3
 800550c:	f043 0302 	orr.w	r3, r3, #2
 8005510:	81a3      	strh	r3, [r4, #12]
 8005512:	e7e3      	b.n	80054dc <__smakebuf_r+0xc>
 8005514:	4b0d      	ldr	r3, [pc, #52]	; (800554c <__smakebuf_r+0x7c>)
 8005516:	62b3      	str	r3, [r6, #40]	; 0x28
 8005518:	89a3      	ldrh	r3, [r4, #12]
 800551a:	6020      	str	r0, [r4, #0]
 800551c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005520:	81a3      	strh	r3, [r4, #12]
 8005522:	9b00      	ldr	r3, [sp, #0]
 8005524:	6120      	str	r0, [r4, #16]
 8005526:	6163      	str	r3, [r4, #20]
 8005528:	9b01      	ldr	r3, [sp, #4]
 800552a:	b15b      	cbz	r3, 8005544 <__smakebuf_r+0x74>
 800552c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005530:	4630      	mov	r0, r6
 8005532:	f000 f853 	bl	80055dc <_isatty_r>
 8005536:	b128      	cbz	r0, 8005544 <__smakebuf_r+0x74>
 8005538:	89a3      	ldrh	r3, [r4, #12]
 800553a:	f023 0303 	bic.w	r3, r3, #3
 800553e:	f043 0301 	orr.w	r3, r3, #1
 8005542:	81a3      	strh	r3, [r4, #12]
 8005544:	89a3      	ldrh	r3, [r4, #12]
 8005546:	431d      	orrs	r5, r3
 8005548:	81a5      	strh	r5, [r4, #12]
 800554a:	e7cd      	b.n	80054e8 <__smakebuf_r+0x18>
 800554c:	08004551 	.word	0x08004551

08005550 <__ascii_mbtowc>:
 8005550:	b082      	sub	sp, #8
 8005552:	b901      	cbnz	r1, 8005556 <__ascii_mbtowc+0x6>
 8005554:	a901      	add	r1, sp, #4
 8005556:	b142      	cbz	r2, 800556a <__ascii_mbtowc+0x1a>
 8005558:	b14b      	cbz	r3, 800556e <__ascii_mbtowc+0x1e>
 800555a:	7813      	ldrb	r3, [r2, #0]
 800555c:	600b      	str	r3, [r1, #0]
 800555e:	7812      	ldrb	r2, [r2, #0]
 8005560:	1c10      	adds	r0, r2, #0
 8005562:	bf18      	it	ne
 8005564:	2001      	movne	r0, #1
 8005566:	b002      	add	sp, #8
 8005568:	4770      	bx	lr
 800556a:	4610      	mov	r0, r2
 800556c:	e7fb      	b.n	8005566 <__ascii_mbtowc+0x16>
 800556e:	f06f 0001 	mvn.w	r0, #1
 8005572:	e7f8      	b.n	8005566 <__ascii_mbtowc+0x16>

08005574 <__malloc_lock>:
 8005574:	4770      	bx	lr

08005576 <__malloc_unlock>:
 8005576:	4770      	bx	lr

08005578 <_read_r>:
 8005578:	b538      	push	{r3, r4, r5, lr}
 800557a:	4605      	mov	r5, r0
 800557c:	4608      	mov	r0, r1
 800557e:	4611      	mov	r1, r2
 8005580:	2200      	movs	r2, #0
 8005582:	4c05      	ldr	r4, [pc, #20]	; (8005598 <_read_r+0x20>)
 8005584:	6022      	str	r2, [r4, #0]
 8005586:	461a      	mov	r2, r3
 8005588:	f7fb fcfc 	bl	8000f84 <_read>
 800558c:	1c43      	adds	r3, r0, #1
 800558e:	d102      	bne.n	8005596 <_read_r+0x1e>
 8005590:	6823      	ldr	r3, [r4, #0]
 8005592:	b103      	cbz	r3, 8005596 <_read_r+0x1e>
 8005594:	602b      	str	r3, [r5, #0]
 8005596:	bd38      	pop	{r3, r4, r5, pc}
 8005598:	20000280 	.word	0x20000280

0800559c <__ascii_wctomb>:
 800559c:	b149      	cbz	r1, 80055b2 <__ascii_wctomb+0x16>
 800559e:	2aff      	cmp	r2, #255	; 0xff
 80055a0:	bf8b      	itete	hi
 80055a2:	238a      	movhi	r3, #138	; 0x8a
 80055a4:	700a      	strbls	r2, [r1, #0]
 80055a6:	6003      	strhi	r3, [r0, #0]
 80055a8:	2001      	movls	r0, #1
 80055aa:	bf88      	it	hi
 80055ac:	f04f 30ff 	movhi.w	r0, #4294967295
 80055b0:	4770      	bx	lr
 80055b2:	4608      	mov	r0, r1
 80055b4:	4770      	bx	lr
	...

080055b8 <_fstat_r>:
 80055b8:	b538      	push	{r3, r4, r5, lr}
 80055ba:	2300      	movs	r3, #0
 80055bc:	4c06      	ldr	r4, [pc, #24]	; (80055d8 <_fstat_r+0x20>)
 80055be:	4605      	mov	r5, r0
 80055c0:	4608      	mov	r0, r1
 80055c2:	4611      	mov	r1, r2
 80055c4:	6023      	str	r3, [r4, #0]
 80055c6:	f7fb fd05 	bl	8000fd4 <_fstat>
 80055ca:	1c43      	adds	r3, r0, #1
 80055cc:	d102      	bne.n	80055d4 <_fstat_r+0x1c>
 80055ce:	6823      	ldr	r3, [r4, #0]
 80055d0:	b103      	cbz	r3, 80055d4 <_fstat_r+0x1c>
 80055d2:	602b      	str	r3, [r5, #0]
 80055d4:	bd38      	pop	{r3, r4, r5, pc}
 80055d6:	bf00      	nop
 80055d8:	20000280 	.word	0x20000280

080055dc <_isatty_r>:
 80055dc:	b538      	push	{r3, r4, r5, lr}
 80055de:	2300      	movs	r3, #0
 80055e0:	4c05      	ldr	r4, [pc, #20]	; (80055f8 <_isatty_r+0x1c>)
 80055e2:	4605      	mov	r5, r0
 80055e4:	4608      	mov	r0, r1
 80055e6:	6023      	str	r3, [r4, #0]
 80055e8:	f7fb fd03 	bl	8000ff2 <_isatty>
 80055ec:	1c43      	adds	r3, r0, #1
 80055ee:	d102      	bne.n	80055f6 <_isatty_r+0x1a>
 80055f0:	6823      	ldr	r3, [r4, #0]
 80055f2:	b103      	cbz	r3, 80055f6 <_isatty_r+0x1a>
 80055f4:	602b      	str	r3, [r5, #0]
 80055f6:	bd38      	pop	{r3, r4, r5, pc}
 80055f8:	20000280 	.word	0x20000280

080055fc <_init>:
 80055fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055fe:	bf00      	nop
 8005600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005602:	bc08      	pop	{r3}
 8005604:	469e      	mov	lr, r3
 8005606:	4770      	bx	lr

08005608 <_fini>:
 8005608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800560a:	bf00      	nop
 800560c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800560e:	bc08      	pop	{r3}
 8005610:	469e      	mov	lr, r3
 8005612:	4770      	bx	lr
